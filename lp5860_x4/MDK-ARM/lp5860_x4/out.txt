
lp5860_x4.axf:     file format elf32-littlearm


Disassembly of section ER_IROM1:

08000000 <__Vectors>:
 8000000:	50 0d 00 20 a1 02 00 08 39 49 00 08 ad 3e 00 08     P.. ....9I...>..
 8000010:	35 49 00 08 61 15 00 08 b5 55 00 08 00 00 00 00     5I..a....U......
	...
 800002c:	91 4f 00 08 65 15 00 08 00 00 00 00 29 4d 00 08     .O..e.......)M..
 800003c:	e9 4f 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     .O..............
 800004c:	bb 02 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     ................
 800005c:	bb 02 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     ................
 800006c:	bb 02 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     ................
 800007c:	bb 02 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     ................
 800008c:	bb 02 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     ................
 800009c:	bb 02 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     ................
 80000ac:	bb 02 00 08 61 50 00 08 bb 02 00 08 bb 02 00 08     ....aP..........
 80000bc:	bb 02 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     ................
 80000cc:	bb 02 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     ................
 80000dc:	bb 02 00 08 bb 02 00 08 bb 02 00 08 bb 02 00 08     ................

080000ec <__main>:
 80000ec:	f000 f802 	bl	80000f4 <__scatterload_rt2>
 80000f0:	f000 f8c6 	bl	8000280 <__rt_entry>

080000f4 <__scatterload_rt2>:
 80000f4:	a614      	add	r6, pc, #80	@ (adr r6, 8000148 <__scatterload_loop+0x4a>)
 80000f6:	e896 0c00 	ldmia.w	r6, {sl, fp}
 80000fa:	44b2      	add	sl, r6
 80000fc:	44b3      	add	fp, r6

080000fe <__scatterload_loop>:
 80000fe:	45da      	cmp	sl, fp
 8000100:	d101      	bne.n	8000106 <__scatterload_loop+0x8>
 8000102:	f000 f8bd 	bl	8000280 <__rt_entry>
 8000106:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800010a:	a60f      	add	r6, pc, #60	@ (adr r6, 8000148 <__scatterload_loop+0x4a>)
 800010c:	e896 0030 	ldmia.w	r6, {r4, r5}
 8000110:	eba5 0504 	sub.w	r5, r5, r4
 8000114:	eb04 0706 	add.w	r7, r4, r6
 8000118:	ebaa 0407 	sub.w	r4, sl, r7
 800011c:	f1a7 0701 	sub.w	r7, r7, #1
 8000120:	ea4f 1515 	mov.w	r5, r5, lsr #4
 8000124:	ea4f 1434 	mov.w	r4, r4, ror #4
 8000128:	f1a4 0401 	sub.w	r4, r4, #1
 800012c:	42ac      	cmp	r4, r5
 800012e:	d301      	bcc.n	8000134 <__scatterload_loop+0x36>
 8000130:	f000 f8a6 	bl	8000280 <__rt_entry>
 8000134:	f013 0f01 	tst.w	r3, #1
 8000138:	bf18      	it	ne
 800013a:	1afb      	subne	r3, r7, r3
 800013c:	f043 0301 	orr.w	r3, r3, #1
 8000140:	f000 f801 	bl	8000146 <__scatterload_loop+0x48>
 8000144:	e7db      	b.n	80000fe <__scatterload_loop>
 8000146:	4718      	bx	r3
 8000148:	00006070 	.word	0x00006070
 800014c:	00006090 	.word	0x00006090

08000150 <__decompress>:
 8000150:	440a      	add	r2, r1
 8000152:	f04f 0c00 	mov.w	ip, #0
 8000156:	f810 3b01 	ldrb.w	r3, [r0], #1
 800015a:	f013 0407 	ands.w	r4, r3, #7
 800015e:	bf08      	it	eq
 8000160:	f810 4b01 	ldrbeq.w	r4, [r0], #1
 8000164:	111d      	asrs	r5, r3, #4
 8000166:	bf08      	it	eq
 8000168:	f810 5b01 	ldrbeq.w	r5, [r0], #1
 800016c:	1e64      	subs	r4, r4, #1
 800016e:	d005      	beq.n	800017c <__decompress+0x2c>
 8000170:	f810 6b01 	ldrb.w	r6, [r0], #1
 8000174:	1e64      	subs	r4, r4, #1
 8000176:	f801 6b01 	strb.w	r6, [r1], #1
 800017a:	d1f9      	bne.n	8000170 <__decompress+0x20>
 800017c:	f013 0f08 	tst.w	r3, #8
 8000180:	bf1e      	ittt	ne
 8000182:	f810 4b01 	ldrbne.w	r4, [r0], #1
 8000186:	1cad      	addne	r5, r5, #2
 8000188:	1b0c      	subne	r4, r1, r4
 800018a:	d109      	bne.n	80001a0 <__decompress+0x50>
 800018c:	1e6d      	subs	r5, r5, #1
 800018e:	bf58      	it	pl
 8000190:	f801 cb01 	strbpl.w	ip, [r1], #1
 8000194:	d5fa      	bpl.n	800018c <__decompress+0x3c>
 8000196:	e005      	b.n	80001a4 <__decompress+0x54>
 8000198:	f814 6b01 	ldrb.w	r6, [r4], #1
 800019c:	f801 6b01 	strb.w	r6, [r1], #1
 80001a0:	1e6d      	subs	r5, r5, #1
 80001a2:	d5f9      	bpl.n	8000198 <__decompress+0x48>
 80001a4:	4291      	cmp	r1, r2
 80001a6:	d3d6      	bcc.n	8000156 <__decompress+0x6>
 80001a8:	4770      	bx	lr
	...

080001ac <__scatterload_null>:
 80001ac:	4770      	bx	lr
	...

080001b0 <__scatterload_zeroinit>:
 80001b0:	2300      	movs	r3, #0
 80001b2:	2400      	movs	r4, #0
 80001b4:	2500      	movs	r5, #0
 80001b6:	2600      	movs	r6, #0
 80001b8:	3a10      	subs	r2, #16
 80001ba:	bf28      	it	cs
 80001bc:	c178      	stmiacs	r1!, {r3, r4, r5, r6}
 80001be:	d8fb      	bhi.n	80001b8 <__scatterload_zeroinit+0x8>
 80001c0:	0752      	lsls	r2, r2, #29
 80001c2:	bf28      	it	cs
 80001c4:	c130      	stmiacs	r1!, {r4, r5}
 80001c6:	bf48      	it	mi
 80001c8:	600b      	strmi	r3, [r1, #0]
 80001ca:	4770      	bx	lr

080001cc <_printf_n>:
 80001cc:	296e      	cmp	r1, #110	@ 0x6e
 80001ce:	f000 81cd 	beq.w	800056c <_printf_charcount>

080001d2 <_printf_p>:
 80001d2:	2970      	cmp	r1, #112	@ 0x70
 80001d4:	f000 830f 	beq.w	80007f6 <_printf_hex_ptr>

080001d8 <_printf_f>:
 80001d8:	2966      	cmp	r1, #102	@ 0x66
 80001da:	f005 8749 	beq.w	8006070 <_printf_fp_dec>

080001de <_printf_e>:
 80001de:	2965      	cmp	r1, #101	@ 0x65
 80001e0:	f005 8746 	beq.w	8006070 <_printf_fp_dec>

080001e4 <_printf_g>:
 80001e4:	2967      	cmp	r1, #103	@ 0x67
 80001e6:	f005 8743 	beq.w	8006070 <_printf_fp_dec>

080001ea <_printf_a>:
 80001ea:	2961      	cmp	r1, #97	@ 0x61
 80001ec:	f005 8742 	beq.w	8006074 <_printf_fp_hex>

080001f0 <_printf_ll>:
 80001f0:	6803      	ldr	r3, [r0, #0]
 80001f2:	0a1b      	lsrs	r3, r3, #8
 80001f4:	bf28      	it	cs
 80001f6:	f041 0180 	orrcs.w	r1, r1, #128	@ 0x80

080001fa <_printf_i>:
 80001fa:	2969      	cmp	r1, #105	@ 0x69
 80001fc:	f000 817a 	beq.w	80004f4 <_printf_int_dec>

08000200 <_printf_d>:
 8000200:	2964      	cmp	r1, #100	@ 0x64
 8000202:	f000 8177 	beq.w	80004f4 <_printf_int_dec>

08000206 <_printf_u>:
 8000206:	2975      	cmp	r1, #117	@ 0x75
 8000208:	f000 8174 	beq.w	80004f4 <_printf_int_dec>

0800020c <_printf_o>:
 800020c:	296f      	cmp	r1, #111	@ 0x6f
 800020e:	f000 829d 	beq.w	800074c <_printf_int_oct>

08000212 <_printf_x>:
 8000212:	2978      	cmp	r1, #120	@ 0x78
 8000214:	f000 82db 	beq.w	80007ce <_printf_int_hex>

08000218 <_printf_lli>:
 8000218:	29e9      	cmp	r1, #233	@ 0xe9
 800021a:	f000 8237 	beq.w	800068c <_printf_longlong_dec>

0800021e <_printf_lld>:
 800021e:	29e4      	cmp	r1, #228	@ 0xe4
 8000220:	f000 8234 	beq.w	800068c <_printf_longlong_dec>

08000224 <_printf_llu>:
 8000224:	29f5      	cmp	r1, #245	@ 0xf5
 8000226:	f000 8231 	beq.w	800068c <_printf_longlong_dec>

0800022a <_printf_llo>:
 800022a:	29ef      	cmp	r1, #239	@ 0xef
 800022c:	f000 829a 	beq.w	8000764 <_printf_ll_oct>

08000230 <_printf_llx>:
 8000230:	29f8      	cmp	r1, #248	@ 0xf8
 8000232:	f000 82da 	beq.w	80007ea <_printf_ll_hex>

08000236 <_printf_l>:
 8000236:	6803      	ldr	r3, [r0, #0]
 8000238:	09db      	lsrs	r3, r3, #7
 800023a:	bf28      	it	cs
 800023c:	f041 0180 	orrcs.w	r1, r1, #128	@ 0x80

08000240 <_printf_c>:
 8000240:	2963      	cmp	r1, #99	@ 0x63
 8000242:	f001 800d 	beq.w	8001260 <_printf_char>

08000246 <_printf_s>:
 8000246:	2973      	cmp	r1, #115	@ 0x73
 8000248:	f001 8012 	beq.w	8001270 <_printf_string>

0800024c <_printf_lc>:
 800024c:	29e3      	cmp	r1, #227	@ 0xe3
 800024e:	f001 801d 	beq.w	800128c <_printf_wchar>

08000252 <_printf_ls>:
 8000252:	29f3      	cmp	r1, #243	@ 0xf3
 8000254:	f001 8022 	beq.w	800129c <_printf_wstring>

08000258 <_printf_percent_end>:
 8000258:	2000      	movs	r0, #0
 800025a:	4770      	bx	lr

0800025c <__rt_lib_init>:
 800025c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

0800025e <__rt_lib_init_fp_1>:
 800025e:	f001 f873 	bl	8001348 <__rt_locale>
 8000262:	0004      	movs	r4, r0

08000264 <__rt_lib_init_lc_collate_1>:
 8000264:	2000      	movs	r0, #0
 8000266:	2100      	movs	r1, #0
 8000268:	f005 feec 	bl	8006044 <_get_lc_ctype>
 800026c:	1c40      	adds	r0, r0, #1
 800026e:	6060      	str	r0, [r4, #4]

08000270 <__rt_lib_init_lc_ctype_1>:
 8000270:	2000      	movs	r0, #0
 8000272:	2100      	movs	r1, #0
 8000274:	f005 fed0 	bl	8006018 <_get_lc_numeric>
 8000278:	60e0      	str	r0, [r4, #12]

0800027a <__rt_lib_init_alloca_1>:
 800027a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800027c <__rt_lib_shutdown>:
 800027c:	b510      	push	{r4, lr}

0800027e <__rt_lib_shutdown_cpp_1>:
 800027e:	bd10      	pop	{r4, pc}

08000280 <__rt_entry>:
 8000280:	f001 f834 	bl	80012ec <__user_setup_stackheap>
 8000284:	4611      	mov	r1, r2

08000286 <__rt_entry_li>:
 8000286:	f7ff ffe9 	bl	800025c <__rt_lib_init>

0800028a <__rt_entry_main>:
 800028a:	f005 fa2f 	bl	80056ec <main>
 800028e:	f001 f911 	bl	80014b4 <exit>

08000292 <__rt_exit>:
 8000292:	b403      	push	{r0, r1}

08000294 <__rt_exit_ls>:
 8000294:	f7ff fff2 	bl	800027c <__rt_lib_shutdown>

08000298 <__rt_exit_exit>:
 8000298:	bc03      	pop	{r0, r1}
 800029a:	f001 f959 	bl	8001550 <_sys_exit>
	...

080002a0 <Reset_Handler>:
; Reset handler
Reset_Handler    PROC
                 EXPORT  Reset_Handler             [WEAK]
     IMPORT  __main
     IMPORT  SystemInit
                 LDR     R0, =SystemInit
 80002a0:	4809      	ldr	r0, [pc, #36]	@ (80002c8 <__user_initial_stackheap+0xc>)
                 BLX     R0
 80002a2:	4780      	blx	r0
                 LDR     R0, =__main
 80002a4:	4809      	ldr	r0, [pc, #36]	@ (80002cc <__user_initial_stackheap+0x10>)
                 BX      R0
 80002a6:	4700      	bx	r0

; Dummy Exception Handlers (infinite loops which can be modified)

NMI_Handler     PROC
                EXPORT  NMI_Handler                [WEAK]
                B       .
 80002a8:	e7fe      	b.n	80002a8 <Reset_Handler+0x8>
                ENDP
HardFault_Handler\
                PROC
                EXPORT  HardFault_Handler          [WEAK]
                B       .
 80002aa:	e7fe      	b.n	80002aa <Reset_Handler+0xa>
                ENDP
MemManage_Handler\
                PROC
                EXPORT  MemManage_Handler          [WEAK]
                B       .
 80002ac:	e7fe      	b.n	80002ac <Reset_Handler+0xc>
                ENDP
BusFault_Handler\
                PROC
                EXPORT  BusFault_Handler           [WEAK]
                B       .
 80002ae:	e7fe      	b.n	80002ae <Reset_Handler+0xe>
                ENDP
UsageFault_Handler\
                PROC
                EXPORT  UsageFault_Handler         [WEAK]
                B       .
 80002b0:	e7fe      	b.n	80002b0 <Reset_Handler+0x10>
                ENDP
SVC_Handler     PROC
                EXPORT  SVC_Handler                [WEAK]
                B       .
 80002b2:	e7fe      	b.n	80002b2 <Reset_Handler+0x12>
                ENDP
DebugMon_Handler\
                PROC
                EXPORT  DebugMon_Handler           [WEAK]
                B       .
 80002b4:	e7fe      	b.n	80002b4 <Reset_Handler+0x14>
                ENDP
PendSV_Handler  PROC
                EXPORT  PendSV_Handler             [WEAK]
                B       .
 80002b6:	e7fe      	b.n	80002b6 <Reset_Handler+0x16>
                ENDP
SysTick_Handler PROC
                EXPORT  SysTick_Handler            [WEAK]
                B       .
 80002b8:	e7fe      	b.n	80002b8 <Reset_Handler+0x18>

080002ba <ADC1_2_IRQHandler>:
USART3_IRQHandler
EXTI15_10_IRQHandler
RTC_Alarm_IRQHandler
USBWakeUp_IRQHandler

                B       .
 80002ba:	e7fe      	b.n	80002ba <ADC1_2_IRQHandler>

080002bc <__user_initial_stackheap>:
                 IMPORT  __use_two_region_memory
                 EXPORT  __user_initial_stackheap
                 
__user_initial_stackheap

                 LDR     R0, =  Heap_Mem
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__user_initial_stackheap+0x14>)
                 LDR     R1, =(Stack_Mem + Stack_Size)
 80002be:	4905      	ldr	r1, [pc, #20]	@ (80002d4 <__user_initial_stackheap+0x18>)
                 LDR     R2, = (Heap_Mem +  Heap_Size)
 80002c0:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <__user_initial_stackheap+0x1c>)
                 LDR     R3, = Stack_Mem
 80002c2:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <__user_initial_stackheap+0x20>)
                 BX      LR
 80002c4:	4770      	bx	lr
 80002c6:	0000      	.short	0x0000
 80002c8:	0800505d 	.word	0x0800505d
 80002cc:	080000ed 	.word	0x080000ed
 80002d0:	20000750 	.word	0x20000750
 80002d4:	20000d50 	.word	0x20000d50
 80002d8:	20000950 	.word	0x20000950
 80002dc:	20000950 	.word	0x20000950

080002e0 <sprintf>:
 80002e0:	b40f      	push	{r0, r1, r2, r3}
 80002e2:	b51c      	push	{r2, r3, r4, lr}
 80002e4:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <sprintf+0x28>)
 80002e6:	aa06      	add	r2, sp, #24
 80002e8:	447b      	add	r3, pc
 80002ea:	4669      	mov	r1, sp
 80002ec:	9000      	str	r0, [sp, #0]
 80002ee:	9805      	ldr	r0, [sp, #20]
 80002f0:	f000 f955 	bl	800059e <_printf_char_common>
 80002f4:	4604      	mov	r4, r0
 80002f6:	2000      	movs	r0, #0
 80002f8:	4669      	mov	r1, sp
 80002fa:	f000 f963 	bl	80005c4 <_sputc>
 80002fe:	4620      	mov	r0, r4
 8000300:	bc1c      	pop	{r2, r3, r4}
 8000302:	f85d fb14 	ldr.w	pc, [sp], #20
 8000306:	0000      	.short	0x0000
 8000308:	000002d9 	.word	0x000002d9

0800030c <__rt_memcpy>:
 800030c:	2a03      	cmp	r2, #3
 800030e:	f240 8030 	bls.w	8000372 <_memcpy_lastbytes>
 8000312:	f010 0c03 	ands.w	ip, r0, #3
 8000316:	f000 8015 	beq.w	8000344 <__rt_memcpy+0x38>
 800031a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800031e:	f1bc 0f02 	cmp.w	ip, #2
 8000322:	4462      	add	r2, ip
 8000324:	bf98      	it	ls
 8000326:	f811 cb01 	ldrbls.w	ip, [r1], #1
 800032a:	f800 3b01 	strb.w	r3, [r0], #1
 800032e:	bf38      	it	cc
 8000330:	f811 3b01 	ldrbcc.w	r3, [r1], #1
 8000334:	f1a2 0204 	sub.w	r2, r2, #4
 8000338:	bf98      	it	ls
 800033a:	f800 cb01 	strbls.w	ip, [r0], #1
 800033e:	bf38      	it	cc
 8000340:	f800 3b01 	strbcc.w	r3, [r0], #1
 8000344:	f011 0303 	ands.w	r3, r1, #3
 8000348:	f000 8324 	beq.w	8000994 <__rt_memcpy_w>
 800034c:	3a08      	subs	r2, #8
 800034e:	f0c0 8008 	bcc.w	8000362 <__rt_memcpy+0x56>
 8000352:	f851 3b04 	ldr.w	r3, [r1], #4
 8000356:	3a08      	subs	r2, #8
 8000358:	f851 cb04 	ldr.w	ip, [r1], #4
 800035c:	e8a0 1008 	stmia.w	r0!, {r3, ip}
 8000360:	e7f5      	b.n	800034e <__rt_memcpy+0x42>
 8000362:	1d12      	adds	r2, r2, #4
 8000364:	bf5c      	itt	pl
 8000366:	f851 3b04 	ldrpl.w	r3, [r1], #4
 800036a:	f840 3b04 	strpl.w	r3, [r0], #4
 800036e:	f3af 8000 	nop.w

08000372 <_memcpy_lastbytes>:
 8000372:	07d2      	lsls	r2, r2, #31
 8000374:	bf24      	itt	cs
 8000376:	f811 3b01 	ldrbcs.w	r3, [r1], #1
 800037a:	f811 cb01 	ldrbcs.w	ip, [r1], #1
 800037e:	bf48      	it	mi
 8000380:	f811 2b01 	ldrbmi.w	r2, [r1], #1
 8000384:	bf24      	itt	cs
 8000386:	f800 3b01 	strbcs.w	r3, [r0], #1
 800038a:	f800 cb01 	strbcs.w	ip, [r0], #1
 800038e:	bf48      	it	mi
 8000390:	f800 2b01 	strbmi.w	r2, [r0], #1
 8000394:	4770      	bx	lr

08000396 <__aeabi_memclr>:
 8000396:	f04f 0200 	mov.w	r2, #0

0800039a <_memset>:
 800039a:	2904      	cmp	r1, #4
 800039c:	f0c0 8012 	bcc.w	80003c4 <_memset+0x2a>
 80003a0:	f010 0c03 	ands.w	ip, r0, #3
 80003a4:	f000 801b 	beq.w	80003de <_memset_w>
 80003a8:	f1cc 0c04 	rsb	ip, ip, #4
 80003ac:	f1bc 0f02 	cmp.w	ip, #2
 80003b0:	bf18      	it	ne
 80003b2:	f800 2b01 	strbne.w	r2, [r0], #1
 80003b6:	bfa8      	it	ge
 80003b8:	f820 2b02 	strhge.w	r2, [r0], #2
 80003bc:	eba1 010c 	sub.w	r1, r1, ip
 80003c0:	f000 b80d 	b.w	80003de <_memset_w>
 80003c4:	ea5f 7cc1 	movs.w	ip, r1, lsl #31
 80003c8:	bf24      	itt	cs
 80003ca:	f800 2b01 	strbcs.w	r2, [r0], #1
 80003ce:	f800 2b01 	strbcs.w	r2, [r0], #1
 80003d2:	bf48      	it	mi
 80003d4:	f800 2b01 	strbmi.w	r2, [r0], #1
 80003d8:	4770      	bx	lr

080003da <__aeabi_memclr4>:
 80003da:	f04f 0200 	mov.w	r2, #0

080003de <_memset_w>:
 80003de:	b500      	push	{lr}
 80003e0:	4613      	mov	r3, r2
 80003e2:	4694      	mov	ip, r2
 80003e4:	4696      	mov	lr, r2
 80003e6:	3920      	subs	r1, #32
 80003e8:	bf22      	ittt	cs
 80003ea:	e8a0 500c 	stmiacs.w	r0!, {r2, r3, ip, lr}
 80003ee:	e8a0 500c 	stmiacs.w	r0!, {r2, r3, ip, lr}
 80003f2:	f1b1 0120 	subscs.w	r1, r1, #32
 80003f6:	f4bf aff7 	bcs.w	80003e8 <_memset_w+0xa>
 80003fa:	0709      	lsls	r1, r1, #28
 80003fc:	bf28      	it	cs
 80003fe:	e8a0 500c 	stmiacs.w	r0!, {r2, r3, ip, lr}
 8000402:	bf48      	it	mi
 8000404:	c00c      	stmiami	r0!, {r2, r3}
 8000406:	f85d eb04 	ldr.w	lr, [sp], #4
 800040a:	0089      	lsls	r1, r1, #2
 800040c:	bf28      	it	cs
 800040e:	f840 2b04 	strcs.w	r2, [r0], #4
 8000412:	bf08      	it	eq
 8000414:	4770      	bxeq	lr
 8000416:	bf48      	it	mi
 8000418:	f820 2b02 	strhmi.w	r2, [r0], #2
 800041c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000420:	bf18      	it	ne
 8000422:	f800 2b01 	strbne.w	r2, [r0], #1
 8000426:	4770      	bx	lr

08000428 <__use_two_region_memory>:
 8000428:	4770      	bx	lr

0800042a <__rt_heap_escrow$2region>:
 800042a:	4770      	bx	lr

0800042c <__rt_heap_expand$2region>:
 800042c:	4770      	bx	lr

0800042e <_printf_pre_padding>:
 800042e:	b570      	push	{r4, r5, r6, lr}
 8000430:	4604      	mov	r4, r0
 8000432:	6985      	ldr	r5, [r0, #24]
 8000434:	6800      	ldr	r0, [r0, #0]
 8000436:	06c1      	lsls	r1, r0, #27
 8000438:	d501      	bpl.n	800043e <_printf_pre_padding+0x10>
 800043a:	2630      	movs	r6, #48	@ 0x30
 800043c:	e000      	b.n	8000440 <_printf_pre_padding+0x12>
 800043e:	2620      	movs	r6, #32
 8000440:	07c0      	lsls	r0, r0, #31
 8000442:	d007      	beq.n	8000454 <_printf_pre_padding+0x26>
 8000444:	bd70      	pop	{r4, r5, r6, pc}
 8000446:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800044a:	4630      	mov	r0, r6
 800044c:	4790      	blx	r2
 800044e:	6a20      	ldr	r0, [r4, #32]
 8000450:	1c40      	adds	r0, r0, #1
 8000452:	6220      	str	r0, [r4, #32]
 8000454:	1e6d      	subs	r5, r5, #1
 8000456:	d5f6      	bpl.n	8000446 <_printf_pre_padding+0x18>
 8000458:	bd70      	pop	{r4, r5, r6, pc}

0800045a <_printf_post_padding>:
 800045a:	b570      	push	{r4, r5, r6, lr}
 800045c:	4604      	mov	r4, r0
 800045e:	6985      	ldr	r5, [r0, #24]
 8000460:	7800      	ldrb	r0, [r0, #0]
 8000462:	07c0      	lsls	r0, r0, #31
 8000464:	d107      	bne.n	8000476 <_printf_post_padding+0x1c>
 8000466:	bd70      	pop	{r4, r5, r6, pc}
 8000468:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800046c:	2020      	movs	r0, #32
 800046e:	4790      	blx	r2
 8000470:	6a20      	ldr	r0, [r4, #32]
 8000472:	1c40      	adds	r0, r0, #1
 8000474:	6220      	str	r0, [r4, #32]
 8000476:	1e6d      	subs	r5, r5, #1
 8000478:	d5f6      	bpl.n	8000468 <_printf_post_padding+0xe>
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <_printf_truncate_signed>:
 800047c:	6809      	ldr	r1, [r1, #0]
 800047e:	054a      	lsls	r2, r1, #21
 8000480:	d501      	bpl.n	8000486 <_printf_truncate_signed+0xa>
 8000482:	b240      	sxtb	r0, r0
 8000484:	4770      	bx	lr
 8000486:	05c9      	lsls	r1, r1, #23
 8000488:	d5fc      	bpl.n	8000484 <_printf_truncate_signed+0x8>
 800048a:	b200      	sxth	r0, r0
 800048c:	4770      	bx	lr

0800048e <_printf_truncate_unsigned>:
 800048e:	6809      	ldr	r1, [r1, #0]
 8000490:	054a      	lsls	r2, r1, #21
 8000492:	d501      	bpl.n	8000498 <_printf_truncate_unsigned+0xa>
 8000494:	b2c0      	uxtb	r0, r0
 8000496:	4770      	bx	lr
 8000498:	05c9      	lsls	r1, r1, #23
 800049a:	d5fc      	bpl.n	8000496 <_printf_truncate_unsigned+0x8>
 800049c:	b280      	uxth	r0, r0
 800049e:	4770      	bx	lr

080004a0 <_printf_str>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	460c      	mov	r4, r1
 80004a4:	4605      	mov	r5, r0
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	d005      	beq.n	80004b6 <_printf_str+0x16>
 80004aa:	7828      	ldrb	r0, [r5, #0]
 80004ac:	0680      	lsls	r0, r0, #26
 80004ae:	d500      	bpl.n	80004b2 <_printf_str+0x12>
 80004b0:	69ea      	ldr	r2, [r5, #28]
 80004b2:	2300      	movs	r3, #0
 80004b4:	e002      	b.n	80004bc <_printf_str+0x1c>
 80004b6:	2301      	movs	r3, #1
 80004b8:	e005      	b.n	80004c6 <_printf_str+0x26>
 80004ba:	1c5b      	adds	r3, r3, #1
 80004bc:	4293      	cmp	r3, r2
 80004be:	d202      	bcs.n	80004c6 <_printf_str+0x26>
 80004c0:	5ce0      	ldrb	r0, [r4, r3]
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d1f9      	bne.n	80004ba <_printf_str+0x1a>
 80004c6:	69a8      	ldr	r0, [r5, #24]
 80004c8:	18e6      	adds	r6, r4, r3
 80004ca:	1ac0      	subs	r0, r0, r3
 80004cc:	61a8      	str	r0, [r5, #24]
 80004ce:	6a28      	ldr	r0, [r5, #32]
 80004d0:	4418      	add	r0, r3
 80004d2:	6228      	str	r0, [r5, #32]
 80004d4:	4628      	mov	r0, r5
 80004d6:	f7ff ffaa 	bl	800042e <_printf_pre_padding>
 80004da:	e004      	b.n	80004e6 <_printf_str+0x46>
 80004dc:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 80004e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80004e4:	4790      	blx	r2
 80004e6:	42b4      	cmp	r4, r6
 80004e8:	d3f8      	bcc.n	80004dc <_printf_str+0x3c>
 80004ea:	4628      	mov	r0, r5
 80004ec:	f7ff ffb5 	bl	800045a <_printf_post_padding>
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080004f4 <_printf_int_dec>:
 80004f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004f8:	4606      	mov	r6, r0
 80004fa:	2400      	movs	r4, #0
 80004fc:	6810      	ldr	r0, [r2, #0]
 80004fe:	2975      	cmp	r1, #117	@ 0x75
 8000500:	4631      	mov	r1, r6
 8000502:	a516      	add	r5, pc, #88	@ (adr r5, 800055c <_printf_int_dec+0x68>)
 8000504:	d010      	beq.n	8000528 <_printf_int_dec+0x34>
 8000506:	f7ff ffb9 	bl	800047c <_printf_truncate_signed>
 800050a:	2800      	cmp	r0, #0
 800050c:	da02      	bge.n	8000514 <_printf_int_dec+0x20>
 800050e:	4240      	negs	r0, r0
 8000510:	a513      	add	r5, pc, #76	@ (adr r5, 8000560 <_printf_int_dec+0x6c>)
 8000512:	e007      	b.n	8000524 <_printf_int_dec+0x30>
 8000514:	6831      	ldr	r1, [r6, #0]
 8000516:	078a      	lsls	r2, r1, #30
 8000518:	d501      	bpl.n	800051e <_printf_int_dec+0x2a>
 800051a:	a512      	add	r5, pc, #72	@ (adr r5, 8000564 <_printf_int_dec+0x70>)
 800051c:	e002      	b.n	8000524 <_printf_int_dec+0x30>
 800051e:	0749      	lsls	r1, r1, #29
 8000520:	d504      	bpl.n	800052c <_printf_int_dec+0x38>
 8000522:	a511      	add	r5, pc, #68	@ (adr r5, 8000568 <_printf_int_dec+0x74>)
 8000524:	2401      	movs	r4, #1
 8000526:	e001      	b.n	800052c <_printf_int_dec+0x38>
 8000528:	f7ff ffb1 	bl	800048e <_printf_truncate_unsigned>
 800052c:	2100      	movs	r1, #0
 800052e:	220a      	movs	r2, #10
 8000530:	f106 0724 	add.w	r7, r6, #36	@ 0x24
 8000534:	e009      	b.n	800054a <_printf_int_dec+0x56>
 8000536:	fbb0 fcf2 	udiv	ip, r0, r2
 800053a:	fbb0 f3f2 	udiv	r3, r0, r2
 800053e:	fb02 001c 	mls	r0, r2, ip, r0
 8000542:	3030      	adds	r0, #48	@ 0x30
 8000544:	5478      	strb	r0, [r7, r1]
 8000546:	4618      	mov	r0, r3
 8000548:	1c49      	adds	r1, r1, #1
 800054a:	2800      	cmp	r0, #0
 800054c:	d1f3      	bne.n	8000536 <_printf_int_dec+0x42>
 800054e:	4623      	mov	r3, r4
 8000550:	462a      	mov	r2, r5
 8000552:	4630      	mov	r0, r6
 8000554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000558:	f000 ba93 	b.w	8000a82 <_printf_int_common>
 800055c:	00000000 	.word	0x00000000
 8000560:	0000002d 	.word	0x0000002d
 8000564:	0000002b 	.word	0x0000002b
 8000568:	00000020 	.word	0x00000020

0800056c <_printf_charcount>:
 800056c:	6811      	ldr	r1, [r2, #0]
 800056e:	6802      	ldr	r2, [r0, #0]
 8000570:	6a00      	ldr	r0, [r0, #32]
 8000572:	0553      	lsls	r3, r2, #21
 8000574:	d501      	bpl.n	800057a <_printf_charcount+0xe>
 8000576:	7008      	strb	r0, [r1, #0]
 8000578:	e00a      	b.n	8000590 <_printf_charcount+0x24>
 800057a:	05d3      	lsls	r3, r2, #23
 800057c:	d501      	bpl.n	8000582 <_printf_charcount+0x16>
 800057e:	8008      	strh	r0, [r1, #0]
 8000580:	e006      	b.n	8000590 <_printf_charcount+0x24>
 8000582:	0613      	lsls	r3, r2, #24
 8000584:	d503      	bpl.n	800058e <_printf_charcount+0x22>
 8000586:	17c2      	asrs	r2, r0, #31
 8000588:	e9c1 0200 	strd	r0, r2, [r1]
 800058c:	e000      	b.n	8000590 <_printf_charcount+0x24>
 800058e:	6008      	str	r0, [r1, #0]
 8000590:	2001      	movs	r0, #1
 8000592:	4770      	bx	lr

08000594 <_printf_input_char>:
 8000594:	6901      	ldr	r1, [r0, #16]
 8000596:	1c4a      	adds	r2, r1, #1
 8000598:	6102      	str	r2, [r0, #16]
 800059a:	7808      	ldrb	r0, [r1, #0]
 800059c:	4770      	bx	lr

0800059e <_printf_char_common>:
 800059e:	b500      	push	{lr}
 80005a0:	b08f      	sub	sp, #60	@ 0x3c
 80005a2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80005a6:	2100      	movs	r1, #0
 80005a8:	9105      	str	r1, [sp, #20]
 80005aa:	4905      	ldr	r1, [pc, #20]	@ (80005c0 <_printf_char_common+0x22>)
 80005ac:	4479      	add	r1, pc
 80005ae:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80005b2:	4611      	mov	r1, r2
 80005b4:	4668      	mov	r0, sp
 80005b6:	f000 f929 	bl	800080c <__printf>
 80005ba:	b00f      	add	sp, #60	@ 0x3c
 80005bc:	bd00      	pop	{pc}
 80005be:	0000      	.short	0x0000
 80005c0:	ffffffe5 	.word	0xffffffe5

080005c4 <_sputc>:
 80005c4:	680a      	ldr	r2, [r1, #0]
 80005c6:	f802 0b01 	strb.w	r0, [r2], #1
 80005ca:	600a      	str	r2, [r1, #0]
 80005cc:	4770      	bx	lr
	...

080005d0 <_printf_wctomb>:
 80005d0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80005d4:	4615      	mov	r5, r2
 80005d6:	468a      	mov	sl, r1
 80005d8:	4604      	mov	r4, r0
 80005da:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8000688 <_printf_wctomb+0xb8>
 80005de:	44f8      	add	r8, pc
 80005e0:	2700      	movs	r7, #0
 80005e2:	e9d8 1000 	ldrd	r1, r0, [r8]
 80005e6:	463e      	mov	r6, r7
 80005e8:	e9cd 1000 	strd	r1, r0, [sp]
 80005ec:	e010      	b.n	8000610 <_printf_wctomb+0x40>
 80005ee:	f83a 1016 	ldrh.w	r1, [sl, r6, lsl #1]
 80005f2:	466a      	mov	r2, sp
 80005f4:	a802      	add	r0, sp, #8
 80005f6:	f000 fe55 	bl	80012a4 <_c16rtomb>
 80005fa:	1c41      	adds	r1, r0, #1
 80005fc:	d007      	beq.n	800060e <_printf_wctomb+0x3e>
 80005fe:	7821      	ldrb	r1, [r4, #0]
 8000600:	0689      	lsls	r1, r1, #26
 8000602:	d503      	bpl.n	800060c <_printf_wctomb+0x3c>
 8000604:	69e2      	ldr	r2, [r4, #28]
 8000606:	1839      	adds	r1, r7, r0
 8000608:	4291      	cmp	r1, r2
 800060a:	d80d      	bhi.n	8000628 <_printf_wctomb+0x58>
 800060c:	4407      	add	r7, r0
 800060e:	1c76      	adds	r6, r6, #1
 8000610:	7820      	ldrb	r0, [r4, #0]
 8000612:	0680      	lsls	r0, r0, #26
 8000614:	d502      	bpl.n	800061c <_printf_wctomb+0x4c>
 8000616:	69e0      	ldr	r0, [r4, #28]
 8000618:	42b8      	cmp	r0, r7
 800061a:	dd05      	ble.n	8000628 <_printf_wctomb+0x58>
 800061c:	42ae      	cmp	r6, r5
 800061e:	dbe6      	blt.n	80005ee <_printf_wctomb+0x1e>
 8000620:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 8000624:	2800      	cmp	r0, #0
 8000626:	d1e2      	bne.n	80005ee <_printf_wctomb+0x1e>
 8000628:	69a0      	ldr	r0, [r4, #24]
 800062a:	1bc0      	subs	r0, r0, r7
 800062c:	61a0      	str	r0, [r4, #24]
 800062e:	4620      	mov	r0, r4
 8000630:	f7ff fefd 	bl	800042e <_printf_pre_padding>
 8000634:	e9d8 1000 	ldrd	r1, r0, [r8]
 8000638:	e9cd 1000 	strd	r1, r0, [sp]
 800063c:	2000      	movs	r0, #0
 800063e:	e017      	b.n	8000670 <_printf_wctomb+0xa0>
 8000640:	f83a 1018 	ldrh.w	r1, [sl, r8, lsl #1]
 8000644:	466a      	mov	r2, sp
 8000646:	a802      	add	r0, sp, #8
 8000648:	f000 fe2c 	bl	80012a4 <_c16rtomb>
 800064c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000650:	4681      	mov	r9, r0
 8000652:	d00b      	beq.n	800066c <_printf_wctomb+0x9c>
 8000654:	2500      	movs	r5, #0
 8000656:	f10d 0b08 	add.w	fp, sp, #8
 800065a:	e005      	b.n	8000668 <_printf_wctomb+0x98>
 800065c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000660:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8000664:	4790      	blx	r2
 8000666:	1c6d      	adds	r5, r5, #1
 8000668:	454d      	cmp	r5, r9
 800066a:	d3f7      	bcc.n	800065c <_printf_wctomb+0x8c>
 800066c:	f108 0001 	add.w	r0, r8, #1
 8000670:	42b0      	cmp	r0, r6
 8000672:	4680      	mov	r8, r0
 8000674:	dbe4      	blt.n	8000640 <_printf_wctomb+0x70>
 8000676:	6a20      	ldr	r0, [r4, #32]
 8000678:	4438      	add	r0, r7
 800067a:	6220      	str	r0, [r4, #32]
 800067c:	4620      	mov	r0, r4
 800067e:	f7ff feec 	bl	800045a <_printf_post_padding>
 8000682:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8000686:	0000      	.short	0x0000
 8000688:	00005a96 	.word	0x00005a96

0800068c <_printf_longlong_dec>:
 800068c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000690:	4680      	mov	r8, r0
 8000692:	1dd2      	adds	r2, r2, #7
 8000694:	f022 0207 	bic.w	r2, r2, #7
 8000698:	2500      	movs	r5, #0
 800069a:	e9d2 0200 	ldrd	r0, r2, [r2]
 800069e:	29f5      	cmp	r1, #245	@ 0xf5
 80006a0:	a615      	add	r6, pc, #84	@ (adr r6, 80006f8 <_printf_longlong_dec+0x6c>)
 80006a2:	d014      	beq.n	80006ce <_printf_longlong_dec+0x42>
 80006a4:	1e01      	subs	r1, r0, #0
 80006a6:	f172 0100 	sbcs.w	r1, r2, #0
 80006aa:	da06      	bge.n	80006ba <_printf_longlong_dec+0x2e>
 80006ac:	2300      	movs	r3, #0
 80006ae:	ebd0 0003 	rsbs	r0, r0, r3
 80006b2:	eb63 0202 	sbc.w	r2, r3, r2
 80006b6:	a611      	add	r6, pc, #68	@ (adr r6, 80006fc <_printf_longlong_dec+0x70>)
 80006b8:	e008      	b.n	80006cc <_printf_longlong_dec+0x40>
 80006ba:	f8d8 1000 	ldr.w	r1, [r8]
 80006be:	078b      	lsls	r3, r1, #30
 80006c0:	d501      	bpl.n	80006c6 <_printf_longlong_dec+0x3a>
 80006c2:	a60f      	add	r6, pc, #60	@ (adr r6, 8000700 <_printf_longlong_dec+0x74>)
 80006c4:	e002      	b.n	80006cc <_printf_longlong_dec+0x40>
 80006c6:	0749      	lsls	r1, r1, #29
 80006c8:	d501      	bpl.n	80006ce <_printf_longlong_dec+0x42>
 80006ca:	a60e      	add	r6, pc, #56	@ (adr r6, 8000704 <_printf_longlong_dec+0x78>)
 80006cc:	2501      	movs	r5, #1
 80006ce:	4611      	mov	r1, r2
 80006d0:	2400      	movs	r4, #0
 80006d2:	f108 0724 	add.w	r7, r8, #36	@ 0x24
 80006d6:	e004      	b.n	80006e2 <_printf_longlong_dec+0x56>
 80006d8:	f000 f98e 	bl	80009f8 <_ll_udiv10>
 80006dc:	3230      	adds	r2, #48	@ 0x30
 80006de:	553a      	strb	r2, [r7, r4]
 80006e0:	1c64      	adds	r4, r4, #1
 80006e2:	ea50 0201 	orrs.w	r2, r0, r1
 80006e6:	d1f7      	bne.n	80006d8 <_printf_longlong_dec+0x4c>
 80006e8:	462b      	mov	r3, r5
 80006ea:	4632      	mov	r2, r6
 80006ec:	4621      	mov	r1, r4
 80006ee:	4640      	mov	r0, r8
 80006f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80006f4:	f000 b9c5 	b.w	8000a82 <_printf_int_common>
 80006f8:	00000000 	.word	0x00000000
 80006fc:	0000002d 	.word	0x0000002d
 8000700:	0000002b 	.word	0x0000002b
 8000704:	00000020 	.word	0x00000020

08000708 <_printf_longlong_oct>:
 8000708:	b430      	push	{r4, r5}
 800070a:	2100      	movs	r1, #0
 800070c:	f100 0424 	add.w	r4, r0, #36	@ 0x24
 8000710:	e008      	b.n	8000724 <_printf_longlong_oct+0x1c>
 8000712:	f002 0507 	and.w	r5, r2, #7
 8000716:	08d2      	lsrs	r2, r2, #3
 8000718:	3530      	adds	r5, #48	@ 0x30
 800071a:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	5465      	strb	r5, [r4, r1]
 8000722:	1c49      	adds	r1, r1, #1
 8000724:	ea52 0503 	orrs.w	r5, r2, r3
 8000728:	d1f3      	bne.n	8000712 <_printf_longlong_oct+0xa>
 800072a:	6804      	ldr	r4, [r0, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	a210      	add	r2, pc, #64	@ (adr r2, 8000770 <_printf_ll_oct+0xc>)
 8000730:	0725      	lsls	r5, r4, #28
 8000732:	d508      	bpl.n	8000746 <_printf_longlong_oct+0x3e>
 8000734:	f004 0420 	and.w	r4, r4, #32
 8000738:	430c      	orrs	r4, r1
 800073a:	d004      	beq.n	8000746 <_printf_longlong_oct+0x3e>
 800073c:	69c4      	ldr	r4, [r0, #28]
 800073e:	2301      	movs	r3, #1
 8000740:	a20c      	add	r2, pc, #48	@ (adr r2, 8000774 <_printf_ll_oct+0x10>)
 8000742:	1e64      	subs	r4, r4, #1
 8000744:	61c4      	str	r4, [r0, #28]
 8000746:	bc30      	pop	{r4, r5}
 8000748:	f000 b99b 	b.w	8000a82 <_printf_int_common>

0800074c <_printf_int_oct>:
 800074c:	b510      	push	{r4, lr}
 800074e:	4604      	mov	r4, r0
 8000750:	4621      	mov	r1, r4
 8000752:	6810      	ldr	r0, [r2, #0]
 8000754:	f7ff fe9b 	bl	800048e <_printf_truncate_unsigned>
 8000758:	4602      	mov	r2, r0
 800075a:	4620      	mov	r0, r4
 800075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000760:	2300      	movs	r3, #0
 8000762:	e7d1      	b.n	8000708 <_printf_longlong_oct>

08000764 <_printf_ll_oct>:
 8000764:	1dd2      	adds	r2, r2, #7
 8000766:	f022 0107 	bic.w	r1, r2, #7
 800076a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800076e:	e7cb      	b.n	8000708 <_printf_longlong_oct>
 8000770:	00000000 	.word	0x00000000
 8000774:	00000030 	.word	0x00000030

08000778 <_printf_longlong_hex>:
 8000778:	b4f0      	push	{r4, r5, r6, r7}
 800077a:	460d      	mov	r5, r1
 800077c:	8801      	ldrh	r1, [r0, #0]
 800077e:	0509      	lsls	r1, r1, #20
 8000780:	d502      	bpl.n	8000788 <_printf_longlong_hex+0x10>
 8000782:	4c21      	ldr	r4, [pc, #132]	@ (8000808 <_printf_hex_ptr+0x12>)
 8000784:	447c      	add	r4, pc
 8000786:	e002      	b.n	800078e <_printf_longlong_hex+0x16>
 8000788:	4c1f      	ldr	r4, [pc, #124]	@ (8000808 <_printf_hex_ptr+0x12>)
 800078a:	447c      	add	r4, pc
 800078c:	340e      	adds	r4, #14
 800078e:	2100      	movs	r1, #0
 8000790:	f100 0624 	add.w	r6, r0, #36	@ 0x24
 8000794:	e008      	b.n	80007a8 <_printf_longlong_hex+0x30>
 8000796:	f002 070f 	and.w	r7, r2, #15
 800079a:	0912      	lsrs	r2, r2, #4
 800079c:	5de7      	ldrb	r7, [r4, r7]
 800079e:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
 80007a2:	091b      	lsrs	r3, r3, #4
 80007a4:	5477      	strb	r7, [r6, r1]
 80007a6:	1c49      	adds	r1, r1, #1
 80007a8:	ea52 0703 	orrs.w	r7, r2, r3
 80007ac:	d1f3      	bne.n	8000796 <_printf_longlong_hex+0x1e>
 80007ae:	7802      	ldrb	r2, [r0, #0]
 80007b0:	2300      	movs	r3, #0
 80007b2:	0712      	lsls	r2, r2, #28
 80007b4:	d504      	bpl.n	80007c0 <_printf_longlong_hex+0x48>
 80007b6:	2d70      	cmp	r5, #112	@ 0x70
 80007b8:	d006      	beq.n	80007c8 <_printf_longlong_hex+0x50>
 80007ba:	b109      	cbz	r1, 80007c0 <_printf_longlong_hex+0x48>
 80007bc:	2302      	movs	r3, #2
 80007be:	3411      	adds	r4, #17
 80007c0:	4622      	mov	r2, r4
 80007c2:	bcf0      	pop	{r4, r5, r6, r7}
 80007c4:	f000 b95d 	b.w	8000a82 <_printf_int_common>
 80007c8:	2301      	movs	r3, #1
 80007ca:	3410      	adds	r4, #16
 80007cc:	e7f8      	b.n	80007c0 <_printf_longlong_hex+0x48>

080007ce <_printf_int_hex>:
 80007ce:	b570      	push	{r4, r5, r6, lr}
 80007d0:	4604      	mov	r4, r0
 80007d2:	460d      	mov	r5, r1
 80007d4:	4621      	mov	r1, r4
 80007d6:	6810      	ldr	r0, [r2, #0]
 80007d8:	f7ff fe59 	bl	800048e <_printf_truncate_unsigned>
 80007dc:	4602      	mov	r2, r0
 80007de:	4629      	mov	r1, r5
 80007e0:	4620      	mov	r0, r4
 80007e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80007e6:	2300      	movs	r3, #0
 80007e8:	e7c6      	b.n	8000778 <_printf_longlong_hex>

080007ea <_printf_ll_hex>:
 80007ea:	1dd2      	adds	r2, r2, #7
 80007ec:	f022 0307 	bic.w	r3, r2, #7
 80007f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f4:	e7c0      	b.n	8000778 <_printf_longlong_hex>

080007f6 <_printf_hex_ptr>:
 80007f6:	6803      	ldr	r3, [r0, #0]
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	6003      	str	r3, [r0, #0]
 8000800:	2308      	movs	r3, #8
 8000802:	61c3      	str	r3, [r0, #28]
 8000804:	2300      	movs	r3, #0
 8000806:	e7b7      	b.n	8000778 <_printf_longlong_hex>
 8000808:	000058f8 	.word	0x000058f8

0800080c <__printf>:
 800080c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000810:	4689      	mov	r9, r1
 8000812:	4604      	mov	r4, r0
 8000814:	f04f 0a00 	mov.w	sl, #0
 8000818:	f8df b174 	ldr.w	fp, [pc, #372]	@ 8000990 <__printf+0x184>
 800081c:	44fb      	add	fp, pc
 800081e:	f8c0 a020 	str.w	sl, [r0, #32]
 8000822:	4620      	mov	r0, r4
 8000824:	68e1      	ldr	r1, [r4, #12]
 8000826:	4788      	blx	r1
 8000828:	2800      	cmp	r0, #0
 800082a:	d074      	beq.n	8000916 <__printf+0x10a>
 800082c:	2825      	cmp	r0, #37	@ 0x25
 800082e:	d006      	beq.n	800083e <__printf+0x32>
 8000830:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000834:	4790      	blx	r2
 8000836:	6a20      	ldr	r0, [r4, #32]
 8000838:	1c40      	adds	r0, r0, #1
 800083a:	6220      	str	r0, [r4, #32]
 800083c:	e7f1      	b.n	8000822 <__printf+0x16>
 800083e:	2600      	movs	r6, #0
 8000840:	465f      	mov	r7, fp
 8000842:	4620      	mov	r0, r4
 8000844:	68e1      	ldr	r1, [r4, #12]
 8000846:	4788      	blx	r1
 8000848:	2820      	cmp	r0, #32
 800084a:	4605      	mov	r5, r0
 800084c:	db07      	blt.n	800085e <__printf+0x52>
 800084e:	2d31      	cmp	r5, #49	@ 0x31
 8000850:	d205      	bcs.n	800085e <__printf+0x52>
 8000852:	1978      	adds	r0, r7, r5
 8000854:	f810 0c20 	ldrb.w	r0, [r0, #-32]
 8000858:	b108      	cbz	r0, 800085e <__printf+0x52>
 800085a:	4306      	orrs	r6, r0
 800085c:	e7f1      	b.n	8000842 <__printf+0x36>
 800085e:	07b0      	lsls	r0, r6, #30
 8000860:	d501      	bpl.n	8000866 <__printf+0x5a>
 8000862:	f026 0604 	bic.w	r6, r6, #4
 8000866:	f8c4 a01c 	str.w	sl, [r4, #28]
 800086a:	2700      	movs	r7, #0
 800086c:	f8c4 a018 	str.w	sl, [r4, #24]
 8000870:	2d2a      	cmp	r5, #42	@ 0x2a
 8000872:	d009      	beq.n	8000888 <__printf+0x7c>
 8000874:	4628      	mov	r0, r5
 8000876:	f005 fbc7 	bl	8006008 <_is_digit>
 800087a:	b338      	cbz	r0, 80008cc <__printf+0xc0>
 800087c:	eb04 0887 	add.w	r8, r4, r7, lsl #2
 8000880:	3d30      	subs	r5, #48	@ 0x30
 8000882:	f8c8 5018 	str.w	r5, [r8, #24]
 8000886:	e019      	b.n	80008bc <__printf+0xb0>
 8000888:	f859 1b04 	ldr.w	r1, [r9], #4
 800088c:	4620      	mov	r0, r4
 800088e:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8000892:	6191      	str	r1, [r2, #24]
 8000894:	68e1      	ldr	r1, [r4, #12]
 8000896:	4788      	blx	r1
 8000898:	2f01      	cmp	r7, #1
 800089a:	4605      	mov	r5, r0
 800089c:	d118      	bne.n	80008d0 <__printf+0xc4>
 800089e:	69e0      	ldr	r0, [r4, #28]
 80008a0:	2800      	cmp	r0, #0
 80008a2:	da20      	bge.n	80008e6 <__printf+0xda>
 80008a4:	f026 0620 	bic.w	r6, r6, #32
 80008a8:	e01d      	b.n	80008e6 <__printf+0xda>
 80008aa:	f8d8 0018 	ldr.w	r0, [r8, #24]
 80008ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80008b2:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80008b6:	3830      	subs	r0, #48	@ 0x30
 80008b8:	f8c8 0018 	str.w	r0, [r8, #24]
 80008bc:	4620      	mov	r0, r4
 80008be:	68e1      	ldr	r1, [r4, #12]
 80008c0:	4788      	blx	r1
 80008c2:	4605      	mov	r5, r0
 80008c4:	f005 fba0 	bl	8006008 <_is_digit>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d1ee      	bne.n	80008aa <__printf+0x9e>
 80008cc:	2f01      	cmp	r7, #1
 80008ce:	d00a      	beq.n	80008e6 <__printf+0xda>
 80008d0:	2d2e      	cmp	r5, #46	@ 0x2e
 80008d2:	d108      	bne.n	80008e6 <__printf+0xda>
 80008d4:	4620      	mov	r0, r4
 80008d6:	68e1      	ldr	r1, [r4, #12]
 80008d8:	4788      	blx	r1
 80008da:	1c7f      	adds	r7, r7, #1
 80008dc:	4605      	mov	r5, r0
 80008de:	2f02      	cmp	r7, #2
 80008e0:	f046 0620 	orr.w	r6, r6, #32
 80008e4:	dbc4      	blt.n	8000870 <__printf+0x64>
 80008e6:	69a0      	ldr	r0, [r4, #24]
 80008e8:	2800      	cmp	r0, #0
 80008ea:	da03      	bge.n	80008f4 <__printf+0xe8>
 80008ec:	4240      	negs	r0, r0
 80008ee:	f046 0601 	orr.w	r6, r6, #1
 80008f2:	61a0      	str	r0, [r4, #24]
 80008f4:	07f0      	lsls	r0, r6, #31
 80008f6:	d001      	beq.n	80008fc <__printf+0xf0>
 80008f8:	f026 0610 	bic.w	r6, r6, #16
 80008fc:	2d6c      	cmp	r5, #108	@ 0x6c
 80008fe:	d00b      	beq.n	8000918 <__printf+0x10c>
 8000900:	2d68      	cmp	r5, #104	@ 0x68
 8000902:	d009      	beq.n	8000918 <__printf+0x10c>
 8000904:	2d4c      	cmp	r5, #76	@ 0x4c
 8000906:	d039      	beq.n	800097c <__printf+0x170>
 8000908:	2d6a      	cmp	r5, #106	@ 0x6a
 800090a:	d035      	beq.n	8000978 <__printf+0x16c>
 800090c:	2d74      	cmp	r5, #116	@ 0x74
 800090e:	d035      	beq.n	800097c <__printf+0x170>
 8000910:	2d7a      	cmp	r5, #122	@ 0x7a
 8000912:	d033      	beq.n	800097c <__printf+0x170>
 8000914:	e016      	b.n	8000944 <__printf+0x138>
 8000916:	e038      	b.n	800098a <__printf+0x17e>
 8000918:	68e1      	ldr	r1, [r4, #12]
 800091a:	462f      	mov	r7, r5
 800091c:	4620      	mov	r0, r4
 800091e:	4788      	blx	r1
 8000920:	42b8      	cmp	r0, r7
 8000922:	4605      	mov	r5, r0
 8000924:	d109      	bne.n	800093a <__printf+0x12e>
 8000926:	2f6c      	cmp	r7, #108	@ 0x6c
 8000928:	d026      	beq.n	8000978 <__printf+0x16c>
 800092a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800092e:	68e1      	ldr	r1, [r4, #12]
 8000930:	4306      	orrs	r6, r0
 8000932:	4620      	mov	r0, r4
 8000934:	4788      	blx	r1
 8000936:	4605      	mov	r5, r0
 8000938:	e004      	b.n	8000944 <__printf+0x138>
 800093a:	2f6c      	cmp	r7, #108	@ 0x6c
 800093c:	d01a      	beq.n	8000974 <__printf+0x168>
 800093e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000942:	4306      	orrs	r6, r0
 8000944:	b30d      	cbz	r5, 800098a <__printf+0x17e>
 8000946:	f1a5 0041 	sub.w	r0, r5, #65	@ 0x41
 800094a:	2819      	cmp	r0, #25
 800094c:	d802      	bhi.n	8000954 <__printf+0x148>
 800094e:	3520      	adds	r5, #32
 8000950:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8000954:	464a      	mov	r2, r9
 8000956:	4629      	mov	r1, r5
 8000958:	4620      	mov	r0, r4
 800095a:	6026      	str	r6, [r4, #0]
 800095c:	464e      	mov	r6, r9
 800095e:	f7ff fc35 	bl	80001cc <_printf_n>
 8000962:	b180      	cbz	r0, 8000986 <__printf+0x17a>
 8000964:	2801      	cmp	r0, #1
 8000966:	d00b      	beq.n	8000980 <__printf+0x174>
 8000968:	1df6      	adds	r6, r6, #7
 800096a:	f026 0007 	bic.w	r0, r6, #7
 800096e:	f100 0908 	add.w	r9, r0, #8
 8000972:	e756      	b.n	8000822 <__printf+0x16>
 8000974:	2040      	movs	r0, #64	@ 0x40
 8000976:	e7e4      	b.n	8000942 <__printf+0x136>
 8000978:	2080      	movs	r0, #128	@ 0x80
 800097a:	e7d8      	b.n	800092e <__printf+0x122>
 800097c:	2000      	movs	r0, #0
 800097e:	e7d6      	b.n	800092e <__printf+0x122>
 8000980:	f106 0904 	add.w	r9, r6, #4
 8000984:	e74d      	b.n	8000822 <__printf+0x16>
 8000986:	4628      	mov	r0, r5
 8000988:	e752      	b.n	8000830 <__printf+0x24>
 800098a:	6a20      	ldr	r0, [r4, #32]
 800098c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8000990:	00005888 	.word	0x00005888

08000994 <__rt_memcpy_w>:
 8000994:	b510      	push	{r4, lr}
 8000996:	3a20      	subs	r2, #32
 8000998:	f0c0 800b 	bcc.w	80009b2 <__rt_memcpy_w+0x1e>
 800099c:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
 80009a0:	e8a0 5018 	stmia.w	r0!, {r3, r4, ip, lr}
 80009a4:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
 80009a8:	e8a0 5018 	stmia.w	r0!, {r3, r4, ip, lr}
 80009ac:	3a20      	subs	r2, #32
 80009ae:	f4bf aff5 	bcs.w	800099c <__rt_memcpy_w+0x8>
 80009b2:	ea5f 7c02 	movs.w	ip, r2, lsl #28
 80009b6:	bf24      	itt	cs
 80009b8:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 80009bc:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 80009c0:	bf44      	itt	mi
 80009c2:	c918      	ldmiami	r1!, {r3, r4}
 80009c4:	c018      	stmiami	r0!, {r3, r4}
 80009c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009ca:	ea5f 7c82 	movs.w	ip, r2, lsl #30
 80009ce:	bf24      	itt	cs
 80009d0:	f851 3b04 	ldrcs.w	r3, [r1], #4
 80009d4:	f840 3b04 	strcs.w	r3, [r0], #4
 80009d8:	bf08      	it	eq
 80009da:	4770      	bxeq	lr

080009dc <_memcpy_lastbytes_aligned>:
 80009dc:	07d2      	lsls	r2, r2, #31
 80009de:	bf28      	it	cs
 80009e0:	f831 3b02 	ldrhcs.w	r3, [r1], #2
 80009e4:	bf48      	it	mi
 80009e6:	f811 2b01 	ldrbmi.w	r2, [r1], #1
 80009ea:	bf28      	it	cs
 80009ec:	f820 3b02 	strhcs.w	r3, [r0], #2
 80009f0:	bf48      	it	mi
 80009f2:	f800 2b01 	strbmi.w	r2, [r0], #1
 80009f6:	4770      	bx	lr

080009f8 <_ll_udiv10>:
 80009f8:	b530      	push	{r4, r5, lr}
 80009fa:	f1b0 020a 	subs.w	r2, r0, #10
 80009fe:	f171 0300 	sbcs.w	r3, r1, #0
 8000a02:	ea4f 0e90 	mov.w	lr, r0, lsr #2
 8000a06:	ea4e 7e81 	orr.w	lr, lr, r1, lsl #30
 8000a0a:	ebb0 000e 	subs.w	r0, r0, lr
 8000a0e:	eb61 0191 	sbc.w	r1, r1, r1, lsr #2
 8000a12:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 8000a16:	ea4e 7e01 	orr.w	lr, lr, r1, lsl #28
 8000a1a:	eb10 000e 	adds.w	r0, r0, lr
 8000a1e:	eb41 1111 	adc.w	r1, r1, r1, lsr #4
 8000a22:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 8000a26:	ea4e 6e01 	orr.w	lr, lr, r1, lsl #24
 8000a2a:	eb10 000e 	adds.w	r0, r0, lr
 8000a2e:	eb41 2111 	adc.w	r1, r1, r1, lsr #8
 8000a32:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 8000a36:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000a3a:	eb10 000e 	adds.w	r0, r0, lr
 8000a3e:	eb41 4111 	adc.w	r1, r1, r1, lsr #16
 8000a42:	1840      	adds	r0, r0, r1
 8000a44:	f141 0100 	adc.w	r1, r1, #0
 8000a48:	ea4f 00d0 	mov.w	r0, r0, lsr #3
 8000a4c:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
 8000a50:	ea4f 01d1 	mov.w	r1, r1, lsr #3
 8000a54:	ea4f 0481 	mov.w	r4, r1, lsl #2
 8000a58:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
 8000a5c:	eb10 0580 	adds.w	r5, r0, r0, lsl #2
 8000a60:	eb44 0401 	adc.w	r4, r4, r1
 8000a64:	196d      	adds	r5, r5, r5
 8000a66:	eb44 0404 	adc.w	r4, r4, r4
 8000a6a:	1b52      	subs	r2, r2, r5
 8000a6c:	41a3      	sbcs	r3, r4
 8000a6e:	f04f 0300 	mov.w	r3, #0
 8000a72:	bf48      	it	mi
 8000a74:	320a      	addmi	r2, #10
 8000a76:	d500      	bpl.n	8000a7a <_ll_udiv10+0x82>
 8000a78:	bd30      	pop	{r4, r5, pc}
 8000a7a:	1c40      	adds	r0, r0, #1
 8000a7c:	f141 0100 	adc.w	r1, r1, #0
 8000a80:	bd30      	pop	{r4, r5, pc}

08000a82 <_printf_int_common>:
 8000a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a86:	460d      	mov	r5, r1
 8000a88:	4699      	mov	r9, r3
 8000a8a:	4692      	mov	sl, r2
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	f100 0824 	add.w	r8, r0, #36	@ 0x24
 8000a92:	6801      	ldr	r1, [r0, #0]
 8000a94:	0688      	lsls	r0, r1, #26
 8000a96:	d504      	bpl.n	8000aa2 <_printf_int_common+0x20>
 8000a98:	69e0      	ldr	r0, [r4, #28]
 8000a9a:	f021 0110 	bic.w	r1, r1, #16
 8000a9e:	6021      	str	r1, [r4, #0]
 8000aa0:	e000      	b.n	8000aa4 <_printf_int_common+0x22>
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	42a8      	cmp	r0, r5
 8000aa6:	dd01      	ble.n	8000aac <_printf_int_common+0x2a>
 8000aa8:	1b47      	subs	r7, r0, r5
 8000aaa:	e000      	b.n	8000aae <_printf_int_common+0x2c>
 8000aac:	2700      	movs	r7, #0
 8000aae:	69a1      	ldr	r1, [r4, #24]
 8000ab0:	197a      	adds	r2, r7, r5
 8000ab2:	eb02 0009 	add.w	r0, r2, r9
 8000ab6:	1a08      	subs	r0, r1, r0
 8000ab8:	61a0      	str	r0, [r4, #24]
 8000aba:	7820      	ldrb	r0, [r4, #0]
 8000abc:	06c0      	lsls	r0, r0, #27
 8000abe:	d402      	bmi.n	8000ac6 <_printf_int_common+0x44>
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f7ff fcb4 	bl	800042e <_printf_pre_padding>
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	e008      	b.n	8000adc <_printf_int_common+0x5a>
 8000aca:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000ace:	f81a 0006 	ldrb.w	r0, [sl, r6]
 8000ad2:	4790      	blx	r2
 8000ad4:	6a20      	ldr	r0, [r4, #32]
 8000ad6:	1c40      	adds	r0, r0, #1
 8000ad8:	1c76      	adds	r6, r6, #1
 8000ada:	6220      	str	r0, [r4, #32]
 8000adc:	454e      	cmp	r6, r9
 8000ade:	dbf4      	blt.n	8000aca <_printf_int_common+0x48>
 8000ae0:	7820      	ldrb	r0, [r4, #0]
 8000ae2:	06c0      	lsls	r0, r0, #27
 8000ae4:	d50a      	bpl.n	8000afc <_printf_int_common+0x7a>
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f7ff fca1 	bl	800042e <_printf_pre_padding>
 8000aec:	e006      	b.n	8000afc <_printf_int_common+0x7a>
 8000aee:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000af2:	2030      	movs	r0, #48	@ 0x30
 8000af4:	4790      	blx	r2
 8000af6:	6a20      	ldr	r0, [r4, #32]
 8000af8:	1c40      	adds	r0, r0, #1
 8000afa:	6220      	str	r0, [r4, #32]
 8000afc:	1e38      	subs	r0, r7, #0
 8000afe:	f1a7 0701 	sub.w	r7, r7, #1
 8000b02:	dcf4      	bgt.n	8000aee <_printf_int_common+0x6c>
 8000b04:	e007      	b.n	8000b16 <_printf_int_common+0x94>
 8000b06:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000b0a:	f818 0005 	ldrb.w	r0, [r8, r5]
 8000b0e:	4790      	blx	r2
 8000b10:	6a20      	ldr	r0, [r4, #32]
 8000b12:	1c40      	adds	r0, r0, #1
 8000b14:	6220      	str	r0, [r4, #32]
 8000b16:	1e28      	subs	r0, r5, #0
 8000b18:	f1a5 0501 	sub.w	r5, r5, #1
 8000b1c:	dcf3      	bgt.n	8000b06 <_printf_int_common+0x84>
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f7ff fc9b 	bl	800045a <_printf_post_padding>
 8000b24:	7820      	ldrb	r0, [r4, #0]
 8000b26:	0600      	lsls	r0, r0, #24
 8000b28:	d502      	bpl.n	8000b30 <_printf_int_common+0xae>
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b30:	2001      	movs	r0, #1
 8000b32:	e7fb      	b.n	8000b2c <_printf_int_common+0xaa>

08000b34 <_fp_digits>:
 8000b34:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b38:	460c      	mov	r4, r1
 8000b3a:	461e      	mov	r6, r3
 8000b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8000b40:	b08b      	sub	sp, #44	@ 0x2c
 8000b42:	e9d2 0100 	ldrd	r0, r1, [r2]
 8000b46:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 8000b4a:	900a      	str	r0, [sp, #40]	@ 0x28
 8000b4c:	468a      	mov	sl, r1
 8000b4e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8000b52:	b905      	cbnz	r5, 8000b56 <_fp_digits+0x22>
 8000b54:	463d      	mov	r5, r7
 8000b56:	2100      	movs	r1, #0
 8000b58:	4608      	mov	r0, r1
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	f1ba 0f00 	cmp.w	sl, #0
 8000b62:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
 8000b66:	da05      	bge.n	8000b74 <_fp_digits+0x40>
 8000b68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000b6c:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8000b70:	ea01 0050 	and.w	r0, r1, r0, lsr #1
 8000b74:	ea4f 5990 	mov.w	r9, r0, lsr #22
 8000b78:	f1b9 0f01 	cmp.w	r9, #1
 8000b7c:	dd00      	ble.n	8000b80 <_fp_digits+0x4c>
 8000b7e:	46b9      	mov	r9, r7
 8000b80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000b82:	ea50 004a 	orrs.w	r0, r0, sl, lsl #1
 8000b86:	d00e      	beq.n	8000ba6 <_fp_digits+0x72>
 8000b88:	f644 5010 	movw	r0, #19728	@ 0x4d10
 8000b8c:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
 8000b90:	4345      	muls	r5, r0
 8000b92:	142f      	asrs	r7, r5, #16
 8000b94:	f1b8 0f00 	cmp.w	r8, #0
 8000b98:	d01e      	beq.n	8000bd8 <_fp_digits+0xa4>
 8000b9a:	4275      	negs	r5, r6
 8000b9c:	1e29      	subs	r1, r5, #0
 8000b9e:	dd1e      	ble.n	8000bde <_fp_digits+0xaa>
 8000ba0:	f1c9 0200 	rsb	r2, r9, #0
 8000ba4:	e01c      	b.n	8000be0 <_fp_digits+0xac>
 8000ba6:	f1b8 0f01 	cmp.w	r8, #1
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	d001      	beq.n	8000bb4 <_fp_digits+0x80>
 8000bb0:	2130      	movs	r1, #48	@ 0x30
 8000bb2:	e003      	b.n	8000bbc <_fp_digits+0x88>
 8000bb4:	43f2      	mvns	r2, r6
 8000bb6:	e005      	b.n	8000bc4 <_fp_digits+0x90>
 8000bb8:	5421      	strb	r1, [r4, r0]
 8000bba:	1c40      	adds	r0, r0, #1
 8000bbc:	42b0      	cmp	r0, r6
 8000bbe:	dbfb      	blt.n	8000bb8 <_fp_digits+0x84>
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	5421      	strb	r1, [r4, r0]
 8000bc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8000bca:	f8c1 8008 	str.w	r8, [r1, #8]
 8000bce:	e9c1 2000 	strd	r2, r0, [r1]
 8000bd2:	b00f      	add	sp, #60	@ 0x3c
 8000bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bd8:	1bbd      	subs	r5, r7, r6
 8000bda:	1c6d      	adds	r5, r5, #1
 8000bdc:	e7de      	b.n	8000b9c <_fp_digits+0x68>
 8000bde:	464a      	mov	r2, r9
 8000be0:	da00      	bge.n	8000be4 <_fp_digits+0xb0>
 8000be2:	4269      	negs	r1, r5
 8000be4:	a806      	add	r0, sp, #24
 8000be6:	f000 fbf3 	bl	80013d0 <_btod_etento>
 8000bea:	ab06      	add	r3, sp, #24
 8000bec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bf0:	ab03      	add	r3, sp, #12
 8000bf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000bf6:	4650      	mov	r0, sl
 8000bf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8000bfa:	f004 fe29 	bl	8005850 <_btod_d2e>
 8000bfe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8000c02:	f5a0 5000 	sub.w	r0, r0, #8192	@ 0x2000
 8000c06:	381f      	subs	r0, #31
 8000c08:	9000      	str	r0, [sp, #0]
 8000c0a:	9803      	ldr	r0, [sp, #12]
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	dd0a      	ble.n	8000c26 <_fp_digits+0xf2>
 8000c10:	f242 011f 	movw	r1, #8223	@ 0x201f
 8000c14:	464a      	mov	r2, r9
 8000c16:	4408      	add	r0, r1
 8000c18:	2300      	movs	r3, #0
 8000c1a:	a903      	add	r1, sp, #12
 8000c1c:	9003      	str	r0, [sp, #12]
 8000c1e:	4668      	mov	r0, sp
 8000c20:	f005 f892 	bl	8005d48 <_btod_ediv>
 8000c24:	e009      	b.n	8000c3a <_fp_digits+0x106>
 8000c26:	f5a0 5000 	sub.w	r0, r0, #8192	@ 0x2000
 8000c2a:	464a      	mov	r2, r9
 8000c2c:	381f      	subs	r0, #31
 8000c2e:	2300      	movs	r3, #0
 8000c30:	a903      	add	r1, sp, #12
 8000c32:	9003      	str	r0, [sp, #12]
 8000c34:	4668      	mov	r0, sp
 8000c36:	f005 f89c 	bl	8005d72 <_btod_emul>
 8000c3a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8000c3e:	0400      	lsls	r0, r0, #16
 8000c40:	0c00      	lsrs	r0, r0, #16
 8000c42:	d003      	beq.n	8000c4c <_fp_digits+0x118>
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	0841      	lsrs	r1, r0, #1
 8000c4a:	e000      	b.n	8000c4e <_fp_digits+0x11a>
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	f1b8 0f00 	cmp.w	r8, #0
 8000c52:	d003      	beq.n	8000c5c <_fp_digits+0x128>
 8000c54:	2200      	movs	r2, #0
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	4615      	mov	r5, r2
 8000c5a:	e01e      	b.n	8000c9a <_fp_digits+0x166>
 8000c5c:	1e75      	subs	r5, r6, #1
 8000c5e:	d405      	bmi.n	8000c6c <_fp_digits+0x138>
 8000c60:	f7ff feca 	bl	80009f8 <_ll_udiv10>
 8000c64:	3230      	adds	r2, #48	@ 0x30
 8000c66:	5562      	strb	r2, [r4, r5]
 8000c68:	1e6d      	subs	r5, r5, #1
 8000c6a:	d5f9      	bpl.n	8000c60 <_fp_digits+0x12c>
 8000c6c:	46b3      	mov	fp, r6
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4308      	orrs	r0, r1
 8000c72:	d002      	beq.n	8000c7a <_fp_digits+0x146>
 8000c74:	2200      	movs	r2, #0
 8000c76:	1c7f      	adds	r7, r7, #1
 8000c78:	e004      	b.n	8000c84 <_fp_digits+0x150>
 8000c7a:	7820      	ldrb	r0, [r4, #0]
 8000c7c:	2830      	cmp	r0, #48	@ 0x30
 8000c7e:	d101      	bne.n	8000c84 <_fp_digits+0x150>
 8000c80:	2200      	movs	r2, #0
 8000c82:	1e7f      	subs	r7, r7, #1
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	9709      	str	r7, [sp, #36]	@ 0x24
 8000c88:	d084      	beq.n	8000b94 <_fp_digits+0x60>
 8000c8a:	e01d      	b.n	8000cc8 <_fp_digits+0x194>
 8000c8c:	2d11      	cmp	r5, #17
 8000c8e:	da07      	bge.n	8000ca0 <_fp_digits+0x16c>
 8000c90:	f7ff feb2 	bl	80009f8 <_ll_udiv10>
 8000c94:	3230      	adds	r2, #48	@ 0x30
 8000c96:	5562      	strb	r2, [r4, r5]
 8000c98:	1c6d      	adds	r5, r5, #1
 8000c9a:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9e:	d1f5      	bne.n	8000c8c <_fp_digits+0x158>
 8000ca0:	4308      	orrs	r0, r1
 8000ca2:	d002      	beq.n	8000caa <_fp_digits+0x176>
 8000ca4:	9800      	ldr	r0, [sp, #0]
 8000ca6:	b1c8      	cbz	r0, 8000cdc <_fp_digits+0x1a8>
 8000ca8:	e00e      	b.n	8000cc8 <_fp_digits+0x194>
 8000caa:	2100      	movs	r1, #0
 8000cac:	1e68      	subs	r0, r5, #1
 8000cae:	e005      	b.n	8000cbc <_fp_digits+0x188>
 8000cb0:	5c23      	ldrb	r3, [r4, r0]
 8000cb2:	5c62      	ldrb	r2, [r4, r1]
 8000cb4:	5463      	strb	r3, [r4, r1]
 8000cb6:	5422      	strb	r2, [r4, r0]
 8000cb8:	1e40      	subs	r0, r0, #1
 8000cba:	1c49      	adds	r1, r1, #1
 8000cbc:	4281      	cmp	r1, r0
 8000cbe:	dbf7      	blt.n	8000cb0 <_fp_digits+0x17c>
 8000cc0:	46ab      	mov	fp, r5
 8000cc2:	1ba8      	subs	r0, r5, r6
 8000cc4:	1e40      	subs	r0, r0, #1
 8000cc6:	9009      	str	r0, [sp, #36]	@ 0x24
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f804 000b 	strb.w	r0, [r4, fp]
 8000cce:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000cd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cd2:	f8c0 8008 	str.w	r8, [r0, #8]
 8000cd6:	e9c0 2b00 	strd	r2, fp, [r0]
 8000cda:	e77a      	b.n	8000bd2 <_fp_digits+0x9e>
 8000cdc:	2611      	movs	r6, #17
 8000cde:	f04f 0800 	mov.w	r8, #0
 8000ce2:	e757      	b.n	8000b94 <_fp_digits+0x60>

08000ce4 <_printf_fp_dec_real>:
 8000ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce8:	4688      	mov	r8, r1
 8000cea:	4604      	mov	r4, r0
 8000cec:	1dd2      	adds	r2, r2, #7
 8000cee:	f022 0107 	bic.w	r1, r2, #7
 8000cf2:	b091      	sub	sp, #68	@ 0x44
 8000cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8000cfc:	f005 f970 	bl	8005fe0 <__ARM_fpclassify>
 8000d00:	4602      	mov	r2, r0
 8000d02:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000d04:	0fc0      	lsrs	r0, r0, #31
 8000d06:	d001      	beq.n	8000d0c <_printf_fp_dec_real+0x28>
 8000d08:	202d      	movs	r0, #45	@ 0x2d
 8000d0a:	e007      	b.n	8000d1c <_printf_fp_dec_real+0x38>
 8000d0c:	6820      	ldr	r0, [r4, #0]
 8000d0e:	0781      	lsls	r1, r0, #30
 8000d10:	d501      	bpl.n	8000d16 <_printf_fp_dec_real+0x32>
 8000d12:	202b      	movs	r0, #43	@ 0x2b
 8000d14:	e002      	b.n	8000d1c <_printf_fp_dec_real+0x38>
 8000d16:	2120      	movs	r1, #32
 8000d18:	ea01 00c0 	and.w	r0, r1, r0, lsl #3
 8000d1c:	2a03      	cmp	r2, #3
 8000d1e:	9009      	str	r0, [sp, #36]	@ 0x24
 8000d20:	d001      	beq.n	8000d26 <_printf_fp_dec_real+0x42>
 8000d22:	2a07      	cmp	r2, #7
 8000d24:	db05      	blt.n	8000d32 <_printf_fp_dec_real+0x4e>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4641      	mov	r1, r8
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f000 fb10 	bl	8001350 <_printf_fp_infnan>
 8000d30:	e10b      	b.n	8000f4a <_printf_fp_dec_real+0x266>
 8000d32:	7820      	ldrb	r0, [r4, #0]
 8000d34:	0680      	lsls	r0, r0, #26
 8000d36:	d501      	bpl.n	8000d3c <_printf_fp_dec_real+0x58>
 8000d38:	69e0      	ldr	r0, [r4, #28]
 8000d3a:	e000      	b.n	8000d3e <_printf_fp_dec_real+0x5a>
 8000d3c:	2006      	movs	r0, #6
 8000d3e:	f1b8 0f65 	cmp.w	r8, #101	@ 0x65
 8000d42:	4681      	mov	r9, r0
 8000d44:	d006      	beq.n	8000d54 <_printf_fp_dec_real+0x70>
 8000d46:	f1b8 0f66 	cmp.w	r8, #102	@ 0x66
 8000d4a:	d018      	beq.n	8000d7e <_printf_fp_dec_real+0x9a>
 8000d4c:	f1b8 0f67 	cmp.w	r8, #103	@ 0x67
 8000d50:	d170      	bne.n	8000e34 <_printf_fp_dec_real+0x150>
 8000d52:	e031      	b.n	8000db8 <_printf_fp_dec_real+0xd4>
 8000d54:	2000      	movs	r0, #0
 8000d56:	f1b9 0f11 	cmp.w	r9, #17
 8000d5a:	9000      	str	r0, [sp, #0]
 8000d5c:	db01      	blt.n	8000d62 <_printf_fp_dec_real+0x7e>
 8000d5e:	2311      	movs	r3, #17
 8000d60:	e001      	b.n	8000d66 <_printf_fp_dec_real+0x82>
 8000d62:	f109 0301 	add.w	r3, r9, #1
 8000d66:	aa0a      	add	r2, sp, #40	@ 0x28
 8000d68:	a901      	add	r1, sp, #4
 8000d6a:	a80c      	add	r0, sp, #48	@ 0x30
 8000d6c:	f7ff fee2 	bl	8000b34 <_fp_digits>
 8000d70:	e9dd 700c 	ldrd	r7, r0, [sp, #48]	@ 0x30
 8000d74:	2600      	movs	r6, #0
 8000d76:	f109 0501 	add.w	r5, r9, #1
 8000d7a:	4683      	mov	fp, r0
 8000d7c:	e047      	b.n	8000e0e <_printf_fp_dec_real+0x12a>
 8000d7e:	2001      	movs	r0, #1
 8000d80:	464b      	mov	r3, r9
 8000d82:	9000      	str	r0, [sp, #0]
 8000d84:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8000d88:	aa0a      	add	r2, sp, #40	@ 0x28
 8000d8a:	a901      	add	r1, sp, #4
 8000d8c:	a80c      	add	r0, sp, #48	@ 0x30
 8000d8e:	f7ff fed1 	bl	8000b34 <_fp_digits>
 8000d92:	e9dd b00d 	ldrd	fp, r0, [sp, #52]	@ 0x34
 8000d96:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8000d98:	465d      	mov	r5, fp
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	b910      	cbnz	r0, 8000da4 <_printf_fp_dec_real+0xc0>
 8000d9e:	f109 0001 	add.w	r0, r9, #1
 8000da2:	180d      	adds	r5, r1, r0
 8000da4:	ebb9 0005 	subs.w	r0, r9, r5
 8000da8:	d403      	bmi.n	8000db2 <_printf_fp_dec_real+0xce>
 8000daa:	f1c0 36ff 	rsb	r6, r0, #4294967295
 8000dae:	f109 0501 	add.w	r5, r9, #1
 8000db2:	eba5 0009 	sub.w	r0, r5, r9
 8000db6:	e02b      	b.n	8000e10 <_printf_fp_dec_real+0x12c>
 8000db8:	f1b9 0f01 	cmp.w	r9, #1
 8000dbc:	da01      	bge.n	8000dc2 <_printf_fp_dec_real+0xde>
 8000dbe:	f04f 0901 	mov.w	r9, #1
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f1b9 0f11 	cmp.w	r9, #17
 8000dc8:	9000      	str	r0, [sp, #0]
 8000dca:	4648      	mov	r0, r9
 8000dcc:	dd01      	ble.n	8000dd2 <_printf_fp_dec_real+0xee>
 8000dce:	2311      	movs	r3, #17
 8000dd0:	e000      	b.n	8000dd4 <_printf_fp_dec_real+0xf0>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	aa0a      	add	r2, sp, #40	@ 0x28
 8000dd6:	a901      	add	r1, sp, #4
 8000dd8:	a80c      	add	r0, sp, #48	@ 0x30
 8000dda:	f7ff feab 	bl	8000b34 <_fp_digits>
 8000dde:	e9dd 700c 	ldrd	r7, r0, [sp, #48]	@ 0x30
 8000de2:	464d      	mov	r5, r9
 8000de4:	2600      	movs	r6, #0
 8000de6:	4683      	mov	fp, r0
 8000de8:	7820      	ldrb	r0, [r4, #0]
 8000dea:	0700      	lsls	r0, r0, #28
 8000dec:	d40a      	bmi.n	8000e04 <_printf_fp_dec_real+0x120>
 8000dee:	45ab      	cmp	fp, r5
 8000df0:	da00      	bge.n	8000df4 <_printf_fp_dec_real+0x110>
 8000df2:	465d      	mov	r5, fp
 8000df4:	a801      	add	r0, sp, #4
 8000df6:	2d01      	cmp	r5, #1
 8000df8:	dd04      	ble.n	8000e04 <_printf_fp_dec_real+0x120>
 8000dfa:	1941      	adds	r1, r0, r5
 8000dfc:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8000e00:	2930      	cmp	r1, #48	@ 0x30
 8000e02:	d007      	beq.n	8000e14 <_printf_fp_dec_real+0x130>
 8000e04:	454f      	cmp	r7, r9
 8000e06:	da02      	bge.n	8000e0e <_printf_fp_dec_real+0x12a>
 8000e08:	f117 0f04 	cmn.w	r7, #4
 8000e0c:	da04      	bge.n	8000e18 <_printf_fp_dec_real+0x134>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	4682      	mov	sl, r0
 8000e12:	e00f      	b.n	8000e34 <_printf_fp_dec_real+0x150>
 8000e14:	1e6d      	subs	r5, r5, #1
 8000e16:	e7ee      	b.n	8000df6 <_printf_fp_dec_real+0x112>
 8000e18:	2f00      	cmp	r7, #0
 8000e1a:	dc02      	bgt.n	8000e22 <_printf_fp_dec_real+0x13e>
 8000e1c:	1bed      	subs	r5, r5, r7
 8000e1e:	443e      	add	r6, r7
 8000e20:	e003      	b.n	8000e2a <_printf_fp_dec_real+0x146>
 8000e22:	1c78      	adds	r0, r7, #1
 8000e24:	42a8      	cmp	r0, r5
 8000e26:	dd00      	ble.n	8000e2a <_printf_fp_dec_real+0x146>
 8000e28:	1c7d      	adds	r5, r7, #1
 8000e2a:	1bb8      	subs	r0, r7, r6
 8000e2c:	f100 0a01 	add.w	sl, r0, #1
 8000e30:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8000e34:	7820      	ldrb	r0, [r4, #0]
 8000e36:	0700      	lsls	r0, r0, #28
 8000e38:	d403      	bmi.n	8000e42 <_printf_fp_dec_real+0x15e>
 8000e3a:	45aa      	cmp	sl, r5
 8000e3c:	db01      	blt.n	8000e42 <_printf_fp_dec_real+0x15e>
 8000e3e:	f04f 3aff 	mov.w	sl, #4294967295
 8000e42:	2100      	movs	r1, #0
 8000e44:	f1b7 4f00 	cmp.w	r7, #2147483648	@ 0x80000000
 8000e48:	f10d 0843 	add.w	r8, sp, #67	@ 0x43
 8000e4c:	f88d 1043 	strb.w	r1, [sp, #67]	@ 0x43
 8000e50:	d024      	beq.n	8000e9c <_printf_fp_dec_real+0x1b8>
 8000e52:	2002      	movs	r0, #2
 8000e54:	232b      	movs	r3, #43	@ 0x2b
 8000e56:	2f00      	cmp	r7, #0
 8000e58:	da01      	bge.n	8000e5e <_printf_fp_dec_real+0x17a>
 8000e5a:	427f      	negs	r7, r7
 8000e5c:	232d      	movs	r3, #45	@ 0x2d
 8000e5e:	210a      	movs	r1, #10
 8000e60:	1e02      	subs	r2, r0, #0
 8000e62:	f1a0 0001 	sub.w	r0, r0, #1
 8000e66:	dc00      	bgt.n	8000e6a <_printf_fp_dec_real+0x186>
 8000e68:	b15f      	cbz	r7, 8000e82 <_printf_fp_dec_real+0x19e>
 8000e6a:	fb97 fcf1 	sdiv	ip, r7, r1
 8000e6e:	fb97 f2f1 	sdiv	r2, r7, r1
 8000e72:	fb01 7c1c 	mls	ip, r1, ip, r7
 8000e76:	4617      	mov	r7, r2
 8000e78:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8000e7c:	f808 cd01 	strb.w	ip, [r8, #-1]!
 8000e80:	e7ee      	b.n	8000e60 <_printf_fp_dec_real+0x17c>
 8000e82:	f1a8 0001 	sub.w	r0, r8, #1
 8000e86:	7003      	strb	r3, [r0, #0]
 8000e88:	8821      	ldrh	r1, [r4, #0]
 8000e8a:	0509      	lsls	r1, r1, #20
 8000e8c:	d501      	bpl.n	8000e92 <_printf_fp_dec_real+0x1ae>
 8000e8e:	2145      	movs	r1, #69	@ 0x45
 8000e90:	e000      	b.n	8000e94 <_printf_fp_dec_real+0x1b0>
 8000e92:	2165      	movs	r1, #101	@ 0x65
 8000e94:	f1a0 0801 	sub.w	r8, r0, #1
 8000e98:	f800 1c01 	strb.w	r1, [r0, #-1]
 8000e9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e9e:	a90f      	add	r1, sp, #60	@ 0x3c
 8000ea0:	eba1 0708 	sub.w	r7, r1, r8
 8000ea4:	1dff      	adds	r7, r7, #7
 8000ea6:	b100      	cbz	r0, 8000eaa <_printf_fp_dec_real+0x1c6>
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	1941      	adds	r1, r0, r5
 8000eac:	eb01 70ea 	add.w	r0, r1, sl, asr #31
 8000eb0:	69a1      	ldr	r1, [r4, #24]
 8000eb2:	4438      	add	r0, r7
 8000eb4:	1a08      	subs	r0, r1, r0
 8000eb6:	1e40      	subs	r0, r0, #1
 8000eb8:	61a0      	str	r0, [r4, #24]
 8000eba:	7820      	ldrb	r0, [r4, #0]
 8000ebc:	06c0      	lsls	r0, r0, #27
 8000ebe:	d402      	bmi.n	8000ec6 <_printf_fp_dec_real+0x1e2>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f7ff fab4 	bl	800042e <_printf_pre_padding>
 8000ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ec8:	b128      	cbz	r0, 8000ed6 <_printf_fp_dec_real+0x1f2>
 8000eca:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000ece:	4790      	blx	r2
 8000ed0:	6a20      	ldr	r0, [r4, #32]
 8000ed2:	1c40      	adds	r0, r0, #1
 8000ed4:	6220      	str	r0, [r4, #32]
 8000ed6:	7820      	ldrb	r0, [r4, #0]
 8000ed8:	06c0      	lsls	r0, r0, #27
 8000eda:	d522      	bpl.n	8000f22 <_printf_fp_dec_real+0x23e>
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff faa6 	bl	800042e <_printf_pre_padding>
 8000ee2:	e01e      	b.n	8000f22 <_printf_fp_dec_real+0x23e>
 8000ee4:	2e00      	cmp	r6, #0
 8000ee6:	db04      	blt.n	8000ef2 <_printf_fp_dec_real+0x20e>
 8000ee8:	45b3      	cmp	fp, r6
 8000eea:	dd02      	ble.n	8000ef2 <_printf_fp_dec_real+0x20e>
 8000eec:	a801      	add	r0, sp, #4
 8000eee:	5d80      	ldrb	r0, [r0, r6]
 8000ef0:	e000      	b.n	8000ef4 <_printf_fp_dec_real+0x210>
 8000ef2:	2030      	movs	r0, #48	@ 0x30
 8000ef4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000ef8:	4790      	blx	r2
 8000efa:	6a20      	ldr	r0, [r4, #32]
 8000efc:	1c40      	adds	r0, r0, #1
 8000efe:	6220      	str	r0, [r4, #32]
 8000f00:	1c76      	adds	r6, r6, #1
 8000f02:	f1aa 0001 	sub.w	r0, sl, #1
 8000f06:	ea5f 0a00 	movs.w	sl, r0
 8000f0a:	d10a      	bne.n	8000f22 <_printf_fp_dec_real+0x23e>
 8000f0c:	f000 fa1c 	bl	8001348 <__rt_locale>
 8000f10:	68c0      	ldr	r0, [r0, #12]
 8000f12:	6801      	ldr	r1, [r0, #0]
 8000f14:	5c40      	ldrb	r0, [r0, r1]
 8000f16:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000f1a:	4790      	blx	r2
 8000f1c:	6a20      	ldr	r0, [r4, #32]
 8000f1e:	1c40      	adds	r0, r0, #1
 8000f20:	6220      	str	r0, [r4, #32]
 8000f22:	1e28      	subs	r0, r5, #0
 8000f24:	f1a5 0501 	sub.w	r5, r5, #1
 8000f28:	dcdc      	bgt.n	8000ee4 <_printf_fp_dec_real+0x200>
 8000f2a:	e007      	b.n	8000f3c <_printf_fp_dec_real+0x258>
 8000f2c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000f30:	f818 0b01 	ldrb.w	r0, [r8], #1
 8000f34:	4790      	blx	r2
 8000f36:	6a20      	ldr	r0, [r4, #32]
 8000f38:	1c40      	adds	r0, r0, #1
 8000f3a:	6220      	str	r0, [r4, #32]
 8000f3c:	1e38      	subs	r0, r7, #0
 8000f3e:	f1a7 0701 	sub.w	r7, r7, #1
 8000f42:	dcf3      	bgt.n	8000f2c <_printf_fp_dec_real+0x248>
 8000f44:	4620      	mov	r0, r4
 8000f46:	f7ff fa88 	bl	800045a <_printf_post_padding>
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	b011      	add	sp, #68	@ 0x44
 8000f4e:	e641      	b.n	8000bd4 <_fp_digits+0xa0>

08000f50 <_printf_fp_hex_real>:
 8000f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	1dd2      	adds	r2, r2, #7
 8000f5a:	f022 0007 	bic.w	r0, r2, #7
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	e9d0 9700 	ldrd	r9, r7, [r0]
 8000f64:	4648      	mov	r0, r9
 8000f66:	4639      	mov	r1, r7
 8000f68:	f005 f83a 	bl	8005fe0 <__ARM_fpclassify>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	0ff8      	lsrs	r0, r7, #31
 8000f70:	d001      	beq.n	8000f76 <_printf_fp_hex_real+0x26>
 8000f72:	232d      	movs	r3, #45	@ 0x2d
 8000f74:	e007      	b.n	8000f86 <_printf_fp_hex_real+0x36>
 8000f76:	6820      	ldr	r0, [r4, #0]
 8000f78:	0781      	lsls	r1, r0, #30
 8000f7a:	d501      	bpl.n	8000f80 <_printf_fp_hex_real+0x30>
 8000f7c:	232b      	movs	r3, #43	@ 0x2b
 8000f7e:	e002      	b.n	8000f86 <_printf_fp_hex_real+0x36>
 8000f80:	2120      	movs	r1, #32
 8000f82:	ea01 03c0 	and.w	r3, r1, r0, lsl #3
 8000f86:	f88d 3020 	strb.w	r3, [sp, #32]
 8000f8a:	b10b      	cbz	r3, 8000f90 <_printf_fp_hex_real+0x40>
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	e000      	b.n	8000f92 <_printf_fp_hex_real+0x42>
 8000f90:	2000      	movs	r0, #0
 8000f92:	2a03      	cmp	r2, #3
 8000f94:	4682      	mov	sl, r0
 8000f96:	d001      	beq.n	8000f9c <_printf_fp_hex_real+0x4c>
 8000f98:	2a07      	cmp	r2, #7
 8000f9a:	db04      	blt.n	8000fa6 <_printf_fp_hex_real+0x56>
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f000 f9d6 	bl	8001350 <_printf_fp_infnan>
 8000fa4:	e13f      	b.n	8001226 <_printf_fp_hex_real+0x2d6>
 8000fa6:	7820      	ldrb	r0, [r4, #0]
 8000fa8:	0680      	lsls	r0, r0, #26
 8000faa:	d401      	bmi.n	8000fb0 <_printf_fp_hex_real+0x60>
 8000fac:	250d      	movs	r5, #13
 8000fae:	e000      	b.n	8000fb2 <_printf_fp_hex_real+0x62>
 8000fb0:	69e5      	ldr	r5, [r4, #28]
 8000fb2:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8000fb6:	2d0d      	cmp	r5, #13
 8000fb8:	da49      	bge.n	800104e <_printf_fp_hex_real+0xfe>
 8000fba:	2100      	movs	r1, #0
 8000fbc:	ea4f 5b17 	mov.w	fp, r7, lsr #20
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	2f00      	cmp	r7, #0
 8000fc8:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
 8000fcc:	da07      	bge.n	8000fde <_printf_fp_hex_real+0x8e>
 8000fce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fd2:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8000fd6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8000fda:	ea01 0060 	and.w	r0, r1, r0, asr #1
 8000fde:	1581      	asrs	r1, r0, #22
 8000fe0:	2901      	cmp	r1, #1
 8000fe2:	dd01      	ble.n	8000fe8 <_printf_fp_hex_real+0x98>
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	2200      	movs	r2, #0
 8000fea:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8000fee:	f1bc 0f18 	cmp.w	ip, #24
 8000ff2:	d306      	bcc.n	8001002 <_printf_fp_hex_real+0xb2>
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	f1ac 0018 	sub.w	r0, ip, #24
 8000ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ffe:	40c2      	lsrs	r2, r0
 8001000:	e003      	b.n	800100a <_printf_fp_hex_real+0xba>
 8001002:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001006:	fa23 f30c 	lsr.w	r3, r3, ip
 800100a:	f10c 0c0c 	add.w	ip, ip, #12
 800100e:	f1bc 0f20 	cmp.w	ip, #32
 8001012:	d304      	bcc.n	800101e <_printf_fp_hex_real+0xce>
 8001014:	f1ac 0c20 	sub.w	ip, ip, #32
 8001018:	fa09 f00c 	lsl.w	r0, r9, ip
 800101c:	e001      	b.n	8001022 <_printf_fp_hex_real+0xd2>
 800101e:	fa07 f00c 	lsl.w	r0, r7, ip
 8001022:	2900      	cmp	r1, #0
 8001024:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8001028:	dd01      	ble.n	800102e <_printf_fp_hex_real+0xde>
 800102a:	b918      	cbnz	r0, 8001034 <_printf_fp_hex_real+0xe4>
 800102c:	e00f      	b.n	800104e <_printf_fp_hex_real+0xfe>
 800102e:	d10e      	bne.n	800104e <_printf_fp_hex_real+0xfe>
 8001030:	4540      	cmp	r0, r8
 8001032:	d30c      	bcc.n	800104e <_printf_fp_hex_real+0xfe>
 8001034:	eb19 0902 	adds.w	r9, r9, r2
 8001038:	415f      	adcs	r7, r3
 800103a:	b921      	cbnz	r1, 8001046 <_printf_fp_hex_real+0xf6>
 800103c:	4540      	cmp	r0, r8
 800103e:	d102      	bne.n	8001046 <_printf_fp_hex_real+0xf6>
 8001040:	439f      	bics	r7, r3
 8001042:	ea29 0902 	bic.w	r9, r9, r2
 8001046:	ebbb 5f17 	cmp.w	fp, r7, lsr #20
 800104a:	d000      	beq.n	800104e <_printf_fp_hex_real+0xfe>
 800104c:	1c76      	adds	r6, r6, #1
 800104e:	8820      	ldrh	r0, [r4, #0]
 8001050:	0500      	lsls	r0, r0, #20
 8001052:	d502      	bpl.n	800105a <_printf_fp_hex_real+0x10a>
 8001054:	487b      	ldr	r0, [pc, #492]	@ (8001244 <_printf_fp_hex_real+0x2f4>)
 8001056:	4478      	add	r0, pc
 8001058:	e002      	b.n	8001060 <_printf_fp_hex_real+0x110>
 800105a:	487a      	ldr	r0, [pc, #488]	@ (8001244 <_printf_fp_hex_real+0x2f4>)
 800105c:	4478      	add	r0, pc
 800105e:	3819      	subs	r0, #25
 8001060:	aa08      	add	r2, sp, #32
 8001062:	2330      	movs	r3, #48	@ 0x30
 8001064:	f802 300a 	strb.w	r3, [r2, sl]
 8001068:	7c03      	ldrb	r3, [r0, #16]
 800106a:	f10a 0101 	add.w	r1, sl, #1
 800106e:	2e00      	cmp	r6, #0
 8001070:	f10a 0a02 	add.w	sl, sl, #2
 8001074:	5453      	strb	r3, [r2, r1]
 8001076:	466a      	mov	r2, sp
 8001078:	dc02      	bgt.n	8001080 <_printf_fp_hex_real+0x130>
 800107a:	f04f 0130 	mov.w	r1, #48	@ 0x30
 800107e:	e001      	b.n	8001084 <_printf_fp_hex_real+0x134>
 8001080:	f04f 0131 	mov.w	r1, #49	@ 0x31
 8001084:	f04f 0801 	mov.w	r8, #1
 8001088:	f88d 1000 	strb.w	r1, [sp]
 800108c:	d002      	beq.n	8001094 <_printf_fp_hex_real+0x144>
 800108e:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8001092:	e003      	b.n	800109c <_printf_fp_hex_real+0x14c>
 8001094:	ea59 0147 	orrs.w	r1, r9, r7, lsl #1
 8001098:	d000      	beq.n	800109c <_printf_fp_hex_real+0x14c>
 800109a:	4e6b      	ldr	r6, [pc, #428]	@ (8001248 <_printf_fp_hex_real+0x2f8>)
 800109c:	2d00      	cmp	r5, #0
 800109e:	dc02      	bgt.n	80010a6 <_printf_fp_hex_real+0x156>
 80010a0:	7821      	ldrb	r1, [r4, #0]
 80010a2:	0709      	lsls	r1, r1, #28
 80010a4:	d504      	bpl.n	80010b0 <_printf_fp_hex_real+0x160>
 80010a6:	f04f 0802 	mov.w	r8, #2
 80010aa:	212e      	movs	r1, #46	@ 0x2e
 80010ac:	f88d 1001 	strb.w	r1, [sp, #1]
 80010b0:	46c4      	mov	ip, r8
 80010b2:	2100      	movs	r1, #0
 80010b4:	e00b      	b.n	80010ce <_printf_fp_hex_real+0x17e>
 80010b6:	f3c7 4303 	ubfx	r3, r7, #16, #4
 80010ba:	013f      	lsls	r7, r7, #4
 80010bc:	5cc3      	ldrb	r3, [r0, r3]
 80010be:	1c49      	adds	r1, r1, #1
 80010c0:	1e6d      	subs	r5, r5, #1
 80010c2:	f802 3008 	strb.w	r3, [r2, r8]
 80010c6:	2905      	cmp	r1, #5
 80010c8:	f108 0801 	add.w	r8, r8, #1
 80010cc:	da01      	bge.n	80010d2 <_printf_fp_hex_real+0x182>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	dcf1      	bgt.n	80010b6 <_printf_fp_hex_real+0x166>
 80010d2:	2100      	movs	r1, #0
 80010d4:	e00c      	b.n	80010f0 <_printf_fp_hex_real+0x1a0>
 80010d6:	eb00 7319 	add.w	r3, r0, r9, lsr #28
 80010da:	1c49      	adds	r1, r1, #1
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	1e6d      	subs	r5, r5, #1
 80010e0:	2908      	cmp	r1, #8
 80010e2:	f802 3008 	strb.w	r3, [r2, r8]
 80010e6:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80010ea:	f108 0801 	add.w	r8, r8, #1
 80010ee:	da01      	bge.n	80010f4 <_printf_fp_hex_real+0x1a4>
 80010f0:	2d00      	cmp	r5, #0
 80010f2:	dcf0      	bgt.n	80010d6 <_printf_fp_hex_real+0x186>
 80010f4:	6821      	ldr	r1, [r4, #0]
 80010f6:	068b      	lsls	r3, r1, #26
 80010f8:	d502      	bpl.n	8001100 <_printf_fp_hex_real+0x1b0>
 80010fa:	e016      	b.n	800112a <_printf_fp_hex_real+0x1da>
 80010fc:	f1a8 0801 	sub.w	r8, r8, #1
 8001100:	45e0      	cmp	r8, ip
 8001102:	dd05      	ble.n	8001110 <_printf_fp_hex_real+0x1c0>
 8001104:	eb02 0308 	add.w	r3, r2, r8
 8001108:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800110c:	2b30      	cmp	r3, #48	@ 0x30
 800110e:	d0f5      	beq.n	80010fc <_printf_fp_hex_real+0x1ac>
 8001110:	f1b8 0f00 	cmp.w	r8, #0
 8001114:	dd09      	ble.n	800112a <_printf_fp_hex_real+0x1da>
 8001116:	eb02 0308 	add.w	r3, r2, r8
 800111a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800111e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001120:	d103      	bne.n	800112a <_printf_fp_hex_real+0x1da>
 8001122:	0709      	lsls	r1, r1, #28
 8001124:	d401      	bmi.n	800112a <_printf_fp_hex_real+0x1da>
 8001126:	f1a8 0801 	sub.w	r8, r8, #1
 800112a:	2d00      	cmp	r5, #0
 800112c:	dd05      	ble.n	800113a <_printf_fp_hex_real+0x1ea>
 800112e:	213e      	movs	r1, #62	@ 0x3e
 8001130:	f802 1008 	strb.w	r1, [r2, r8]
 8001134:	1e6d      	subs	r5, r5, #1
 8001136:	f108 0801 	add.w	r8, r8, #1
 800113a:	7c40      	ldrb	r0, [r0, #17]
 800113c:	2e00      	cmp	r6, #0
 800113e:	f802 0008 	strb.w	r0, [r2, r8]
 8001142:	f108 0801 	add.w	r8, r8, #1
 8001146:	da04      	bge.n	8001152 <_printf_fp_hex_real+0x202>
 8001148:	202d      	movs	r0, #45	@ 0x2d
 800114a:	4276      	negs	r6, r6
 800114c:	f802 0008 	strb.w	r0, [r2, r8]
 8001150:	e002      	b.n	8001158 <_printf_fp_hex_real+0x208>
 8001152:	202b      	movs	r0, #43	@ 0x2b
 8001154:	f802 0008 	strb.w	r0, [r2, r8]
 8001158:	210a      	movs	r1, #10
 800115a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800115e:	4286      	cmp	r6, r0
 8001160:	f108 0801 	add.w	r8, r8, #1
 8001164:	db0b      	blt.n	800117e <_printf_fp_hex_real+0x22e>
 8001166:	fb96 f3f0 	sdiv	r3, r6, r0
 800116a:	3330      	adds	r3, #48	@ 0x30
 800116c:	f802 3008 	strb.w	r3, [r2, r8]
 8001170:	fb96 f3f0 	sdiv	r3, r6, r0
 8001174:	f108 0801 	add.w	r8, r8, #1
 8001178:	fb00 6613 	mls	r6, r0, r3, r6
 800117c:	e001      	b.n	8001182 <_printf_fp_hex_real+0x232>
 800117e:	2e64      	cmp	r6, #100	@ 0x64
 8001180:	db0c      	blt.n	800119c <_printf_fp_hex_real+0x24c>
 8001182:	2064      	movs	r0, #100	@ 0x64
 8001184:	fb96 f3f0 	sdiv	r3, r6, r0
 8001188:	3330      	adds	r3, #48	@ 0x30
 800118a:	f802 3008 	strb.w	r3, [r2, r8]
 800118e:	fb96 f3f0 	sdiv	r3, r6, r0
 8001192:	f108 0801 	add.w	r8, r8, #1
 8001196:	fb00 6613 	mls	r6, r0, r3, r6
 800119a:	e001      	b.n	80011a0 <_printf_fp_hex_real+0x250>
 800119c:	2e0a      	cmp	r6, #10
 800119e:	db06      	blt.n	80011ae <_printf_fp_hex_real+0x25e>
 80011a0:	fb96 f0f1 	sdiv	r0, r6, r1
 80011a4:	3030      	adds	r0, #48	@ 0x30
 80011a6:	f802 0008 	strb.w	r0, [r2, r8]
 80011aa:	f108 0801 	add.w	r8, r8, #1
 80011ae:	fb96 f0f1 	sdiv	r0, r6, r1
 80011b2:	fb01 6010 	mls	r0, r1, r0, r6
 80011b6:	3030      	adds	r0, #48	@ 0x30
 80011b8:	f802 0008 	strb.w	r0, [r2, r8]
 80011bc:	69a1      	ldr	r1, [r4, #24]
 80011be:	f108 0801 	add.w	r8, r8, #1
 80011c2:	eb08 0205 	add.w	r2, r8, r5
 80011c6:	eb02 000a 	add.w	r0, r2, sl
 80011ca:	1a08      	subs	r0, r1, r0
 80011cc:	61a0      	str	r0, [r4, #24]
 80011ce:	7820      	ldrb	r0, [r4, #0]
 80011d0:	06c0      	lsls	r0, r0, #27
 80011d2:	d402      	bmi.n	80011da <_printf_fp_hex_real+0x28a>
 80011d4:	4620      	mov	r0, r4
 80011d6:	f7ff f92a 	bl	800042e <_printf_pre_padding>
 80011da:	6a21      	ldr	r1, [r4, #32]
 80011dc:	ae08      	add	r6, sp, #32
 80011de:	eb01 000a 	add.w	r0, r1, sl
 80011e2:	6220      	str	r0, [r4, #32]
 80011e4:	e004      	b.n	80011f0 <_printf_fp_hex_real+0x2a0>
 80011e6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80011ea:	f816 0b01 	ldrb.w	r0, [r6], #1
 80011ee:	4790      	blx	r2
 80011f0:	f1ba 0a01 	subs.w	sl, sl, #1
 80011f4:	d2f7      	bcs.n	80011e6 <_printf_fp_hex_real+0x296>
 80011f6:	7820      	ldrb	r0, [r4, #0]
 80011f8:	06c0      	lsls	r0, r0, #27
 80011fa:	d502      	bpl.n	8001202 <_printf_fp_hex_real+0x2b2>
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff f916 	bl	800042e <_printf_pre_padding>
 8001202:	466e      	mov	r6, sp
 8001204:	e009      	b.n	800121a <_printf_fp_hex_real+0x2ca>
 8001206:	f816 0b01 	ldrb.w	r0, [r6], #1
 800120a:	283e      	cmp	r0, #62	@ 0x3e
 800120c:	d00f      	beq.n	800122e <_printf_fp_hex_real+0x2de>
 800120e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8001212:	4790      	blx	r2
 8001214:	6a20      	ldr	r0, [r4, #32]
 8001216:	1c40      	adds	r0, r0, #1
 8001218:	6220      	str	r0, [r4, #32]
 800121a:	f1b8 0801 	subs.w	r8, r8, #1
 800121e:	d2f2      	bcs.n	8001206 <_printf_fp_hex_real+0x2b6>
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff f91a 	bl	800045a <_printf_post_padding>
 8001226:	b009      	add	sp, #36	@ 0x24
 8001228:	2003      	movs	r0, #3
 800122a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800122e:	6a20      	ldr	r0, [r4, #32]
 8001230:	4428      	add	r0, r5
 8001232:	6220      	str	r0, [r4, #32]
 8001234:	e003      	b.n	800123e <_printf_fp_hex_real+0x2ee>
 8001236:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800123a:	2030      	movs	r0, #48	@ 0x30
 800123c:	4790      	blx	r2
 800123e:	1e6d      	subs	r5, r5, #1
 8001240:	d3eb      	bcc.n	800121a <_printf_fp_hex_real+0x2ca>
 8001242:	e7f8      	b.n	8001236 <_printf_fp_hex_real+0x2e6>
 8001244:	00005072 	.word	0x00005072
 8001248:	fffffc02 	.word	0xfffffc02

0800124c <_printf_cs_common>:
 800124c:	b510      	push	{r4, lr}
 800124e:	6943      	ldr	r3, [r0, #20]
 8001250:	b113      	cbz	r3, 8001258 <_printf_cs_common+0xc>
 8001252:	f3af 8000 	nop.w
 8001256:	e001      	b.n	800125c <_printf_cs_common+0x10>
 8001258:	f7ff f922 	bl	80004a0 <_printf_str>
 800125c:	2001      	movs	r0, #1
 800125e:	bd10      	pop	{r4, pc}

08001260 <_printf_char>:
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 8001266:	700a      	strb	r2, [r1, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	704a      	strb	r2, [r1, #1]
 800126c:	2201      	movs	r2, #1
 800126e:	e7ed      	b.n	800124c <_printf_cs_common>

08001270 <_printf_string>:
 8001270:	6811      	ldr	r1, [r2, #0]
 8001272:	f04f 32ff 	mov.w	r2, #4294967295
 8001276:	e7e9      	b.n	800124c <_printf_cs_common>

08001278 <_printf_lcs_common>:
 8001278:	b510      	push	{r4, lr}
 800127a:	6943      	ldr	r3, [r0, #20]
 800127c:	b113      	cbz	r3, 8001284 <_printf_lcs_common+0xc>
 800127e:	f3af 8000 	nop.w
 8001282:	e001      	b.n	8001288 <_printf_lcs_common+0x10>
 8001284:	f7ff f9a4 	bl	80005d0 <_printf_wctomb>
 8001288:	2001      	movs	r0, #1
 800128a:	bd10      	pop	{r4, pc}

0800128c <_printf_wchar>:
 800128c:	8812      	ldrh	r2, [r2, #0]
 800128e:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 8001292:	8482      	strh	r2, [r0, #36]	@ 0x24
 8001294:	2200      	movs	r2, #0
 8001296:	84c2      	strh	r2, [r0, #38]	@ 0x26
 8001298:	2201      	movs	r2, #1
 800129a:	e7ed      	b.n	8001278 <_printf_lcs_common>

0800129c <_printf_wstring>:
 800129c:	6811      	ldr	r1, [r2, #0]
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	e7e9      	b.n	8001278 <_printf_lcs_common>

080012a4 <_c16rtomb>:
 80012a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012a8:	4616      	mov	r6, r2
 80012aa:	460c      	mov	r4, r1
 80012ac:	4605      	mov	r5, r0
 80012ae:	f000 f843 	bl	8001338 <__rt_ctype_table>
 80012b2:	6803      	ldr	r3, [r0, #0]
 80012b4:	f893 0101 	ldrb.w	r0, [r3, #257]	@ 0x101
 80012b8:	2801      	cmp	r0, #1
 80012ba:	d007      	beq.n	80012cc <_c16rtomb+0x28>
 80012bc:	2cff      	cmp	r4, #255	@ 0xff
 80012be:	d812      	bhi.n	80012e6 <_c16rtomb+0x42>
 80012c0:	5d18      	ldrb	r0, [r3, r4]
 80012c2:	b180      	cbz	r0, 80012e6 <_c16rtomb+0x42>
 80012c4:	2001      	movs	r0, #1
 80012c6:	702c      	strb	r4, [r5, #0]
 80012c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012cc:	f8d3 0107 	ldr.w	r0, [r3, #263]	@ 0x107
 80012d0:	4632      	mov	r2, r6
 80012d2:	4621      	mov	r1, r4
 80012d4:	f203 1307 	addw	r3, r3, #263	@ 0x107
 80012d8:	18c7      	adds	r7, r0, r3
 80012da:	4628      	mov	r0, r5
 80012dc:	46bc      	mov	ip, r7
 80012de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012e2:	2300      	movs	r3, #0
 80012e4:	4760      	bx	ip
 80012e6:	f04f 30ff 	mov.w	r0, #4294967295
 80012ea:	e7ed      	b.n	80012c8 <_c16rtomb+0x24>

080012ec <__user_setup_stackheap>:
 80012ec:	4675      	mov	r5, lr
 80012ee:	f000 f8eb 	bl	80014c8 <__user_libspace>
 80012f2:	46ae      	mov	lr, r5
 80012f4:	0005      	movs	r5, r0
 80012f6:	4669      	mov	r1, sp
 80012f8:	4653      	mov	r3, sl
 80012fa:	f020 0007 	bic.w	r0, r0, #7
 80012fe:	4685      	mov	sp, r0
 8001300:	b018      	add	sp, #96	@ 0x60
 8001302:	b520      	push	{r5, lr}
 8001304:	f7fe ffda 	bl	80002bc <__user_initial_stackheap>
 8001308:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
 800130c:	f04f 0600 	mov.w	r6, #0
 8001310:	f04f 0700 	mov.w	r7, #0
 8001314:	f04f 0800 	mov.w	r8, #0
 8001318:	f04f 0b00 	mov.w	fp, #0
 800131c:	46ac      	mov	ip, r5
 800131e:	e8ac 09c0 	stmia.w	ip!, {r6, r7, r8, fp}
 8001322:	e8ac 09c0 	stmia.w	ip!, {r6, r7, r8, fp}
 8001326:	e8ac 09c0 	stmia.w	ip!, {r6, r7, r8, fp}
 800132a:	e8ac 09c0 	stmia.w	ip!, {r6, r7, r8, fp}
 800132e:	f021 0107 	bic.w	r1, r1, #7
 8001332:	468d      	mov	sp, r1
 8001334:	4770      	bx	lr
	...

08001338 <__rt_ctype_table>:
 8001338:	b510      	push	{r4, lr}
 800133a:	f000 f805 	bl	8001348 <__rt_locale>
 800133e:	1d00      	adds	r0, r0, #4
 8001340:	bd10      	pop	{r4, pc}
 8001342:	bf00      	nop
 8001344:	00004d01 	.word	0x00004d01

08001348 <__rt_locale>:
 8001348:	4800      	ldr	r0, [pc, #0]	@ (800134c <__rt_locale+0x4>)
 800134a:	4770      	bx	lr
 800134c:	20000258 	.word	0x20000258

08001350 <_printf_fp_infnan>:
 8001350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001354:	461f      	mov	r7, r3
 8001356:	4604      	mov	r4, r0
 8001358:	2603      	movs	r6, #3
 800135a:	6801      	ldr	r1, [r0, #0]
 800135c:	2a07      	cmp	r2, #7
 800135e:	f401 6000 	and.w	r0, r1, #2048	@ 0x800
 8001362:	db04      	blt.n	800136e <_printf_fp_infnan+0x1e>
 8001364:	b108      	cbz	r0, 800136a <_printf_fp_infnan+0x1a>
 8001366:	a516      	add	r5, pc, #88	@ (adr r5, 80013c0 <_printf_fp_infnan+0x70>)
 8001368:	e005      	b.n	8001376 <_printf_fp_infnan+0x26>
 800136a:	a516      	add	r5, pc, #88	@ (adr r5, 80013c4 <_printf_fp_infnan+0x74>)
 800136c:	e003      	b.n	8001376 <_printf_fp_infnan+0x26>
 800136e:	b108      	cbz	r0, 8001374 <_printf_fp_infnan+0x24>
 8001370:	a515      	add	r5, pc, #84	@ (adr r5, 80013c8 <_printf_fp_infnan+0x78>)
 8001372:	e000      	b.n	8001376 <_printf_fp_infnan+0x26>
 8001374:	a515      	add	r5, pc, #84	@ (adr r5, 80013cc <_printf_fp_infnan+0x7c>)
 8001376:	f021 0010 	bic.w	r0, r1, #16
 800137a:	6020      	str	r0, [r4, #0]
 800137c:	69a0      	ldr	r0, [r4, #24]
 800137e:	1ec0      	subs	r0, r0, #3
 8001380:	61a0      	str	r0, [r4, #24]
 8001382:	b10f      	cbz	r7, 8001388 <_printf_fp_infnan+0x38>
 8001384:	1e40      	subs	r0, r0, #1
 8001386:	61a0      	str	r0, [r4, #24]
 8001388:	4620      	mov	r0, r4
 800138a:	f7ff f850 	bl	800042e <_printf_pre_padding>
 800138e:	b14f      	cbz	r7, 80013a4 <_printf_fp_infnan+0x54>
 8001390:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8001394:	4638      	mov	r0, r7
 8001396:	4790      	blx	r2
 8001398:	6a20      	ldr	r0, [r4, #32]
 800139a:	1c40      	adds	r0, r0, #1
 800139c:	6220      	str	r0, [r4, #32]
 800139e:	1cc0      	adds	r0, r0, #3
 80013a0:	6220      	str	r0, [r4, #32]
 80013a2:	e006      	b.n	80013b2 <_printf_fp_infnan+0x62>
 80013a4:	6a20      	ldr	r0, [r4, #32]
 80013a6:	e7fa      	b.n	800139e <_printf_fp_infnan+0x4e>
 80013a8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80013ac:	f815 0b01 	ldrb.w	r0, [r5], #1
 80013b0:	4790      	blx	r2
 80013b2:	1e76      	subs	r6, r6, #1
 80013b4:	d2f8      	bcs.n	80013a8 <_printf_fp_infnan+0x58>
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff f84f 	bl	800045a <_printf_post_padding>
 80013bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013c0:	004e414e 	.word	0x004e414e
 80013c4:	006e616e 	.word	0x006e616e
 80013c8:	00464e49 	.word	0x00464e49
 80013cc:	00666e69 	.word	0x00666e69

080013d0 <_btod_etento>:
 80013d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013d4:	4681      	mov	r9, r0
 80013d6:	4616      	mov	r6, r2
 80013d8:	b08a      	sub	sp, #40	@ 0x28
 80013da:	4835      	ldr	r0, [pc, #212]	@ (80014b0 <_btod_etento+0xe0>)
 80013dc:	4478      	add	r0, pc
 80013de:	c80d      	ldmia	r0, {r0, r2, r3}
 80013e0:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
 80013e4:	4832      	ldr	r0, [pc, #200]	@ (80014b0 <_btod_etento+0xe0>)
 80013e6:	4478      	add	r0, pc
 80013e8:	1c80      	adds	r0, r0, #2
 80013ea:	ac03      	add	r4, sp, #12
 80013ec:	c80d      	ldmia	r0, {r0, r2, r3}
 80013ee:	e884 000d 	stmia.w	r4, {r0, r2, r3}
 80013f2:	f641 309b 	movw	r0, #7067	@ 0x1b9b
 80013f6:	4408      	add	r0, r1
 80013f8:	2137      	movs	r1, #55	@ 0x37
 80013fa:	fb90 f2f1 	sdiv	r2, r0, r1
 80013fe:	fb90 f5f1 	sdiv	r5, r0, r1
 8001402:	f1a5 0580 	sub.w	r5, r5, #128	@ 0x80
 8001406:	fb01 0412 	mls	r4, r1, r2, r0
 800140a:	3c1b      	subs	r4, #27
 800140c:	d502      	bpl.n	8001414 <_btod_etento+0x44>
 800140e:	4264      	negs	r4, r4
 8001410:	2001      	movs	r0, #1
 8001412:	e000      	b.n	8001416 <_btod_etento+0x46>
 8001414:	2000      	movs	r0, #0
 8001416:	f8df a098 	ldr.w	sl, [pc, #152]	@ 80014b0 <_btod_etento+0xe0>
 800141a:	4680      	mov	r8, r0
 800141c:	2700      	movs	r7, #0
 800141e:	44fa      	add	sl, pc
 8001420:	f1aa 0abe 	sub.w	sl, sl, #190	@ 0xbe
 8001424:	e00e      	b.n	8001444 <_btod_etento+0x74>
 8001426:	07e0      	lsls	r0, r4, #31
 8001428:	d00a      	beq.n	8001440 <_btod_etento+0x70>
 800142a:	4632      	mov	r2, r6
 800142c:	4668      	mov	r0, sp
 800142e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8001432:	2301      	movs	r3, #1
 8001434:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8001438:	f004 fc9b 	bl	8005d72 <_btod_emul>
 800143c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001440:	1064      	asrs	r4, r4, #1
 8001442:	1c7f      	adds	r7, r7, #1
 8001444:	2c00      	cmp	r4, #0
 8001446:	d1ee      	bne.n	8001426 <_btod_etento+0x56>
 8001448:	4f19      	ldr	r7, [pc, #100]	@ (80014b0 <_btod_etento+0xe0>)
 800144a:	447f      	add	r7, pc
 800144c:	3fae      	subs	r7, #174	@ 0xae
 800144e:	e019      	b.n	8001484 <_btod_etento+0xb4>
 8001450:	07e8      	lsls	r0, r5, #31
 8001452:	d015      	beq.n	8001480 <_btod_etento+0xb0>
 8001454:	eb07 1004 	add.w	r0, r7, r4, lsl #4
 8001458:	f10d 0a18 	add.w	sl, sp, #24
 800145c:	e890 000e 	ldmia.w	r0, {r1, r2, r3}
 8001460:	e88a 000e 	stmia.w	sl, {r1, r2, r3}
 8001464:	68c0      	ldr	r0, [r0, #12]
 8001466:	42f0      	cmn	r0, r6
 8001468:	d101      	bne.n	800146e <_btod_etento+0x9e>
 800146a:	1998      	adds	r0, r3, r6
 800146c:	9008      	str	r0, [sp, #32]
 800146e:	4632      	mov	r2, r6
 8001470:	2301      	movs	r3, #1
 8001472:	a906      	add	r1, sp, #24
 8001474:	a803      	add	r0, sp, #12
 8001476:	f004 fc7c 	bl	8005d72 <_btod_emul>
 800147a:	ab03      	add	r3, sp, #12
 800147c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001480:	106d      	asrs	r5, r5, #1
 8001482:	1c64      	adds	r4, r4, #1
 8001484:	2d00      	cmp	r5, #0
 8001486:	d1e3      	bne.n	8001450 <_btod_etento+0x80>
 8001488:	f04f 0301 	mov.w	r3, #1
 800148c:	4632      	mov	r2, r6
 800148e:	4669      	mov	r1, sp
 8001490:	f1b8 0f00 	cmp.w	r8, #0
 8001494:	a803      	add	r0, sp, #12
 8001496:	d002      	beq.n	800149e <_btod_etento+0xce>
 8001498:	f004 fc56 	bl	8005d48 <_btod_ediv>
 800149c:	e001      	b.n	80014a2 <_btod_etento+0xd2>
 800149e:	f004 fc68 	bl	8005d72 <_btod_emul>
 80014a2:	e9c9 0100 	strd	r0, r1, [r9]
 80014a6:	f8c9 2008 	str.w	r2, [r9, #8]
 80014aa:	b00a      	add	sp, #40	@ 0x28
 80014ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b0:	00004d7c 	.word	0x00004d7c

080014b4 <exit>:
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4604      	mov	r4, r0
 80014b8:	f3af 8000 	nop.w
 80014bc:	4620      	mov	r0, r4
 80014be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014c2:	f7fe bee6 	b.w	8000292 <__rt_exit>
	...

080014c8 <__user_libspace>:
 80014c8:	4800      	ldr	r0, [pc, #0]	@ (80014cc <__user_libspace+0x4>)
 80014ca:	4770      	bx	lr
 80014cc:	20000238 	.word	0x20000238

080014d0 <strcmp>:
 80014d0:	f04f 3c01 	mov.w	ip, #16843009	@ 0x1010101
 80014d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80014d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80014dc:	429a      	cmp	r2, r3
 80014de:	d121      	bne.n	8001524 <strcmp+0x54>
 80014e0:	eba2 030c 	sub.w	r3, r2, ip
 80014e4:	4393      	bics	r3, r2
 80014e6:	ea13 13cc 	ands.w	r3, r3, ip, lsl #7
 80014ea:	d117      	bne.n	800151c <strcmp+0x4c>
 80014ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80014f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d115      	bne.n	8001524 <strcmp+0x54>
 80014f8:	eba2 030c 	sub.w	r3, r2, ip
 80014fc:	4393      	bics	r3, r2
 80014fe:	ea13 13cc 	ands.w	r3, r3, ip, lsl #7
 8001502:	d10b      	bne.n	800151c <strcmp+0x4c>
 8001504:	f850 2b04 	ldr.w	r2, [r0], #4
 8001508:	f851 3b04 	ldr.w	r3, [r1], #4
 800150c:	429a      	cmp	r2, r3
 800150e:	d109      	bne.n	8001524 <strcmp+0x54>
 8001510:	eba2 030c 	sub.w	r3, r2, ip
 8001514:	4393      	bics	r3, r2
 8001516:	ea13 13cc 	ands.w	r3, r3, ip, lsl #7
 800151a:	d0db      	beq.n	80014d4 <strcmp+0x4>
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	1ad0      	subs	r0, r2, r3
 8001526:	ba01      	rev	r1, r0
 8001528:	fab1 f181 	clz	r1, r1
 800152c:	f001 0118 	and.w	r1, r1, #24
 8001530:	fa22 f001 	lsr.w	r0, r2, r1
 8001534:	40cb      	lsrs	r3, r1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	b2c0      	uxtb	r0, r0
 800153a:	1ac0      	subs	r0, r0, r3
 800153c:	f1c1 0120 	rsb	r1, r1, #32
 8001540:	fa2c f301 	lsr.w	r3, ip, r1
 8001544:	1ad1      	subs	r1, r2, r3
 8001546:	4391      	bics	r1, r2
 8001548:	ea11 11c3 	ands.w	r1, r1, r3, lsl #7
 800154c:	d1e6      	bne.n	800151c <strcmp+0x4c>
 800154e:	4770      	bx	lr

08001550 <_sys_exit>:
 8001550:	4901      	ldr	r1, [pc, #4]	@ (8001558 <_sys_exit+0x8>)
 8001552:	2018      	movs	r0, #24
 8001554:	beab      	bkpt	0x00ab
 8001556:	e7fe      	b.n	8001556 <_sys_exit+0x6>
 8001558:	00020026 	.word	0x00020026

0800155c <__use_no_semihosting_swi>:
 800155c:	4770      	bx	lr

0800155e <__semihosting_library_function>:
	...

08001560 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001560:	e7ff      	b.n	8001562 <BusFault_Handler+0x2>
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x2>

08001564 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	4770      	bx	lr
	...

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b081      	sub	sp, #4
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
 800156a:	f3ef 8010 	mrs	r0, PRIMASK
 800156e:	b672      	cpsid	i
 8001570:	9000      	str	r0, [sp, #0]
  while (1)
 8001572:	e7ff      	b.n	8001574 <Error_Handler+0xc>
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0xc>
	...

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	9003      	str	r0, [sp, #12]
  uint32_t tickstart = HAL_GetTick();
 800157e:	f000 f9c5 	bl	800190c <HAL_GetTick>
 8001582:	9002      	str	r0, [sp, #8]
  uint32_t wait = Delay;
 8001584:	9803      	ldr	r0, [sp, #12]
 8001586:	9001      	str	r0, [sp, #4]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001588:	9801      	ldr	r0, [sp, #4]
 800158a:	3001      	adds	r0, #1
 800158c:	b148      	cbz	r0, 80015a2 <HAL_Delay+0x2a>
 800158e:	e7ff      	b.n	8001590 <HAL_Delay+0x18>
  {
    wait += (uint32_t)(uwTickFreq);
 8001590:	f240 202c 	movw	r0, #556	@ 0x22c
 8001594:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001598:	7801      	ldrb	r1, [r0, #0]
 800159a:	9801      	ldr	r0, [sp, #4]
 800159c:	4408      	add	r0, r1
 800159e:	9001      	str	r0, [sp, #4]
  }
 80015a0:	e7ff      	b.n	80015a2 <HAL_Delay+0x2a>

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	e7ff      	b.n	80015a4 <HAL_Delay+0x2c>
 80015a4:	f000 f9b2 	bl	800190c <HAL_GetTick>
 80015a8:	9902      	ldr	r1, [sp, #8]
 80015aa:	1a40      	subs	r0, r0, r1
 80015ac:	9901      	ldr	r1, [sp, #4]
 80015ae:	4288      	cmp	r0, r1
 80015b0:	d201      	bcs.n	80015b6 <HAL_Delay+0x3e>
 80015b2:	e7ff      	b.n	80015b4 <HAL_Delay+0x3c>
 80015b4:	e7f6      	b.n	80015a4 <HAL_Delay+0x2c>
  {
  }
}
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b090      	sub	sp, #64	@ 0x40
 80015be:	900f      	str	r0, [sp, #60]	@ 0x3c
 80015c0:	910e      	str	r1, [sp, #56]	@ 0x38
 80015c2:	2000      	movs	r0, #0
  uint32_t position = 0x00u;
 80015c4:	900d      	str	r0, [sp, #52]	@ 0x34
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015c6:	9009      	str	r0, [sp, #36]	@ 0x24
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c8:	e7ff      	b.n	80015ca <HAL_GPIO_Init+0xe>
 80015ca:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80015cc:	6800      	ldr	r0, [r0, #0]
 80015ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80015d0:	40c8      	lsrs	r0, r1
 80015d2:	2800      	cmp	r0, #0
 80015d4:	f000 817f 	beq.w	80018d6 <HAL_GPIO_Init+0x31a>
 80015d8:	e7ff      	b.n	80015da <HAL_GPIO_Init+0x1e>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80015dc:	2001      	movs	r0, #1
 80015de:	4088      	lsls	r0, r1
 80015e0:	900c      	str	r0, [sp, #48]	@ 0x30

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80015e4:	6800      	ldr	r0, [r0, #0]
 80015e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80015e8:	4008      	ands	r0, r1
 80015ea:	900b      	str	r0, [sp, #44]	@ 0x2c

    if (iocurrent == ioposition)
 80015ec:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80015ee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80015f0:	4288      	cmp	r0, r1
 80015f2:	f040 816c 	bne.w	80018ce <HAL_GPIO_Init+0x312>
 80015f6:	e7ff      	b.n	80015f8 <HAL_GPIO_Init+0x3c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80015fa:	6840      	ldr	r0, [r0, #4]
 80015fc:	9005      	str	r0, [sp, #20]
 80015fe:	2800      	cmp	r0, #0
 8001600:	d051      	beq.n	80016a6 <HAL_GPIO_Init+0xea>
 8001602:	e7ff      	b.n	8001604 <HAL_GPIO_Init+0x48>
 8001604:	9805      	ldr	r0, [sp, #20]
 8001606:	2801      	cmp	r0, #1
 8001608:	d03a      	beq.n	8001680 <HAL_GPIO_Init+0xc4>
 800160a:	e7ff      	b.n	800160c <HAL_GPIO_Init+0x50>
 800160c:	9805      	ldr	r0, [sp, #20]
 800160e:	2802      	cmp	r0, #2
 8001610:	d03f      	beq.n	8001692 <HAL_GPIO_Init+0xd6>
 8001612:	e7ff      	b.n	8001614 <HAL_GPIO_Init+0x58>
 8001614:	9805      	ldr	r0, [sp, #20]
 8001616:	2803      	cmp	r0, #3
 8001618:	d05f      	beq.n	80016da <HAL_GPIO_Init+0x11e>
 800161a:	e7ff      	b.n	800161c <HAL_GPIO_Init+0x60>
 800161c:	9805      	ldr	r0, [sp, #20]
 800161e:	2811      	cmp	r0, #17
 8001620:	d032      	beq.n	8001688 <HAL_GPIO_Init+0xcc>
 8001622:	e7ff      	b.n	8001624 <HAL_GPIO_Init+0x68>
 8001624:	9805      	ldr	r0, [sp, #20]
 8001626:	2812      	cmp	r0, #18
 8001628:	d038      	beq.n	800169c <HAL_GPIO_Init+0xe0>
 800162a:	e7ff      	b.n	800162c <HAL_GPIO_Init+0x70>
 800162c:	9805      	ldr	r0, [sp, #20]
 800162e:	2100      	movs	r1, #0
 8001630:	f2c1 0111 	movt	r1, #4113	@ 0x1011
 8001634:	4288      	cmp	r0, r1
 8001636:	d036      	beq.n	80016a6 <HAL_GPIO_Init+0xea>
 8001638:	e7ff      	b.n	800163a <HAL_GPIO_Init+0x7e>
 800163a:	9805      	ldr	r0, [sp, #20]
 800163c:	2100      	movs	r1, #0
 800163e:	f2c1 0112 	movt	r1, #4114	@ 0x1012
 8001642:	4288      	cmp	r0, r1
 8001644:	d02f      	beq.n	80016a6 <HAL_GPIO_Init+0xea>
 8001646:	e7ff      	b.n	8001648 <HAL_GPIO_Init+0x8c>
 8001648:	9805      	ldr	r0, [sp, #20]
 800164a:	2100      	movs	r1, #0
 800164c:	f2c1 0121 	movt	r1, #4129	@ 0x1021
 8001650:	4288      	cmp	r0, r1
 8001652:	d028      	beq.n	80016a6 <HAL_GPIO_Init+0xea>
 8001654:	e7ff      	b.n	8001656 <HAL_GPIO_Init+0x9a>
 8001656:	9805      	ldr	r0, [sp, #20]
 8001658:	2100      	movs	r1, #0
 800165a:	f2c1 0122 	movt	r1, #4130	@ 0x1022
 800165e:	4288      	cmp	r0, r1
 8001660:	d021      	beq.n	80016a6 <HAL_GPIO_Init+0xea>
 8001662:	e7ff      	b.n	8001664 <HAL_GPIO_Init+0xa8>
 8001664:	9805      	ldr	r0, [sp, #20]
 8001666:	2100      	movs	r1, #0
 8001668:	f2c1 0131 	movt	r1, #4145	@ 0x1031
 800166c:	4288      	cmp	r0, r1
 800166e:	d01a      	beq.n	80016a6 <HAL_GPIO_Init+0xea>
 8001670:	e7ff      	b.n	8001672 <HAL_GPIO_Init+0xb6>
 8001672:	9805      	ldr	r0, [sp, #20]
 8001674:	2100      	movs	r1, #0
 8001676:	f2c1 0132 	movt	r1, #4146	@ 0x1032
 800167a:	4288      	cmp	r0, r1
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0xea>
 800167e:	e02f      	b.n	80016e0 <HAL_GPIO_Init+0x124>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001680:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001682:	68c0      	ldr	r0, [r0, #12]
 8001684:	9009      	str	r0, [sp, #36]	@ 0x24
          break;
 8001686:	e02c      	b.n	80016e2 <HAL_GPIO_Init+0x126>

        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001688:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800168a:	68c0      	ldr	r0, [r0, #12]
 800168c:	3004      	adds	r0, #4
 800168e:	9009      	str	r0, [sp, #36]	@ 0x24
          break;
 8001690:	e027      	b.n	80016e2 <HAL_GPIO_Init+0x126>

        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001692:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001694:	68c0      	ldr	r0, [r0, #12]
 8001696:	3008      	adds	r0, #8
 8001698:	9009      	str	r0, [sp, #36]	@ 0x24
          break;
 800169a:	e022      	b.n	80016e2 <HAL_GPIO_Init+0x126>

        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800169c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800169e:	68c0      	ldr	r0, [r0, #12]
 80016a0:	300c      	adds	r0, #12
 80016a2:	9009      	str	r0, [sp, #36]	@ 0x24
          break;
 80016a4:	e01d      	b.n	80016e2 <HAL_GPIO_Init+0x126>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016a6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80016a8:	6880      	ldr	r0, [r0, #8]
 80016aa:	b918      	cbnz	r0, 80016b4 <HAL_GPIO_Init+0xf8>
 80016ac:	e7ff      	b.n	80016ae <HAL_GPIO_Init+0xf2>
 80016ae:	2004      	movs	r0, #4
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b0:	9009      	str	r0, [sp, #36]	@ 0x24
          }
 80016b2:	e011      	b.n	80016d8 <HAL_GPIO_Init+0x11c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80016b6:	6880      	ldr	r0, [r0, #8]
 80016b8:	2801      	cmp	r0, #1
 80016ba:	d106      	bne.n	80016ca <HAL_GPIO_Init+0x10e>
 80016bc:	e7ff      	b.n	80016be <HAL_GPIO_Init+0x102>
 80016be:	2008      	movs	r0, #8
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	9009      	str	r0, [sp, #36]	@ 0x24

            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 80016c2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80016c6:	6108      	str	r0, [r1, #16]
          }
 80016c8:	e005      	b.n	80016d6 <HAL_GPIO_Init+0x11a>
 80016ca:	2008      	movs	r0, #8
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016cc:	9009      	str	r0, [sp, #36]	@ 0x24

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80016ce:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80016d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80016d2:	6148      	str	r0, [r1, #20]
 80016d4:	e7ff      	b.n	80016d6 <HAL_GPIO_Init+0x11a>
 80016d6:	e7ff      	b.n	80016d8 <HAL_GPIO_Init+0x11c>
          }
          break;
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_Init+0x126>
 80016da:	2000      	movs	r0, #0

        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016dc:	9009      	str	r0, [sp, #36]	@ 0x24
          break;
 80016de:	e000      	b.n	80016e2 <HAL_GPIO_Init+0x126>

        /* Parameters are checked with assert_param */
        default:
          break;
 80016e0:	e7ff      	b.n	80016e2 <HAL_GPIO_Init+0x126>
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80016e4:	28ff      	cmp	r0, #255	@ 0xff
 80016e6:	d803      	bhi.n	80016f0 <HAL_GPIO_Init+0x134>
 80016e8:	e7ff      	b.n	80016ea <HAL_GPIO_Init+0x12e>
 80016ea:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80016ec:	9004      	str	r0, [sp, #16]
 80016ee:	e003      	b.n	80016f8 <HAL_GPIO_Init+0x13c>
 80016f0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80016f2:	3004      	adds	r0, #4
 80016f4:	9004      	str	r0, [sp, #16]
 80016f6:	e7ff      	b.n	80016f8 <HAL_GPIO_Init+0x13c>
 80016f8:	9804      	ldr	r0, [sp, #16]
 80016fa:	9008      	str	r0, [sp, #32]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016fc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80016fe:	28ff      	cmp	r0, #255	@ 0xff
 8001700:	d804      	bhi.n	800170c <HAL_GPIO_Init+0x150>
 8001702:	e7ff      	b.n	8001704 <HAL_GPIO_Init+0x148>
 8001704:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001706:	0080      	lsls	r0, r0, #2
 8001708:	9003      	str	r0, [sp, #12]
 800170a:	e006      	b.n	800171a <HAL_GPIO_Init+0x15e>
 800170c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800170e:	f06f 001f 	mvn.w	r0, #31
 8001712:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001716:	9003      	str	r0, [sp, #12]
 8001718:	e7ff      	b.n	800171a <HAL_GPIO_Init+0x15e>
 800171a:	9803      	ldr	r0, [sp, #12]
 800171c:	9007      	str	r0, [sp, #28]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800171e:	9808      	ldr	r0, [sp, #32]
 8001720:	6800      	ldr	r0, [r0, #0]
 8001722:	9a07      	ldr	r2, [sp, #28]
 8001724:	210f      	movs	r1, #15
 8001726:	4091      	lsls	r1, r2
 8001728:	4388      	bics	r0, r1
 800172a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800172c:	4091      	lsls	r1, r2
 800172e:	4308      	orrs	r0, r1
 8001730:	9908      	ldr	r1, [sp, #32]
 8001732:	6008      	str	r0, [r1, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001734:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001736:	79c0      	ldrb	r0, [r0, #7]
 8001738:	06c0      	lsls	r0, r0, #27
 800173a:	2800      	cmp	r0, #0
 800173c:	f140 80c6 	bpl.w	80018cc <HAL_GPIO_Init+0x310>
 8001740:	e7ff      	b.n	8001742 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001742:	e7ff      	b.n	8001744 <HAL_GPIO_Init+0x188>
 8001744:	f241 0018 	movw	r0, #4120	@ 0x1018
 8001748:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800174c:	6801      	ldr	r1, [r0, #0]
 800174e:	f041 0101 	orr.w	r1, r1, #1
 8001752:	6001      	str	r1, [r0, #0]
 8001754:	6800      	ldr	r0, [r0, #0]
 8001756:	f000 0001 	and.w	r0, r0, #1
 800175a:	9006      	str	r0, [sp, #24]
 800175c:	9806      	ldr	r0, [sp, #24]
 800175e:	e7ff      	b.n	8001760 <HAL_GPIO_Init+0x1a4>
        temp = AFIO->EXTICR[position >> 2u];
 8001760:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001762:	f020 0003 	bic.w	r0, r0, #3
 8001766:	2108      	movs	r1, #8
 8001768:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 800176c:	5840      	ldr	r0, [r0, r1]
 800176e:	900a      	str	r0, [sp, #40]	@ 0x28
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001770:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001772:	f000 0003 	and.w	r0, r0, #3
 8001776:	0081      	lsls	r1, r0, #2
 8001778:	200f      	movs	r0, #15
 800177a:	fa00 f101 	lsl.w	r1, r0, r1
 800177e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001780:	4388      	bics	r0, r1
 8001782:	900a      	str	r0, [sp, #40]	@ 0x28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001784:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8001786:	f640 0100 	movw	r1, #2048	@ 0x800
 800178a:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 800178e:	4288      	cmp	r0, r1
 8001790:	d103      	bne.n	800179a <HAL_GPIO_Init+0x1de>
 8001792:	e7ff      	b.n	8001794 <HAL_GPIO_Init+0x1d8>
 8001794:	2000      	movs	r0, #0
 8001796:	9002      	str	r0, [sp, #8]
 8001798:	e026      	b.n	80017e8 <HAL_GPIO_Init+0x22c>
 800179a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800179c:	f640 4100 	movw	r1, #3072	@ 0xc00
 80017a0:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 80017a4:	4288      	cmp	r0, r1
 80017a6:	d103      	bne.n	80017b0 <HAL_GPIO_Init+0x1f4>
 80017a8:	e7ff      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017aa:	2001      	movs	r0, #1
 80017ac:	9001      	str	r0, [sp, #4]
 80017ae:	e018      	b.n	80017e2 <HAL_GPIO_Init+0x226>
 80017b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80017b2:	f241 0100 	movw	r1, #4096	@ 0x1000
 80017b6:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 80017ba:	4288      	cmp	r0, r1
 80017bc:	d103      	bne.n	80017c6 <HAL_GPIO_Init+0x20a>
 80017be:	e7ff      	b.n	80017c0 <HAL_GPIO_Init+0x204>
 80017c0:	2002      	movs	r0, #2
 80017c2:	9000      	str	r0, [sp, #0]
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x220>
 80017c6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80017c8:	f241 4200 	movw	r2, #5120	@ 0x1400
 80017cc:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80017d0:	2004      	movs	r0, #4
 80017d2:	4291      	cmp	r1, r2
 80017d4:	bf08      	it	eq
 80017d6:	2003      	moveq	r0, #3
 80017d8:	9000      	str	r0, [sp, #0]
 80017da:	e7ff      	b.n	80017dc <HAL_GPIO_Init+0x220>
 80017dc:	9800      	ldr	r0, [sp, #0]
 80017de:	9001      	str	r0, [sp, #4]
 80017e0:	e7ff      	b.n	80017e2 <HAL_GPIO_Init+0x226>
 80017e2:	9801      	ldr	r0, [sp, #4]
 80017e4:	9002      	str	r0, [sp, #8]
 80017e6:	e7ff      	b.n	80017e8 <HAL_GPIO_Init+0x22c>
 80017e8:	9802      	ldr	r0, [sp, #8]
 80017ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80017ec:	f001 0103 	and.w	r1, r1, #3
 80017f0:	0089      	lsls	r1, r1, #2
 80017f2:	fa00 f101 	lsl.w	r1, r0, r1
 80017f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80017f8:	4308      	orrs	r0, r1
 80017fa:	900a      	str	r0, [sp, #40]	@ 0x28
        AFIO->EXTICR[position >> 2u] = temp;
 80017fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80017fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8001800:	f021 0103 	bic.w	r1, r1, #3
 8001804:	2208      	movs	r2, #8
 8001806:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800180a:	5088      	str	r0, [r1, r2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800180e:	7980      	ldrb	r0, [r0, #6]
 8001810:	06c0      	lsls	r0, r0, #27
 8001812:	2800      	cmp	r0, #0
 8001814:	d509      	bpl.n	800182a <HAL_GPIO_Init+0x26e>
 8001816:	e7ff      	b.n	8001818 <HAL_GPIO_Init+0x25c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001818:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800181a:	f240 4108 	movw	r1, #1032	@ 0x408
 800181e:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8001822:	6808      	ldr	r0, [r1, #0]
 8001824:	4310      	orrs	r0, r2
 8001826:	6008      	str	r0, [r1, #0]
        }
 8001828:	e008      	b.n	800183c <HAL_GPIO_Init+0x280>
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800182a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800182c:	f240 4108 	movw	r1, #1032	@ 0x408
 8001830:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8001834:	6808      	ldr	r0, [r1, #0]
 8001836:	4390      	bics	r0, r2
 8001838:	6008      	str	r0, [r1, #0]
 800183a:	e7ff      	b.n	800183c <HAL_GPIO_Init+0x280>
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800183c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800183e:	7980      	ldrb	r0, [r0, #6]
 8001840:	0680      	lsls	r0, r0, #26
 8001842:	2800      	cmp	r0, #0
 8001844:	d509      	bpl.n	800185a <HAL_GPIO_Init+0x29e>
 8001846:	e7ff      	b.n	8001848 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001848:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800184a:	f240 410c 	movw	r1, #1036	@ 0x40c
 800184e:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8001852:	6808      	ldr	r0, [r1, #0]
 8001854:	4310      	orrs	r0, r2
 8001856:	6008      	str	r0, [r1, #0]
        }
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x2b0>
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800185a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800185c:	f240 410c 	movw	r1, #1036	@ 0x40c
 8001860:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8001864:	6808      	ldr	r0, [r1, #0]
 8001866:	4390      	bics	r0, r2
 8001868:	6008      	str	r0, [r1, #0]
 800186a:	e7ff      	b.n	800186c <HAL_GPIO_Init+0x2b0>
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800186c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800186e:	7980      	ldrb	r0, [r0, #6]
 8001870:	0780      	lsls	r0, r0, #30
 8001872:	2800      	cmp	r0, #0
 8001874:	d509      	bpl.n	800188a <HAL_GPIO_Init+0x2ce>
 8001876:	e7ff      	b.n	8001878 <HAL_GPIO_Init+0x2bc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001878:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800187a:	f240 4104 	movw	r1, #1028	@ 0x404
 800187e:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8001882:	6808      	ldr	r0, [r1, #0]
 8001884:	4310      	orrs	r0, r2
 8001886:	6008      	str	r0, [r1, #0]
        }
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x2e0>
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800188a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800188c:	f240 4104 	movw	r1, #1028	@ 0x404
 8001890:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8001894:	6808      	ldr	r0, [r1, #0]
 8001896:	4390      	bics	r0, r2
 8001898:	6008      	str	r0, [r1, #0]
 800189a:	e7ff      	b.n	800189c <HAL_GPIO_Init+0x2e0>
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800189e:	7980      	ldrb	r0, [r0, #6]
 80018a0:	07c0      	lsls	r0, r0, #31
 80018a2:	b148      	cbz	r0, 80018b8 <HAL_GPIO_Init+0x2fc>
 80018a4:	e7ff      	b.n	80018a6 <HAL_GPIO_Init+0x2ea>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80018a8:	f240 4100 	movw	r1, #1024	@ 0x400
 80018ac:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 80018b0:	6808      	ldr	r0, [r1, #0]
 80018b2:	4310      	orrs	r0, r2
 80018b4:	6008      	str	r0, [r1, #0]
        }
 80018b6:	e008      	b.n	80018ca <HAL_GPIO_Init+0x30e>
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80018ba:	f240 4100 	movw	r1, #1024	@ 0x400
 80018be:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 80018c2:	6808      	ldr	r0, [r1, #0]
 80018c4:	4390      	bics	r0, r2
 80018c6:	6008      	str	r0, [r1, #0]
 80018c8:	e7ff      	b.n	80018ca <HAL_GPIO_Init+0x30e>
        }
      }
 80018ca:	e7ff      	b.n	80018cc <HAL_GPIO_Init+0x310>
    }
 80018cc:	e7ff      	b.n	80018ce <HAL_GPIO_Init+0x312>

	position++;
 80018ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80018d0:	3001      	adds	r0, #1
 80018d2:	900d      	str	r0, [sp, #52]	@ 0x34
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d4:	e679      	b.n	80015ca <HAL_GPIO_Init+0xe>
  }
}
 80018d6:	b010      	add	sp, #64	@ 0x40
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b082      	sub	sp, #8
 80018de:	9001      	str	r0, [sp, #4]
 80018e0:	f8ad 1002 	strh.w	r1, [sp, #2]
 80018e4:	f88d 2001 	strb.w	r2, [sp, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e8:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80018ec:	b128      	cbz	r0, 80018fa <HAL_GPIO_WritePin+0x1e>
 80018ee:	e7ff      	b.n	80018f0 <HAL_GPIO_WritePin+0x14>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f0:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80018f4:	9901      	ldr	r1, [sp, #4]
 80018f6:	6108      	str	r0, [r1, #16]
  }
 80018f8:	e005      	b.n	8001906 <HAL_GPIO_WritePin+0x2a>
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018fa:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80018fe:	0400      	lsls	r0, r0, #16
 8001900:	9901      	ldr	r1, [sp, #4]
 8001902:	6108      	str	r0, [r1, #16]
 8001904:	e7ff      	b.n	8001906 <HAL_GPIO_WritePin+0x2a>
  }
}
 8001906:	b002      	add	sp, #8
 8001908:	4770      	bx	lr
	...

0800190c <HAL_GetTick>:
  return uwTick;
 800190c:	f240 7048 	movw	r0, #1864	@ 0x748
 8001910:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001914:	6800      	ldr	r0, [r0, #0]
 8001916:	4770      	bx	lr

08001918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	@ 0x38
 800191c:	900c      	str	r0, [sp, #48]	@ 0x30
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800191e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001920:	b920      	cbnz	r0, 800192c <HAL_I2C_Init+0x14>
 8001922:	e7ff      	b.n	8001924 <HAL_I2C_Init+0xc>
 8001924:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
 8001926:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 800192a:	e143      	b.n	8001bb4 <HAL_I2C_Init+0x29c>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800192e:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
 8001932:	b940      	cbnz	r0, 8001946 <HAL_I2C_Init+0x2e>
 8001934:	e7ff      	b.n	8001936 <HAL_I2C_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001936:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001938:	2000      	movs	r0, #0
 800193a:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800193e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001940:	f000 fa44 	bl	8001dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
 8001944:	e7ff      	b.n	8001946 <HAL_I2C_Init+0x2e>

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001946:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001948:	2024      	movs	r0, #36	@ 0x24
 800194a:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800194e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001950:	6801      	ldr	r1, [r0, #0]
 8001952:	6808      	ldr	r0, [r1, #0]
 8001954:	f020 0001 	bic.w	r0, r0, #1
 8001958:	6008      	str	r0, [r1, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800195a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800195c:	6801      	ldr	r1, [r0, #0]
 800195e:	6808      	ldr	r0, [r1, #0]
 8001960:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001964:	6008      	str	r0, [r1, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001966:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001968:	6801      	ldr	r1, [r0, #0]
 800196a:	6808      	ldr	r0, [r1, #0]
 800196c:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8001970:	6008      	str	r0, [r1, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001972:	f000 fc55 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8001976:	900a      	str	r0, [sp, #40]	@ 0x28

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001978:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800197a:	6840      	ldr	r0, [r0, #4]
 800197c:	f248 61a0 	movw	r1, #34464	@ 0x86a0
 8001980:	f2c0 0101 	movt	r1, #1
 8001984:	4288      	cmp	r0, r1
 8001986:	d80b      	bhi.n	80019a0 <HAL_I2C_Init+0x88>
 8001988:	e7ff      	b.n	800198a <HAL_I2C_Init+0x72>
 800198a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800198c:	f248 4280 	movw	r2, #33920	@ 0x8480
 8001990:	f2c0 021e 	movt	r2, #30
 8001994:	2000      	movs	r0, #0
 8001996:	4291      	cmp	r1, r2
 8001998:	bf38      	it	cc
 800199a:	2001      	movcc	r0, #1
 800199c:	9009      	str	r0, [sp, #36]	@ 0x24
 800199e:	e00a      	b.n	80019b6 <HAL_I2C_Init+0x9e>
 80019a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80019a2:	f640 1200 	movw	r2, #2304	@ 0x900
 80019a6:	f2c0 023d 	movt	r2, #61	@ 0x3d
 80019aa:	2000      	movs	r0, #0
 80019ac:	4291      	cmp	r1, r2
 80019ae:	bf38      	it	cc
 80019b0:	2001      	movcc	r0, #1
 80019b2:	9009      	str	r0, [sp, #36]	@ 0x24
 80019b4:	e7ff      	b.n	80019b6 <HAL_I2C_Init+0x9e>
 80019b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80019b8:	2801      	cmp	r0, #1
 80019ba:	d104      	bne.n	80019c6 <HAL_I2C_Init+0xae>
 80019bc:	e7ff      	b.n	80019be <HAL_I2C_Init+0xa6>
 80019be:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
 80019c0:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 80019c4:	e0f6      	b.n	8001bb4 <HAL_I2C_Init+0x29c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80019c8:	f64d 6183 	movw	r1, #56963	@ 0xde83
 80019cc:	f2c4 311b 	movt	r1, #17179	@ 0x431b
 80019d0:	fba0 1001 	umull	r1, r0, r0, r1
 80019d4:	0c80      	lsrs	r0, r0, #18
 80019d6:	900b      	str	r0, [sp, #44]	@ 0x2c

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80019da:	6800      	ldr	r0, [r0, #0]
 80019dc:	6840      	ldr	r0, [r0, #4]
 80019de:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80019e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80019e4:	4308      	orrs	r0, r1
 80019e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80019e8:	6809      	ldr	r1, [r1, #0]
 80019ea:	6048      	str	r0, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80019ee:	6800      	ldr	r0, [r0, #0]
 80019f0:	6a00      	ldr	r0, [r0, #32]
 80019f2:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80019f6:	9008      	str	r0, [sp, #32]
 80019f8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80019fa:	6840      	ldr	r0, [r0, #4]
 80019fc:	f248 61a0 	movw	r1, #34464	@ 0x86a0
 8001a00:	f2c0 0101 	movt	r1, #1
 8001a04:	4288      	cmp	r0, r1
 8001a06:	d804      	bhi.n	8001a12 <HAL_I2C_Init+0xfa>
 8001a08:	e7ff      	b.n	8001a0a <HAL_I2C_Init+0xf2>
 8001a0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8001a0c:	3001      	adds	r0, #1
 8001a0e:	9007      	str	r0, [sp, #28]
 8001a10:	e00e      	b.n	8001a30 <HAL_I2C_Init+0x118>
 8001a12:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8001a14:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001a18:	4348      	muls	r0, r1
 8001a1a:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 8001a1e:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 8001a22:	fba0 0101 	umull	r0, r1, r0, r1
 8001a26:	2001      	movs	r0, #1
 8001a28:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 8001a2c:	9007      	str	r0, [sp, #28]
 8001a2e:	e7ff      	b.n	8001a30 <HAL_I2C_Init+0x118>
 8001a30:	9808      	ldr	r0, [sp, #32]
 8001a32:	9907      	ldr	r1, [sp, #28]
 8001a34:	4308      	orrs	r0, r1
 8001a36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001a38:	6809      	ldr	r1, [r1, #0]
 8001a3a:	6208      	str	r0, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a3c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a3e:	6800      	ldr	r0, [r0, #0]
 8001a40:	69c0      	ldr	r0, [r0, #28]
 8001a42:	f64c 71ff 	movw	r1, #53247	@ 0xcfff
 8001a46:	4388      	bics	r0, r1
 8001a48:	9006      	str	r0, [sp, #24]
 8001a4a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a4c:	6840      	ldr	r0, [r0, #4]
 8001a4e:	f248 61a0 	movw	r1, #34464	@ 0x86a0
 8001a52:	f2c0 0101 	movt	r1, #1
 8001a56:	4288      	cmp	r0, r1
 8001a58:	d81f      	bhi.n	8001a9a <HAL_I2C_Init+0x182>
 8001a5a:	e7ff      	b.n	8001a5c <HAL_I2C_Init+0x144>
 8001a5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001a5e:	3801      	subs	r0, #1
 8001a60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001a62:	6849      	ldr	r1, [r1, #4]
 8001a64:	0049      	lsls	r1, r1, #1
 8001a66:	fbb0 f0f1 	udiv	r0, r0, r1
 8001a6a:	3001      	adds	r0, #1
 8001a6c:	f36f 301f 	bfc	r0, #12, #20
 8001a70:	2803      	cmp	r0, #3
 8001a72:	d803      	bhi.n	8001a7c <HAL_I2C_Init+0x164>
 8001a74:	e7ff      	b.n	8001a76 <HAL_I2C_Init+0x15e>
 8001a76:	2004      	movs	r0, #4
 8001a78:	9005      	str	r0, [sp, #20]
 8001a7a:	e00b      	b.n	8001a94 <HAL_I2C_Init+0x17c>
 8001a7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001a7e:	3801      	subs	r0, #1
 8001a80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001a82:	6849      	ldr	r1, [r1, #4]
 8001a84:	0049      	lsls	r1, r1, #1
 8001a86:	fbb0 f0f1 	udiv	r0, r0, r1
 8001a8a:	3001      	adds	r0, #1
 8001a8c:	f36f 301f 	bfc	r0, #12, #20
 8001a90:	9005      	str	r0, [sp, #20]
 8001a92:	e7ff      	b.n	8001a94 <HAL_I2C_Init+0x17c>
 8001a94:	9805      	ldr	r0, [sp, #20]
 8001a96:	9004      	str	r0, [sp, #16]
 8001a98:	e04c      	b.n	8001b34 <HAL_I2C_Init+0x21c>
 8001a9a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001a9c:	6880      	ldr	r0, [r0, #8]
 8001a9e:	b968      	cbnz	r0, 8001abc <HAL_I2C_Init+0x1a4>
 8001aa0:	e7ff      	b.n	8001aa2 <HAL_I2C_Init+0x18a>
 8001aa2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001aa4:	3801      	subs	r0, #1
 8001aa6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001aa8:	6849      	ldr	r1, [r1, #4]
 8001aaa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001aae:	fbb0 f0f1 	udiv	r0, r0, r1
 8001ab2:	3001      	adds	r0, #1
 8001ab4:	f36f 301f 	bfc	r0, #12, #20
 8001ab8:	9003      	str	r0, [sp, #12]
 8001aba:	e00d      	b.n	8001ad8 <HAL_I2C_Init+0x1c0>
 8001abc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001abe:	3801      	subs	r0, #1
 8001ac0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001ac2:	6849      	ldr	r1, [r1, #4]
 8001ac4:	2219      	movs	r2, #25
 8001ac6:	4351      	muls	r1, r2
 8001ac8:	fbb0 f0f1 	udiv	r0, r0, r1
 8001acc:	3001      	adds	r0, #1
 8001ace:	2104      	movs	r1, #4
 8001ad0:	f361 301f 	bfi	r0, r1, #12, #20
 8001ad4:	9003      	str	r0, [sp, #12]
 8001ad6:	e7ff      	b.n	8001ad8 <HAL_I2C_Init+0x1c0>
 8001ad8:	9803      	ldr	r0, [sp, #12]
 8001ada:	0500      	lsls	r0, r0, #20
 8001adc:	b918      	cbnz	r0, 8001ae6 <HAL_I2C_Init+0x1ce>
 8001ade:	e7ff      	b.n	8001ae0 <HAL_I2C_Init+0x1c8>
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	9002      	str	r0, [sp, #8]
 8001ae4:	e023      	b.n	8001b2e <HAL_I2C_Init+0x216>
 8001ae6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001ae8:	6880      	ldr	r0, [r0, #8]
 8001aea:	b968      	cbnz	r0, 8001b08 <HAL_I2C_Init+0x1f0>
 8001aec:	e7ff      	b.n	8001aee <HAL_I2C_Init+0x1d6>
 8001aee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001af0:	3801      	subs	r0, #1
 8001af2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001af4:	6849      	ldr	r1, [r1, #4]
 8001af6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001afa:	fbb0 f0f1 	udiv	r0, r0, r1
 8001afe:	3001      	adds	r0, #1
 8001b00:	f36f 301f 	bfc	r0, #12, #20
 8001b04:	9001      	str	r0, [sp, #4]
 8001b06:	e00d      	b.n	8001b24 <HAL_I2C_Init+0x20c>
 8001b08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001b0a:	3801      	subs	r0, #1
 8001b0c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b0e:	6849      	ldr	r1, [r1, #4]
 8001b10:	2219      	movs	r2, #25
 8001b12:	4351      	muls	r1, r2
 8001b14:	fbb0 f0f1 	udiv	r0, r0, r1
 8001b18:	3001      	adds	r0, #1
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	f361 301f 	bfi	r0, r1, #12, #20
 8001b20:	9001      	str	r0, [sp, #4]
 8001b22:	e7ff      	b.n	8001b24 <HAL_I2C_Init+0x20c>
 8001b24:	9801      	ldr	r0, [sp, #4]
 8001b26:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001b2a:	9002      	str	r0, [sp, #8]
 8001b2c:	e7ff      	b.n	8001b2e <HAL_I2C_Init+0x216>
 8001b2e:	9802      	ldr	r0, [sp, #8]
 8001b30:	9004      	str	r0, [sp, #16]
 8001b32:	e7ff      	b.n	8001b34 <HAL_I2C_Init+0x21c>
 8001b34:	9806      	ldr	r0, [sp, #24]
 8001b36:	9904      	ldr	r1, [sp, #16]
 8001b38:	4308      	orrs	r0, r1
 8001b3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b3c:	6809      	ldr	r1, [r1, #0]
 8001b3e:	61c8      	str	r0, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b40:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001b42:	6800      	ldr	r0, [r0, #0]
 8001b44:	6800      	ldr	r0, [r0, #0]
 8001b46:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8001b4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	69da      	ldr	r2, [r3, #28]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4310      	orrs	r0, r2
 8001b56:	6008      	str	r0, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b58:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	6880      	ldr	r0, [r0, #8]
 8001b5e:	f248 31ff 	movw	r1, #33791	@ 0x83ff
 8001b62:	4388      	bics	r0, r1
 8001b64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001b66:	6811      	ldr	r1, [r2, #0]
 8001b68:	68d3      	ldr	r3, [r2, #12]
 8001b6a:	6912      	ldr	r2, [r2, #16]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	4310      	orrs	r0, r2
 8001b70:	6088      	str	r0, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b72:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001b74:	6800      	ldr	r0, [r0, #0]
 8001b76:	68c0      	ldr	r0, [r0, #12]
 8001b78:	f020 00ff 	bic.w	r0, r0, #255	@ 0xff
 8001b7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001b7e:	6819      	ldr	r1, [r3, #0]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	4310      	orrs	r0, r2
 8001b88:	60c8      	str	r0, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b8a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001b8c:	6801      	ldr	r1, [r0, #0]
 8001b8e:	6808      	ldr	r0, [r1, #0]
 8001b90:	f040 0001 	orr.w	r0, r0, #1
 8001b94:	6008      	str	r0, [r1, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b96:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b98:	2000      	movs	r0, #0
 8001b9a:	6408      	str	r0, [r1, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ba4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001ba6:	6308      	str	r0, [r1, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001baa:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e

  return HAL_OK;
 8001bae:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 8001bb2:	e7ff      	b.n	8001bb4 <HAL_I2C_Init+0x29c>
}
 8001bb4:	f89d 0037 	ldrb.w	r0, [sp, #55]	@ 0x37
 8001bb8:	b00e      	add	sp, #56	@ 0x38
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bbc:	b510      	push	{r4, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	4684      	mov	ip, r0
 8001bc2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001bc4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8001bc6:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 8001bca:	f8cd c018 	str.w	ip, [sp, #24]
 8001bce:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001bd2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8001bd6:	f8ad 3012 	strh.w	r3, [sp, #18]
 8001bda:	f8ad 0010 	strh.w	r0, [sp, #16]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bde:	f7ff fe95 	bl	800190c <HAL_GetTick>
 8001be2:	9003      	str	r0, [sp, #12]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be4:	9806      	ldr	r0, [sp, #24]
 8001be6:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
 8001bea:	2820      	cmp	r0, #32
 8001bec:	f040 80e6 	bne.w	8001dbc <HAL_I2C_Mem_Write+0x200>
 8001bf0:	e7ff      	b.n	8001bf2 <HAL_I2C_Mem_Write+0x36>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf2:	9806      	ldr	r0, [sp, #24]
 8001bf4:	9903      	ldr	r1, [sp, #12]
 8001bf6:	466a      	mov	r2, sp
 8001bf8:	6011      	str	r1, [r2, #0]
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	f2c0 0110 	movt	r1, #16
 8001c00:	2201      	movs	r2, #1
 8001c02:	2319      	movs	r3, #25
 8001c04:	f002 fa7a 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8001c08:	b120      	cbz	r0, 8001c14 <HAL_I2C_Mem_Write+0x58>
 8001c0a:	e7ff      	b.n	8001c0c <HAL_I2C_Mem_Write+0x50>
 8001c0c:	2002      	movs	r0, #2
    {
      return HAL_BUSY;
 8001c0e:	f88d 001f 	strb.w	r0, [sp, #31]
 8001c12:	e0d7      	b.n	8001dc4 <HAL_I2C_Mem_Write+0x208>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c14:	e7ff      	b.n	8001c16 <HAL_I2C_Mem_Write+0x5a>
 8001c16:	9806      	ldr	r0, [sp, #24]
 8001c18:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8001c1c:	2801      	cmp	r0, #1
 8001c1e:	d104      	bne.n	8001c2a <HAL_I2C_Mem_Write+0x6e>
 8001c20:	e7ff      	b.n	8001c22 <HAL_I2C_Mem_Write+0x66>
 8001c22:	2002      	movs	r0, #2
 8001c24:	f88d 001f 	strb.w	r0, [sp, #31]
 8001c28:	e0cc      	b.n	8001dc4 <HAL_I2C_Mem_Write+0x208>
 8001c2a:	9906      	ldr	r1, [sp, #24]
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8001c32:	e7ff      	b.n	8001c34 <HAL_I2C_Mem_Write+0x78>
 8001c34:	e7ff      	b.n	8001c36 <HAL_I2C_Mem_Write+0x7a>

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c36:	9806      	ldr	r0, [sp, #24]
 8001c38:	6800      	ldr	r0, [r0, #0]
 8001c3a:	6800      	ldr	r0, [r0, #0]
 8001c3c:	07c0      	lsls	r0, r0, #31
 8001c3e:	b938      	cbnz	r0, 8001c50 <HAL_I2C_Mem_Write+0x94>
 8001c40:	e7ff      	b.n	8001c42 <HAL_I2C_Mem_Write+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c42:	9806      	ldr	r0, [sp, #24]
 8001c44:	6801      	ldr	r1, [r0, #0]
 8001c46:	6808      	ldr	r0, [r1, #0]
 8001c48:	f040 0001 	orr.w	r0, r0, #1
 8001c4c:	6008      	str	r0, [r1, #0]
    }
 8001c4e:	e7ff      	b.n	8001c50 <HAL_I2C_Mem_Write+0x94>

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c50:	9806      	ldr	r0, [sp, #24]
 8001c52:	6801      	ldr	r1, [r0, #0]
 8001c54:	6808      	ldr	r0, [r1, #0]
 8001c56:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 8001c5a:	6008      	str	r0, [r1, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c5c:	9906      	ldr	r1, [sp, #24]
 8001c5e:	2021      	movs	r0, #33	@ 0x21
 8001c60:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c64:	9906      	ldr	r1, [sp, #24]
 8001c66:	2040      	movs	r0, #64	@ 0x40
 8001c68:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	9906      	ldr	r1, [sp, #24]
 8001c6e:	2000      	movs	r0, #0
 8001c70:	6408      	str	r0, [r1, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001c74:	9906      	ldr	r1, [sp, #24]
 8001c76:	6248      	str	r0, [r1, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c78:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001c7c:	9906      	ldr	r1, [sp, #24]
 8001c7e:	8548      	strh	r0, [r1, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c80:	9806      	ldr	r0, [sp, #24]
 8001c82:	8d40      	ldrh	r0, [r0, #42]	@ 0x2a
 8001c84:	9906      	ldr	r1, [sp, #24]
 8001c86:	8508      	strh	r0, [r1, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c88:	9906      	ldr	r1, [sp, #24]
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8001c90:	62c8      	str	r0, [r1, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c92:	9806      	ldr	r0, [sp, #24]
 8001c94:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8001c98:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001c9c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8001ca0:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
 8001ca4:	9c03      	ldr	r4, [sp, #12]
 8001ca6:	46ee      	mov	lr, sp
 8001ca8:	f8ce 4004 	str.w	r4, [lr, #4]
 8001cac:	f8ce c000 	str.w	ip, [lr]
 8001cb0:	f002 f930 	bl	8003f14 <I2C_RequestMemoryWrite>
 8001cb4:	b120      	cbz	r0, 8001cc0 <HAL_I2C_Mem_Write+0x104>
 8001cb6:	e7ff      	b.n	8001cb8 <HAL_I2C_Mem_Write+0xfc>
 8001cb8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
 8001cba:	f88d 001f 	strb.w	r0, [sp, #31]
 8001cbe:	e081      	b.n	8001dc4 <HAL_I2C_Mem_Write+0x208>
    }

    while (hi2c->XferSize > 0U)
 8001cc0:	e7ff      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x106>
 8001cc2:	9806      	ldr	r0, [sp, #24]
 8001cc4:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	d049      	beq.n	8001d5e <HAL_I2C_Mem_Write+0x1a2>
 8001cca:	e7ff      	b.n	8001ccc <HAL_I2C_Mem_Write+0x110>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ccc:	9806      	ldr	r0, [sp, #24]
 8001cce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001cd0:	9a03      	ldr	r2, [sp, #12]
 8001cd2:	f002 fb41 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd6:	b180      	cbz	r0, 8001cfa <HAL_I2C_Mem_Write+0x13e>
 8001cd8:	e7ff      	b.n	8001cda <HAL_I2C_Mem_Write+0x11e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cda:	9806      	ldr	r0, [sp, #24]
 8001cdc:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8001cde:	2804      	cmp	r0, #4
 8001ce0:	d107      	bne.n	8001cf2 <HAL_I2C_Mem_Write+0x136>
 8001ce2:	e7ff      	b.n	8001ce4 <HAL_I2C_Mem_Write+0x128>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce4:	9806      	ldr	r0, [sp, #24]
 8001ce6:	6801      	ldr	r1, [r0, #0]
 8001ce8:	6808      	ldr	r0, [r1, #0]
 8001cea:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8001cee:	6008      	str	r0, [r1, #0]
        }
 8001cf0:	e7ff      	b.n	8001cf2 <HAL_I2C_Mem_Write+0x136>
 8001cf2:	2001      	movs	r0, #1
        return HAL_ERROR;
 8001cf4:	f88d 001f 	strb.w	r0, [sp, #31]
 8001cf8:	e064      	b.n	8001dc4 <HAL_I2C_Mem_Write+0x208>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cfa:	9806      	ldr	r0, [sp, #24]
 8001cfc:	6801      	ldr	r1, [r0, #0]
 8001cfe:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001d00:	7800      	ldrb	r0, [r0, #0]
 8001d02:	6108      	str	r0, [r1, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d04:	9906      	ldr	r1, [sp, #24]
 8001d06:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8001d08:	3001      	adds	r0, #1
 8001d0a:	6248      	str	r0, [r1, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d0c:	9906      	ldr	r1, [sp, #24]
 8001d0e:	8d08      	ldrh	r0, [r1, #40]	@ 0x28
 8001d10:	3801      	subs	r0, #1
 8001d12:	8508      	strh	r0, [r1, #40]	@ 0x28
      hi2c->XferCount--;
 8001d14:	9906      	ldr	r1, [sp, #24]
 8001d16:	8d48      	ldrh	r0, [r1, #42]	@ 0x2a
 8001d18:	3801      	subs	r0, #1
 8001d1a:	8548      	strh	r0, [r1, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d1c:	9806      	ldr	r0, [sp, #24]
 8001d1e:	6800      	ldr	r0, [r0, #0]
 8001d20:	6940      	ldr	r0, [r0, #20]
 8001d22:	f000 0104 	and.w	r1, r0, #4
 8001d26:	2001      	movs	r0, #1
 8001d28:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 8001d2c:	d116      	bne.n	8001d5c <HAL_I2C_Mem_Write+0x1a0>
 8001d2e:	e7ff      	b.n	8001d30 <HAL_I2C_Mem_Write+0x174>
 8001d30:	9806      	ldr	r0, [sp, #24]
 8001d32:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8001d34:	b190      	cbz	r0, 8001d5c <HAL_I2C_Mem_Write+0x1a0>
 8001d36:	e7ff      	b.n	8001d38 <HAL_I2C_Mem_Write+0x17c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d38:	9806      	ldr	r0, [sp, #24]
 8001d3a:	6801      	ldr	r1, [r0, #0]
 8001d3c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001d3e:	7800      	ldrb	r0, [r0, #0]
 8001d40:	6108      	str	r0, [r1, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d42:	9906      	ldr	r1, [sp, #24]
 8001d44:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8001d46:	3001      	adds	r0, #1
 8001d48:	6248      	str	r0, [r1, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d4a:	9906      	ldr	r1, [sp, #24]
 8001d4c:	8d08      	ldrh	r0, [r1, #40]	@ 0x28
 8001d4e:	3801      	subs	r0, #1
 8001d50:	8508      	strh	r0, [r1, #40]	@ 0x28
        hi2c->XferCount--;
 8001d52:	9906      	ldr	r1, [sp, #24]
 8001d54:	8d48      	ldrh	r0, [r1, #42]	@ 0x2a
 8001d56:	3801      	subs	r0, #1
 8001d58:	8548      	strh	r0, [r1, #42]	@ 0x2a
      }
 8001d5a:	e7ff      	b.n	8001d5c <HAL_I2C_Mem_Write+0x1a0>
    while (hi2c->XferSize > 0U)
 8001d5c:	e7b1      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x106>
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d5e:	9806      	ldr	r0, [sp, #24]
 8001d60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001d62:	9a03      	ldr	r2, [sp, #12]
 8001d64:	f002 f974 	bl	8004050 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d68:	b180      	cbz	r0, 8001d8c <HAL_I2C_Mem_Write+0x1d0>
 8001d6a:	e7ff      	b.n	8001d6c <HAL_I2C_Mem_Write+0x1b0>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d6c:	9806      	ldr	r0, [sp, #24]
 8001d6e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8001d70:	2804      	cmp	r0, #4
 8001d72:	d107      	bne.n	8001d84 <HAL_I2C_Mem_Write+0x1c8>
 8001d74:	e7ff      	b.n	8001d76 <HAL_I2C_Mem_Write+0x1ba>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d76:	9806      	ldr	r0, [sp, #24]
 8001d78:	6801      	ldr	r1, [r0, #0]
 8001d7a:	6808      	ldr	r0, [r1, #0]
 8001d7c:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8001d80:	6008      	str	r0, [r1, #0]
      }
 8001d82:	e7ff      	b.n	8001d84 <HAL_I2C_Mem_Write+0x1c8>
 8001d84:	2001      	movs	r0, #1
      return HAL_ERROR;
 8001d86:	f88d 001f 	strb.w	r0, [sp, #31]
 8001d8a:	e01b      	b.n	8001dc4 <HAL_I2C_Mem_Write+0x208>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8c:	9806      	ldr	r0, [sp, #24]
 8001d8e:	6801      	ldr	r1, [r0, #0]
 8001d90:	6808      	ldr	r0, [r1, #0]
 8001d92:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8001d96:	6008      	str	r0, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	9906      	ldr	r1, [sp, #24]
 8001d9a:	2020      	movs	r0, #32
 8001d9c:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	9906      	ldr	r1, [sp, #24]
 8001da2:	2000      	movs	r0, #0
 8001da4:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da8:	e7ff      	b.n	8001daa <HAL_I2C_Mem_Write+0x1ee>
 8001daa:	9906      	ldr	r1, [sp, #24]
 8001dac:	2000      	movs	r0, #0
 8001dae:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8001db2:	e7ff      	b.n	8001db4 <HAL_I2C_Mem_Write+0x1f8>
 8001db4:	2000      	movs	r0, #0

    return HAL_OK;
 8001db6:	f88d 001f 	strb.w	r0, [sp, #31]
 8001dba:	e003      	b.n	8001dc4 <HAL_I2C_Mem_Write+0x208>
 8001dbc:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
 8001dbe:	f88d 001f 	strb.w	r0, [sp, #31]
 8001dc2:	e7ff      	b.n	8001dc4 <HAL_I2C_Mem_Write+0x208>
  }
}
 8001dc4:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8001dc8:	b008      	add	sp, #32
 8001dca:	bd10      	pop	{r4, pc}

08001dcc <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	9007      	str	r0, [sp, #28]
 8001dd2:	2000      	movs	r0, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	9006      	str	r0, [sp, #24]
 8001dd6:	9005      	str	r0, [sp, #20]
 8001dd8:	9004      	str	r0, [sp, #16]
 8001dda:	9003      	str	r0, [sp, #12]
  if(i2cHandle->Instance==I2C2)
 8001ddc:	9807      	ldr	r0, [sp, #28]
 8001dde:	6800      	ldr	r0, [r0, #0]
 8001de0:	f645 0100 	movw	r1, #22528	@ 0x5800
 8001de4:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 8001de8:	4288      	cmp	r0, r1
 8001dea:	d12d      	bne.n	8001e48 <HAL_I2C_MspInit+0x7c>
 8001dec:	e7ff      	b.n	8001dee <HAL_I2C_MspInit+0x22>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	e7ff      	b.n	8001df0 <HAL_I2C_MspInit+0x24>
 8001df0:	f241 0018 	movw	r0, #4120	@ 0x1018
 8001df4:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001df8:	6801      	ldr	r1, [r0, #0]
 8001dfa:	f041 0108 	orr.w	r1, r1, #8
 8001dfe:	6001      	str	r1, [r0, #0]
 8001e00:	6800      	ldr	r0, [r0, #0]
 8001e02:	f000 0008 	and.w	r0, r0, #8
 8001e06:	9002      	str	r0, [sp, #8]
 8001e08:	9802      	ldr	r0, [sp, #8]
 8001e0a:	e7ff      	b.n	8001e0c <HAL_I2C_MspInit+0x40>
 8001e0c:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e10:	9003      	str	r0, [sp, #12]
 8001e12:	2012      	movs	r0, #18
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e14:	9004      	str	r0, [sp, #16]
 8001e16:	2003      	movs	r0, #3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e18:	9006      	str	r0, [sp, #24]
 8001e1a:	f640 4000 	movw	r0, #3072	@ 0xc00
 8001e1e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8001e22:	a903      	add	r1, sp, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f7ff fbca 	bl	80015bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e28:	e7ff      	b.n	8001e2a <HAL_I2C_MspInit+0x5e>
 8001e2a:	f241 001c 	movw	r0, #4124	@ 0x101c
 8001e2e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001e32:	6801      	ldr	r1, [r0, #0]
 8001e34:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8001e38:	6001      	str	r1, [r0, #0]
 8001e3a:	6800      	ldr	r0, [r0, #0]
 8001e3c:	f400 0080 	and.w	r0, r0, #4194304	@ 0x400000
 8001e40:	9001      	str	r0, [sp, #4]
 8001e42:	9801      	ldr	r0, [sp, #4]
 8001e44:	e7ff      	b.n	8001e46 <HAL_I2C_MspInit+0x7a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
 8001e46:	e7ff      	b.n	8001e48 <HAL_I2C_MspInit+0x7c>
}
 8001e48:	b008      	add	sp, #32
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_IncTick>:
  uwTick += uwTickFreq;
 8001e4c:	f240 202c 	movw	r0, #556	@ 0x22c
 8001e50:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001e54:	7802      	ldrb	r2, [r0, #0]
 8001e56:	f240 7148 	movw	r1, #1864	@ 0x748
 8001e5a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8001e5e:	6808      	ldr	r0, [r1, #0]
 8001e60:	4410      	add	r0, r2
 8001e62:	6008      	str	r0, [r1, #0]
}
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_Init>:
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	f242 0100 	movw	r1, #8192	@ 0x2000
 8001e6e:	f2c4 0102 	movt	r1, #16386	@ 0x4002
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e72:	6808      	ldr	r0, [r1, #0]
 8001e74:	f040 0010 	orr.w	r0, r0, #16
 8001e78:	6008      	str	r0, [r1, #0]
 8001e7a:	2003      	movs	r0, #3
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	f000 f896 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>
 8001e80:	200f      	movs	r0, #15
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e82:	f000 f805 	bl	8001e90 <HAL_InitTick>
  HAL_MspInit();
 8001e86:	f000 f83b 	bl	8001f00 <HAL_MspInit>
 8001e8a:	2000      	movs	r0, #0
  return HAL_OK;
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_InitTick>:
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	9000      	str	r0, [sp, #0]
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e96:	f240 2028 	movw	r0, #552	@ 0x228
 8001e9a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001e9e:	6800      	ldr	r0, [r0, #0]
 8001ea0:	f240 212c 	movw	r1, #556	@ 0x22c
 8001ea4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8001ea8:	780a      	ldrb	r2, [r1, #0]
 8001eaa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001eae:	fbb1 f1f2 	udiv	r1, r1, r2
 8001eb2:	fbb0 f0f1 	udiv	r0, r0, r1
 8001eb6:	f001 fa9d 	bl	80033f4 <HAL_SYSTICK_Config>
 8001eba:	b120      	cbz	r0, 8001ec6 <HAL_InitTick+0x36>
 8001ebc:	e7ff      	b.n	8001ebe <HAL_InitTick+0x2e>
 8001ebe:	2001      	movs	r0, #1
    return HAL_ERROR;
 8001ec0:	f88d 0007 	strb.w	r0, [sp, #7]
 8001ec4:	e018      	b.n	8001ef8 <HAL_InitTick+0x68>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec6:	9800      	ldr	r0, [sp, #0]
 8001ec8:	280f      	cmp	r0, #15
 8001eca:	d80d      	bhi.n	8001ee8 <HAL_InitTick+0x58>
 8001ecc:	e7ff      	b.n	8001ece <HAL_InitTick+0x3e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ece:	9900      	ldr	r1, [sp, #0]
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f000 f84f 	bl	8001f78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eda:	9800      	ldr	r0, [sp, #0]
 8001edc:	f240 2130 	movw	r1, #560	@ 0x230
 8001ee0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8001ee4:	6008      	str	r0, [r1, #0]
  }
 8001ee6:	e003      	b.n	8001ef0 <HAL_InitTick+0x60>
 8001ee8:	2001      	movs	r0, #1
    return HAL_ERROR;
 8001eea:	f88d 0007 	strb.w	r0, [sp, #7]
 8001eee:	e003      	b.n	8001ef8 <HAL_InitTick+0x68>
 8001ef0:	2000      	movs	r0, #0
  return HAL_OK;
 8001ef2:	f88d 0007 	strb.w	r0, [sp, #7]
 8001ef6:	e7ff      	b.n	8001ef8 <HAL_InitTick+0x68>
}
 8001ef8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001efc:	b002      	add	sp, #8
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f02:	e7ff      	b.n	8001f04 <HAL_MspInit+0x4>
 8001f04:	f241 0018 	movw	r0, #4120	@ 0x1018
 8001f08:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001f0c:	6801      	ldr	r1, [r0, #0]
 8001f0e:	f041 0101 	orr.w	r1, r1, #1
 8001f12:	6001      	str	r1, [r0, #0]
 8001f14:	6800      	ldr	r0, [r0, #0]
 8001f16:	f000 0001 	and.w	r0, r0, #1
 8001f1a:	9002      	str	r0, [sp, #8]
 8001f1c:	9802      	ldr	r0, [sp, #8]
 8001f1e:	e7ff      	b.n	8001f20 <HAL_MspInit+0x20>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f20:	e7ff      	b.n	8001f22 <HAL_MspInit+0x22>
 8001f22:	f241 001c 	movw	r0, #4124	@ 0x101c
 8001f26:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001f2a:	6801      	ldr	r1, [r0, #0]
 8001f2c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001f30:	6001      	str	r1, [r0, #0]
 8001f32:	6800      	ldr	r0, [r0, #0]
 8001f34:	f000 5080 	and.w	r0, r0, #268435456	@ 0x10000000
 8001f38:	9001      	str	r0, [sp, #4]
 8001f3a:	9801      	ldr	r0, [sp, #4]
 8001f3c:	e7ff      	b.n	8001f3e <HAL_MspInit+0x3e>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f3e:	e7ff      	b.n	8001f40 <HAL_MspInit+0x40>
 8001f40:	2104      	movs	r1, #4
 8001f42:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8001f46:	6808      	ldr	r0, [r1, #0]
 8001f48:	9000      	str	r0, [sp, #0]
 8001f4a:	9800      	ldr	r0, [sp, #0]
 8001f4c:	f020 60e0 	bic.w	r0, r0, #117440512	@ 0x7000000
 8001f50:	9000      	str	r0, [sp, #0]
 8001f52:	9800      	ldr	r0, [sp, #0]
 8001f54:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8001f58:	9000      	str	r0, [sp, #0]
 8001f5a:	9800      	ldr	r0, [sp, #0]
 8001f5c:	6008      	str	r0, [r1, #0]
 8001f5e:	e7ff      	b.n	8001f60 <HAL_MspInit+0x60>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f60:	b003      	add	sp, #12
 8001f62:	4770      	bx	lr

08001f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	f88d 0007 	strb.w	r0, [sp, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6c:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8001f70:	f003 fb5c 	bl	800562c <__NVIC_EnableIRQ>
}
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_NVIC_SetPriority>:
{ 
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	f88d 0017 	strb.w	r0, [sp, #23]
 8001f80:	9104      	str	r1, [sp, #16]
 8001f82:	9203      	str	r2, [sp, #12]
 8001f84:	2000      	movs	r0, #0
  uint32_t prioritygroup = 0x00U;
 8001f86:	9002      	str	r0, [sp, #8]
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f88:	f003 fb68 	bl	800565c <__NVIC_GetPriorityGrouping>
 8001f8c:	9002      	str	r0, [sp, #8]
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8e:	f99d 0017 	ldrsb.w	r0, [sp, #23]
 8001f92:	9001      	str	r0, [sp, #4]
 8001f94:	9802      	ldr	r0, [sp, #8]
 8001f96:	9904      	ldr	r1, [sp, #16]
 8001f98:	9a03      	ldr	r2, [sp, #12]
 8001f9a:	f002 fccf 	bl	800493c <NVIC_EncodePriority>
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	9801      	ldr	r0, [sp, #4]
 8001fa2:	f003 fb63 	bl	800566c <__NVIC_SetPriority>
}
 8001fa6:	b006      	add	sp, #24
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_NVIC_SetPriorityGrouping>:
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	9001      	str	r0, [sp, #4]
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb2:	9801      	ldr	r0, [sp, #4]
 8001fb4:	f003 fb7c 	bl	80056b0 <__NVIC_SetPriorityGrouping>
}
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	9002      	str	r0, [sp, #8]
 8001fc2:	9101      	str	r1, [sp, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc4:	9802      	ldr	r0, [sp, #8]
 8001fc6:	b920      	cbnz	r0, 8001fd2 <HAL_RCC_ClockConfig+0x16>
 8001fc8:	e7ff      	b.n	8001fca <HAL_RCC_ClockConfig+0xe>
 8001fca:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
 8001fcc:	f88d 000f 	strb.w	r0, [sp, #15]
 8001fd0:	e11b      	b.n	800220a <HAL_RCC_ClockConfig+0x24e>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd2:	9801      	ldr	r0, [sp, #4]
 8001fd4:	f242 0100 	movw	r1, #8192	@ 0x2000
 8001fd8:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 8001fdc:	6809      	ldr	r1, [r1, #0]
 8001fde:	f001 0107 	and.w	r1, r1, #7
 8001fe2:	4288      	cmp	r0, r1
 8001fe4:	d916      	bls.n	8002014 <HAL_RCC_ClockConfig+0x58>
 8001fe6:	e7ff      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x2c>
 8001fe8:	f242 0000 	movw	r0, #8192	@ 0x2000
 8001fec:	f2c4 0002 	movt	r0, #16386	@ 0x4002
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff0:	6801      	ldr	r1, [r0, #0]
 8001ff2:	f021 0107 	bic.w	r1, r1, #7
 8001ff6:	9a01      	ldr	r2, [sp, #4]
 8001ff8:	4311      	orrs	r1, r2
 8001ffa:	6001      	str	r1, [r0, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffc:	6800      	ldr	r0, [r0, #0]
 8001ffe:	f000 0007 	and.w	r0, r0, #7
 8002002:	9901      	ldr	r1, [sp, #4]
 8002004:	4288      	cmp	r0, r1
 8002006:	d004      	beq.n	8002012 <HAL_RCC_ClockConfig+0x56>
 8002008:	e7ff      	b.n	800200a <HAL_RCC_ClockConfig+0x4e>
 800200a:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
 800200c:	f88d 000f 	strb.w	r0, [sp, #15]
 8002010:	e0fb      	b.n	800220a <HAL_RCC_ClockConfig+0x24e>
  }
}
 8002012:	e7ff      	b.n	8002014 <HAL_RCC_ClockConfig+0x58>

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	9802      	ldr	r0, [sp, #8]
 8002016:	7800      	ldrb	r0, [r0, #0]
 8002018:	0780      	lsls	r0, r0, #30
 800201a:	2800      	cmp	r0, #0
 800201c:	d52a      	bpl.n	8002074 <HAL_RCC_ClockConfig+0xb8>
 800201e:	e7ff      	b.n	8002020 <HAL_RCC_ClockConfig+0x64>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	9802      	ldr	r0, [sp, #8]
 8002022:	7800      	ldrb	r0, [r0, #0]
 8002024:	0740      	lsls	r0, r0, #29
 8002026:	2800      	cmp	r0, #0
 8002028:	d509      	bpl.n	800203e <HAL_RCC_ClockConfig+0x82>
 800202a:	e7ff      	b.n	800202c <HAL_RCC_ClockConfig+0x70>
 800202c:	f241 0104 	movw	r1, #4100	@ 0x1004
 8002030:	f2c4 0102 	movt	r1, #16386	@ 0x4002
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	6808      	ldr	r0, [r1, #0]
 8002036:	f440 60e0 	orr.w	r0, r0, #1792	@ 0x700
 800203a:	6008      	str	r0, [r1, #0]
    }
 800203c:	e7ff      	b.n	800203e <HAL_RCC_ClockConfig+0x82>

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	9802      	ldr	r0, [sp, #8]
 8002040:	7800      	ldrb	r0, [r0, #0]
 8002042:	0700      	lsls	r0, r0, #28
 8002044:	2800      	cmp	r0, #0
 8002046:	d509      	bpl.n	800205c <HAL_RCC_ClockConfig+0xa0>
 8002048:	e7ff      	b.n	800204a <HAL_RCC_ClockConfig+0x8e>
 800204a:	f241 0104 	movw	r1, #4100	@ 0x1004
 800204e:	f2c4 0102 	movt	r1, #16386	@ 0x4002
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002052:	6808      	ldr	r0, [r1, #0]
 8002054:	f440 5060 	orr.w	r0, r0, #14336	@ 0x3800
 8002058:	6008      	str	r0, [r1, #0]
    }
 800205a:	e7ff      	b.n	800205c <HAL_RCC_ClockConfig+0xa0>
 800205c:	f241 0104 	movw	r1, #4100	@ 0x1004
 8002060:	f2c4 0102 	movt	r1, #16386	@ 0x4002

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002064:	6808      	ldr	r0, [r1, #0]
 8002066:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
 800206a:	9a02      	ldr	r2, [sp, #8]
 800206c:	6892      	ldr	r2, [r2, #8]
 800206e:	4310      	orrs	r0, r2
 8002070:	6008      	str	r0, [r1, #0]
  }
 8002072:	e7ff      	b.n	8002074 <HAL_RCC_ClockConfig+0xb8>

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002074:	9802      	ldr	r0, [sp, #8]
 8002076:	7800      	ldrb	r0, [r0, #0]
 8002078:	07c0      	lsls	r0, r0, #31
 800207a:	2800      	cmp	r0, #0
 800207c:	d060      	beq.n	8002140 <HAL_RCC_ClockConfig+0x184>
 800207e:	e7ff      	b.n	8002080 <HAL_RCC_ClockConfig+0xc4>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002080:	9802      	ldr	r0, [sp, #8]
 8002082:	6840      	ldr	r0, [r0, #4]
 8002084:	2801      	cmp	r0, #1
 8002086:	d10e      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xea>
 8002088:	e7ff      	b.n	800208a <HAL_RCC_ClockConfig+0xce>
 800208a:	f241 0000 	movw	r0, #4096	@ 0x1000
 800208e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	6800      	ldr	r0, [r0, #0]
 8002094:	0380      	lsls	r0, r0, #14
 8002096:	2800      	cmp	r0, #0
 8002098:	d404      	bmi.n	80020a4 <HAL_RCC_ClockConfig+0xe8>
 800209a:	e7ff      	b.n	800209c <HAL_RCC_ClockConfig+0xe0>
 800209c:	2001      	movs	r0, #1
      {
        return HAL_ERROR;
 800209e:	f88d 000f 	strb.w	r0, [sp, #15]
 80020a2:	e0b2      	b.n	800220a <HAL_RCC_ClockConfig+0x24e>
      }
    }
 80020a4:	e021      	b.n	80020ea <HAL_RCC_ClockConfig+0x12e>
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	9802      	ldr	r0, [sp, #8]
 80020a8:	6840      	ldr	r0, [r0, #4]
 80020aa:	2802      	cmp	r0, #2
 80020ac:	d10e      	bne.n	80020cc <HAL_RCC_ClockConfig+0x110>
 80020ae:	e7ff      	b.n	80020b0 <HAL_RCC_ClockConfig+0xf4>
 80020b0:	f241 0000 	movw	r0, #4096	@ 0x1000
 80020b4:	f2c4 0002 	movt	r0, #16386	@ 0x4002
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b8:	6800      	ldr	r0, [r0, #0]
 80020ba:	0180      	lsls	r0, r0, #6
 80020bc:	2800      	cmp	r0, #0
 80020be:	d404      	bmi.n	80020ca <HAL_RCC_ClockConfig+0x10e>
 80020c0:	e7ff      	b.n	80020c2 <HAL_RCC_ClockConfig+0x106>
 80020c2:	2001      	movs	r0, #1
      {
        return HAL_ERROR;
 80020c4:	f88d 000f 	strb.w	r0, [sp, #15]
 80020c8:	e09f      	b.n	800220a <HAL_RCC_ClockConfig+0x24e>
      }
    }
 80020ca:	e00d      	b.n	80020e8 <HAL_RCC_ClockConfig+0x12c>
 80020cc:	f241 0000 	movw	r0, #4096	@ 0x1000
 80020d0:	f2c4 0002 	movt	r0, #16386	@ 0x4002
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	6800      	ldr	r0, [r0, #0]
 80020d6:	0780      	lsls	r0, r0, #30
 80020d8:	2800      	cmp	r0, #0
 80020da:	d404      	bmi.n	80020e6 <HAL_RCC_ClockConfig+0x12a>
 80020dc:	e7ff      	b.n	80020de <HAL_RCC_ClockConfig+0x122>
 80020de:	2001      	movs	r0, #1
      {
        return HAL_ERROR;
 80020e0:	f88d 000f 	strb.w	r0, [sp, #15]
 80020e4:	e091      	b.n	800220a <HAL_RCC_ClockConfig+0x24e>
 80020e6:	e7ff      	b.n	80020e8 <HAL_RCC_ClockConfig+0x12c>
 80020e8:	e7ff      	b.n	80020ea <HAL_RCC_ClockConfig+0x12e>
 80020ea:	f241 0104 	movw	r1, #4100	@ 0x1004
 80020ee:	f2c4 0102 	movt	r1, #16386	@ 0x4002
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	6808      	ldr	r0, [r1, #0]
 80020f4:	f020 0003 	bic.w	r0, r0, #3
 80020f8:	9a02      	ldr	r2, [sp, #8]
 80020fa:	6852      	ldr	r2, [r2, #4]
 80020fc:	4310      	orrs	r0, r2
 80020fe:	6008      	str	r0, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff fc04 	bl	800190c <HAL_GetTick>
 8002104:	9000      	str	r0, [sp, #0]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e7ff      	b.n	8002108 <HAL_RCC_ClockConfig+0x14c>
 8002108:	f241 0004 	movw	r0, #4100	@ 0x1004
 800210c:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002110:	6800      	ldr	r0, [r0, #0]
 8002112:	f000 000c 	and.w	r0, r0, #12
 8002116:	9902      	ldr	r1, [sp, #8]
 8002118:	6849      	ldr	r1, [r1, #4]
 800211a:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 800211e:	d00e      	beq.n	800213e <HAL_RCC_ClockConfig+0x182>
 8002120:	e7ff      	b.n	8002122 <HAL_RCC_ClockConfig+0x166>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002122:	f7ff fbf3 	bl	800190c <HAL_GetTick>
 8002126:	9900      	ldr	r1, [sp, #0]
 8002128:	1a40      	subs	r0, r0, r1
 800212a:	f241 3189 	movw	r1, #5001	@ 0x1389
 800212e:	4288      	cmp	r0, r1
 8002130:	d304      	bcc.n	800213c <HAL_RCC_ClockConfig+0x180>
 8002132:	e7ff      	b.n	8002134 <HAL_RCC_ClockConfig+0x178>
 8002134:	2003      	movs	r0, #3
      {
        return HAL_TIMEOUT;
 8002136:	f88d 000f 	strb.w	r0, [sp, #15]
 800213a:	e066      	b.n	800220a <HAL_RCC_ClockConfig+0x24e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213c:	e7e4      	b.n	8002108 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }
 800213e:	e7ff      	b.n	8002140 <HAL_RCC_ClockConfig+0x184>

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	9801      	ldr	r0, [sp, #4]
 8002142:	f242 0100 	movw	r1, #8192	@ 0x2000
 8002146:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 800214a:	6809      	ldr	r1, [r1, #0]
 800214c:	f001 0107 	and.w	r1, r1, #7
 8002150:	4288      	cmp	r0, r1
 8002152:	d216      	bcs.n	8002182 <HAL_RCC_ClockConfig+0x1c6>
 8002154:	e7ff      	b.n	8002156 <HAL_RCC_ClockConfig+0x19a>
 8002156:	f242 0000 	movw	r0, #8192	@ 0x2000
 800215a:	f2c4 0002 	movt	r0, #16386	@ 0x4002
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	6801      	ldr	r1, [r0, #0]
 8002160:	f021 0107 	bic.w	r1, r1, #7
 8002164:	9a01      	ldr	r2, [sp, #4]
 8002166:	4311      	orrs	r1, r2
 8002168:	6001      	str	r1, [r0, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	6800      	ldr	r0, [r0, #0]
 800216c:	f000 0007 	and.w	r0, r0, #7
 8002170:	9901      	ldr	r1, [sp, #4]
 8002172:	4288      	cmp	r0, r1
 8002174:	d004      	beq.n	8002180 <HAL_RCC_ClockConfig+0x1c4>
 8002176:	e7ff      	b.n	8002178 <HAL_RCC_ClockConfig+0x1bc>
 8002178:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
 800217a:	f88d 000f 	strb.w	r0, [sp, #15]
 800217e:	e044      	b.n	800220a <HAL_RCC_ClockConfig+0x24e>
  }
}
 8002180:	e7ff      	b.n	8002182 <HAL_RCC_ClockConfig+0x1c6>
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002182:	9802      	ldr	r0, [sp, #8]
 8002184:	7800      	ldrb	r0, [r0, #0]
 8002186:	0740      	lsls	r0, r0, #29
 8002188:	2800      	cmp	r0, #0
 800218a:	d50c      	bpl.n	80021a6 <HAL_RCC_ClockConfig+0x1ea>
 800218c:	e7ff      	b.n	800218e <HAL_RCC_ClockConfig+0x1d2>
 800218e:	f241 0104 	movw	r1, #4100	@ 0x1004
 8002192:	f2c4 0102 	movt	r1, #16386	@ 0x4002
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002196:	6808      	ldr	r0, [r1, #0]
 8002198:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 800219c:	9a02      	ldr	r2, [sp, #8]
 800219e:	68d2      	ldr	r2, [r2, #12]
 80021a0:	4310      	orrs	r0, r2
 80021a2:	6008      	str	r0, [r1, #0]
  }
 80021a4:	e7ff      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ea>

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	9802      	ldr	r0, [sp, #8]
 80021a8:	7800      	ldrb	r0, [r0, #0]
 80021aa:	0700      	lsls	r0, r0, #28
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d50d      	bpl.n	80021cc <HAL_RCC_ClockConfig+0x210>
 80021b0:	e7ff      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1f6>
 80021b2:	f241 0104 	movw	r1, #4100	@ 0x1004
 80021b6:	f2c4 0102 	movt	r1, #16386	@ 0x4002
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ba:	6808      	ldr	r0, [r1, #0]
 80021bc:	f420 5060 	bic.w	r0, r0, #14336	@ 0x3800
 80021c0:	9a02      	ldr	r2, [sp, #8]
 80021c2:	6912      	ldr	r2, [r2, #16]
 80021c4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80021c8:	6008      	str	r0, [r1, #0]
  }
 80021ca:	e7ff      	b.n	80021cc <HAL_RCC_ClockConfig+0x210>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021cc:	f000 f83a 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80021d0:	f241 0104 	movw	r1, #4100	@ 0x1004
 80021d4:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 80021d8:	6809      	ldr	r1, [r1, #0]
 80021da:	b2c9      	uxtb	r1, r1
 80021dc:	090a      	lsrs	r2, r1, #4
 80021de:	f246 1188 	movw	r1, #24968	@ 0x6188
 80021e2:	f6c0 0100 	movt	r1, #2048	@ 0x800
 80021e6:	5c89      	ldrb	r1, [r1, r2]
 80021e8:	40c8      	lsrs	r0, r1
 80021ea:	f240 2128 	movw	r1, #552	@ 0x228
 80021ee:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80021f2:	6008      	str	r0, [r1, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021f4:	f240 2030 	movw	r0, #560	@ 0x230
 80021f8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80021fc:	6800      	ldr	r0, [r0, #0]
 80021fe:	f7ff fe47 	bl	8001e90 <HAL_InitTick>
 8002202:	2000      	movs	r0, #0

  return HAL_OK;
 8002204:	f88d 000f 	strb.w	r0, [sp, #15]
 8002208:	e7ff      	b.n	800220a <HAL_RCC_ClockConfig+0x24e>
}
 800220a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800220e:	b004      	add	sp, #16
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002214:	f240 2028 	movw	r0, #552	@ 0x228
 8002218:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800221c:	6800      	ldr	r0, [r0, #0]
 800221e:	4770      	bx	lr

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002222:	f7ff fff7 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002226:	f241 0104 	movw	r1, #4100	@ 0x1004
 800222a:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 800222e:	6809      	ldr	r1, [r1, #0]
 8002230:	f3c1 2202 	ubfx	r2, r1, #8, #3
 8002234:	f246 1198 	movw	r1, #24984	@ 0x6198
 8002238:	f6c0 0100 	movt	r1, #2048	@ 0x800
 800223c:	5c89      	ldrb	r1, [r1, r2]
 800223e:	40c8      	lsrs	r0, r1
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_RCC_GetSysClockFreq>:
{
 8002244:	b086      	sub	sp, #24
 8002246:	2000      	movs	r0, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002248:	9005      	str	r0, [sp, #20]
 800224a:	9004      	str	r0, [sp, #16]
 800224c:	9003      	str	r0, [sp, #12]
 800224e:	9002      	str	r0, [sp, #8]
  uint32_t sysclockfreq = 0U;
 8002250:	9001      	str	r0, [sp, #4]
 8002252:	f241 0004 	movw	r0, #4100	@ 0x1004
 8002256:	f2c4 0002 	movt	r0, #16386	@ 0x4002
  tmpreg = RCC->CFGR;
 800225a:	6800      	ldr	r0, [r0, #0]
 800225c:	9005      	str	r0, [sp, #20]
  switch (tmpreg & RCC_CFGR_SWS)
 800225e:	9805      	ldr	r0, [sp, #20]
 8002260:	f000 000c 	and.w	r0, r0, #12
 8002264:	4601      	mov	r1, r0
 8002266:	9100      	str	r1, [sp, #0]
 8002268:	2800      	cmp	r0, #0
 800226a:	d03f      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0xa8>
 800226c:	e7ff      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x2a>
 800226e:	9800      	ldr	r0, [sp, #0]
 8002270:	2804      	cmp	r0, #4
 8002272:	d004      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0x3a>
 8002274:	e7ff      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x32>
 8002276:	9800      	ldr	r0, [sp, #0]
 8002278:	2808      	cmp	r0, #8
 800227a:	d006      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0x46>
 800227c:	e037      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0xaa>
 800227e:	f241 2000 	movw	r0, #4608	@ 0x1200
 8002282:	f2c0 007a 	movt	r0, #122	@ 0x7a
      sysclockfreq = HSE_VALUE;
 8002286:	9001      	str	r0, [sp, #4]
      break;
 8002288:	e037      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xb6>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800228a:	9805      	ldr	r0, [sp, #20]
 800228c:	f3c0 4183 	ubfx	r1, r0, #18, #4
 8002290:	f246 10a0 	movw	r0, #24992	@ 0x61a0
 8002294:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8002298:	5c40      	ldrb	r0, [r0, r1]
 800229a:	9002      	str	r0, [sp, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800229c:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80022a0:	07c0      	lsls	r0, r0, #31
 80022a2:	b1c0      	cbz	r0, 80022d6 <HAL_RCC_GetSysClockFreq+0x92>
 80022a4:	e7ff      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x62>
 80022a6:	f241 0004 	movw	r0, #4100	@ 0x1004
 80022aa:	f2c4 0002 	movt	r0, #16386	@ 0x4002
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ae:	6800      	ldr	r0, [r0, #0]
 80022b0:	f3c0 4140 	ubfx	r1, r0, #17, #1
 80022b4:	f246 10b0 	movw	r0, #25008	@ 0x61b0
 80022b8:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80022bc:	5c40      	ldrb	r0, [r0, r1]
 80022be:	9004      	str	r0, [sp, #16]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022c0:	9802      	ldr	r0, [sp, #8]
 80022c2:	f241 2100 	movw	r1, #4608	@ 0x1200
 80022c6:	f2c0 017a 	movt	r1, #122	@ 0x7a
 80022ca:	4348      	muls	r0, r1
 80022cc:	9904      	ldr	r1, [sp, #16]
 80022ce:	fbb0 f0f1 	udiv	r0, r0, r1
 80022d2:	9003      	str	r0, [sp, #12]
      }
 80022d4:	e007      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0xa2>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d6:	9802      	ldr	r0, [sp, #8]
 80022d8:	f640 1100 	movw	r1, #2304	@ 0x900
 80022dc:	f2c0 013d 	movt	r1, #61	@ 0x3d
 80022e0:	4348      	muls	r0, r1
 80022e2:	9003      	str	r0, [sp, #12]
 80022e4:	e7ff      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0xa2>
      sysclockfreq = pllclk;
 80022e6:	9803      	ldr	r0, [sp, #12]
 80022e8:	9001      	str	r0, [sp, #4]
      break;
 80022ea:	e006      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xb6>
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
 80022ec:	e7ff      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0xaa>
 80022ee:	f241 2000 	movw	r0, #4608	@ 0x1200
 80022f2:	f2c0 007a 	movt	r0, #122	@ 0x7a
      sysclockfreq = HSI_VALUE;
 80022f6:	9001      	str	r0, [sp, #4]
      break;
 80022f8:	e7ff      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xb6>
  return sysclockfreq;
 80022fa:	9801      	ldr	r0, [sp, #4]
 80022fc:	b006      	add	sp, #24
 80022fe:	4770      	bx	lr

08002300 <HAL_RCC_OscConfig>:
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	9004      	str	r0, [sp, #16]
  if (RCC_OscInitStruct == NULL)
 8002306:	9804      	ldr	r0, [sp, #16]
 8002308:	b920      	cbnz	r0, 8002314 <HAL_RCC_OscConfig+0x14>
 800230a:	e7ff      	b.n	800230c <HAL_RCC_OscConfig+0xc>
 800230c:	2001      	movs	r0, #1
    return HAL_ERROR;
 800230e:	f88d 0017 	strb.w	r0, [sp, #23]
 8002312:	e32e      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002314:	9804      	ldr	r0, [sp, #16]
 8002316:	7800      	ldrb	r0, [r0, #0]
 8002318:	07c0      	lsls	r0, r0, #31
 800231a:	2800      	cmp	r0, #0
 800231c:	f000 80ae 	beq.w	800247c <HAL_RCC_OscConfig+0x17c>
 8002320:	e7ff      	b.n	8002322 <HAL_RCC_OscConfig+0x22>
 8002322:	f241 0004 	movw	r0, #4100	@ 0x1004
 8002326:	f2c4 0002 	movt	r0, #16386	@ 0x4002
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800232a:	6800      	ldr	r0, [r0, #0]
 800232c:	f000 000c 	and.w	r0, r0, #12
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002330:	2804      	cmp	r0, #4
 8002332:	d013      	beq.n	800235c <HAL_RCC_OscConfig+0x5c>
 8002334:	e7ff      	b.n	8002336 <HAL_RCC_OscConfig+0x36>
 8002336:	f241 0004 	movw	r0, #4100	@ 0x1004
 800233a:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800233e:	6800      	ldr	r0, [r0, #0]
 8002340:	f000 000c 	and.w	r0, r0, #12
 8002344:	2808      	cmp	r0, #8
 8002346:	d11b      	bne.n	8002380 <HAL_RCC_OscConfig+0x80>
 8002348:	e7ff      	b.n	800234a <HAL_RCC_OscConfig+0x4a>
 800234a:	f241 0004 	movw	r0, #4100	@ 0x1004
 800234e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002352:	6800      	ldr	r0, [r0, #0]
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002354:	03c0      	lsls	r0, r0, #15
 8002356:	2800      	cmp	r0, #0
 8002358:	d512      	bpl.n	8002380 <HAL_RCC_OscConfig+0x80>
 800235a:	e7ff      	b.n	800235c <HAL_RCC_OscConfig+0x5c>
 800235c:	f241 0000 	movw	r0, #4096	@ 0x1000
 8002360:	f2c4 0002 	movt	r0, #16386	@ 0x4002
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	6800      	ldr	r0, [r0, #0]
 8002366:	0380      	lsls	r0, r0, #14
 8002368:	2800      	cmp	r0, #0
 800236a:	d508      	bpl.n	800237e <HAL_RCC_OscConfig+0x7e>
 800236c:	e7ff      	b.n	800236e <HAL_RCC_OscConfig+0x6e>
 800236e:	9804      	ldr	r0, [sp, #16]
 8002370:	6840      	ldr	r0, [r0, #4]
 8002372:	b920      	cbnz	r0, 800237e <HAL_RCC_OscConfig+0x7e>
 8002374:	e7ff      	b.n	8002376 <HAL_RCC_OscConfig+0x76>
 8002376:	2001      	movs	r0, #1
        return HAL_ERROR;
 8002378:	f88d 0017 	strb.w	r0, [sp, #23]
 800237c:	e2f9      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
    }
 800237e:	e07c      	b.n	800247a <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	e7ff      	b.n	8002382 <HAL_RCC_OscConfig+0x82>
 8002382:	9804      	ldr	r0, [sp, #16]
 8002384:	6840      	ldr	r0, [r0, #4]
 8002386:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800238a:	d109      	bne.n	80023a0 <HAL_RCC_OscConfig+0xa0>
 800238c:	e7ff      	b.n	800238e <HAL_RCC_OscConfig+0x8e>
 800238e:	f241 0100 	movw	r1, #4096	@ 0x1000
 8002392:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 8002396:	6808      	ldr	r0, [r1, #0]
 8002398:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800239c:	6008      	str	r0, [r1, #0]
 800239e:	e032      	b.n	8002406 <HAL_RCC_OscConfig+0x106>
 80023a0:	9804      	ldr	r0, [sp, #16]
 80023a2:	6840      	ldr	r0, [r0, #4]
 80023a4:	b968      	cbnz	r0, 80023c2 <HAL_RCC_OscConfig+0xc2>
 80023a6:	e7ff      	b.n	80023a8 <HAL_RCC_OscConfig+0xa8>
 80023a8:	f241 0100 	movw	r1, #4096	@ 0x1000
 80023ac:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 80023b0:	6808      	ldr	r0, [r1, #0]
 80023b2:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80023b6:	6008      	str	r0, [r1, #0]
 80023b8:	6808      	ldr	r0, [r1, #0]
 80023ba:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 80023be:	6008      	str	r0, [r1, #0]
 80023c0:	e020      	b.n	8002404 <HAL_RCC_OscConfig+0x104>
 80023c2:	9804      	ldr	r0, [sp, #16]
 80023c4:	6840      	ldr	r0, [r0, #4]
 80023c6:	f5b0 2fa0 	cmp.w	r0, #327680	@ 0x50000
 80023ca:	d10d      	bne.n	80023e8 <HAL_RCC_OscConfig+0xe8>
 80023cc:	e7ff      	b.n	80023ce <HAL_RCC_OscConfig+0xce>
 80023ce:	f241 0100 	movw	r1, #4096	@ 0x1000
 80023d2:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 80023d6:	6808      	ldr	r0, [r1, #0]
 80023d8:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 80023dc:	6008      	str	r0, [r1, #0]
 80023de:	6808      	ldr	r0, [r1, #0]
 80023e0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80023e4:	6008      	str	r0, [r1, #0]
 80023e6:	e00c      	b.n	8002402 <HAL_RCC_OscConfig+0x102>
 80023e8:	f241 0100 	movw	r1, #4096	@ 0x1000
 80023ec:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 80023f0:	6808      	ldr	r0, [r1, #0]
 80023f2:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80023f6:	6008      	str	r0, [r1, #0]
 80023f8:	6808      	ldr	r0, [r1, #0]
 80023fa:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 80023fe:	6008      	str	r0, [r1, #0]
 8002400:	e7ff      	b.n	8002402 <HAL_RCC_OscConfig+0x102>
 8002402:	e7ff      	b.n	8002404 <HAL_RCC_OscConfig+0x104>
 8002404:	e7ff      	b.n	8002406 <HAL_RCC_OscConfig+0x106>
 8002406:	e7ff      	b.n	8002408 <HAL_RCC_OscConfig+0x108>
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002408:	9804      	ldr	r0, [sp, #16]
 800240a:	6840      	ldr	r0, [r0, #4]
 800240c:	b1d0      	cbz	r0, 8002444 <HAL_RCC_OscConfig+0x144>
 800240e:	e7ff      	b.n	8002410 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002410:	f7ff fa7c 	bl	800190c <HAL_GetTick>
 8002414:	9003      	str	r0, [sp, #12]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	e7ff      	b.n	8002418 <HAL_RCC_OscConfig+0x118>
 8002418:	f241 0000 	movw	r0, #4096	@ 0x1000
 800241c:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002420:	6800      	ldr	r0, [r0, #0]
 8002422:	0380      	lsls	r0, r0, #14
 8002424:	2800      	cmp	r0, #0
 8002426:	d40c      	bmi.n	8002442 <HAL_RCC_OscConfig+0x142>
 8002428:	e7ff      	b.n	800242a <HAL_RCC_OscConfig+0x12a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242a:	f7ff fa6f 	bl	800190c <HAL_GetTick>
 800242e:	9903      	ldr	r1, [sp, #12]
 8002430:	1a40      	subs	r0, r0, r1
 8002432:	2865      	cmp	r0, #101	@ 0x65
 8002434:	d304      	bcc.n	8002440 <HAL_RCC_OscConfig+0x140>
 8002436:	e7ff      	b.n	8002438 <HAL_RCC_OscConfig+0x138>
 8002438:	2003      	movs	r0, #3
            return HAL_TIMEOUT;
 800243a:	f88d 0017 	strb.w	r0, [sp, #23]
 800243e:	e298      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002440:	e7ea      	b.n	8002418 <HAL_RCC_OscConfig+0x118>
      }
 8002442:	e019      	b.n	8002478 <HAL_RCC_OscConfig+0x178>
        tickstart = HAL_GetTick();
 8002444:	f7ff fa62 	bl	800190c <HAL_GetTick>
 8002448:	9003      	str	r0, [sp, #12]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e7ff      	b.n	800244c <HAL_RCC_OscConfig+0x14c>
 800244c:	f241 0000 	movw	r0, #4096	@ 0x1000
 8002450:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002454:	6800      	ldr	r0, [r0, #0]
 8002456:	0380      	lsls	r0, r0, #14
 8002458:	2800      	cmp	r0, #0
 800245a:	d50c      	bpl.n	8002476 <HAL_RCC_OscConfig+0x176>
 800245c:	e7ff      	b.n	800245e <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245e:	f7ff fa55 	bl	800190c <HAL_GetTick>
 8002462:	9903      	ldr	r1, [sp, #12]
 8002464:	1a40      	subs	r0, r0, r1
 8002466:	2865      	cmp	r0, #101	@ 0x65
 8002468:	d304      	bcc.n	8002474 <HAL_RCC_OscConfig+0x174>
 800246a:	e7ff      	b.n	800246c <HAL_RCC_OscConfig+0x16c>
 800246c:	2003      	movs	r0, #3
            return HAL_TIMEOUT;
 800246e:	f88d 0017 	strb.w	r0, [sp, #23]
 8002472:	e27e      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002474:	e7ea      	b.n	800244c <HAL_RCC_OscConfig+0x14c>
 8002476:	e7ff      	b.n	8002478 <HAL_RCC_OscConfig+0x178>
 8002478:	e7ff      	b.n	800247a <HAL_RCC_OscConfig+0x17a>
  }
 800247a:	e7ff      	b.n	800247c <HAL_RCC_OscConfig+0x17c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247c:	9804      	ldr	r0, [sp, #16]
 800247e:	7800      	ldrb	r0, [r0, #0]
 8002480:	0780      	lsls	r0, r0, #30
 8002482:	2800      	cmp	r0, #0
 8002484:	f140 808d 	bpl.w	80025a2 <HAL_RCC_OscConfig+0x2a2>
 8002488:	e7ff      	b.n	800248a <HAL_RCC_OscConfig+0x18a>
 800248a:	f241 0004 	movw	r0, #4100	@ 0x1004
 800248e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002492:	6800      	ldr	r0, [r0, #0]
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002494:	f010 0f0c 	tst.w	r0, #12
 8002498:	d013      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1c2>
 800249a:	e7ff      	b.n	800249c <HAL_RCC_OscConfig+0x19c>
 800249c:	f241 0004 	movw	r0, #4100	@ 0x1004
 80024a0:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80024a4:	6800      	ldr	r0, [r0, #0]
 80024a6:	f000 000c 	and.w	r0, r0, #12
 80024aa:	2808      	cmp	r0, #8
 80024ac:	d129      	bne.n	8002502 <HAL_RCC_OscConfig+0x202>
 80024ae:	e7ff      	b.n	80024b0 <HAL_RCC_OscConfig+0x1b0>
 80024b0:	f241 0004 	movw	r0, #4100	@ 0x1004
 80024b4:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80024b8:	6800      	ldr	r0, [r0, #0]
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ba:	03c0      	lsls	r0, r0, #15
 80024bc:	2800      	cmp	r0, #0
 80024be:	d420      	bmi.n	8002502 <HAL_RCC_OscConfig+0x202>
 80024c0:	e7ff      	b.n	80024c2 <HAL_RCC_OscConfig+0x1c2>
 80024c2:	f241 0000 	movw	r0, #4096	@ 0x1000
 80024c6:	f2c4 0002 	movt	r0, #16386	@ 0x4002
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	6800      	ldr	r0, [r0, #0]
 80024cc:	0780      	lsls	r0, r0, #30
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d509      	bpl.n	80024e6 <HAL_RCC_OscConfig+0x1e6>
 80024d2:	e7ff      	b.n	80024d4 <HAL_RCC_OscConfig+0x1d4>
 80024d4:	9804      	ldr	r0, [sp, #16]
 80024d6:	6900      	ldr	r0, [r0, #16]
 80024d8:	2801      	cmp	r0, #1
 80024da:	d004      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1e6>
 80024dc:	e7ff      	b.n	80024de <HAL_RCC_OscConfig+0x1de>
 80024de:	2001      	movs	r0, #1
        return HAL_ERROR;
 80024e0:	f88d 0017 	strb.w	r0, [sp, #23]
 80024e4:	e245      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
 80024e6:	f241 0100 	movw	r1, #4096	@ 0x1000
 80024ea:	f2c4 0102 	movt	r1, #16386	@ 0x4002
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	6808      	ldr	r0, [r1, #0]
 80024f0:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 80024f4:	9a04      	ldr	r2, [sp, #16]
 80024f6:	6952      	ldr	r2, [r2, #20]
 80024f8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80024fc:	6008      	str	r0, [r1, #0]
 80024fe:	e7ff      	b.n	8002500 <HAL_RCC_OscConfig+0x200>
    }
 8002500:	e04e      	b.n	80025a0 <HAL_RCC_OscConfig+0x2a0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002502:	9804      	ldr	r0, [sp, #16]
 8002504:	6900      	ldr	r0, [r0, #16]
 8002506:	b358      	cbz	r0, 8002560 <HAL_RCC_OscConfig+0x260>
 8002508:	e7ff      	b.n	800250a <HAL_RCC_OscConfig+0x20a>
 800250a:	2100      	movs	r1, #0
 800250c:	f2c4 2142 	movt	r1, #16962	@ 0x4242
 8002510:	2001      	movs	r0, #1
        __HAL_RCC_HSI_ENABLE();
 8002512:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8002514:	f7ff f9fa 	bl	800190c <HAL_GetTick>
 8002518:	9003      	str	r0, [sp, #12]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	e7ff      	b.n	800251c <HAL_RCC_OscConfig+0x21c>
 800251c:	f241 0000 	movw	r0, #4096	@ 0x1000
 8002520:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002524:	6800      	ldr	r0, [r0, #0]
 8002526:	0780      	lsls	r0, r0, #30
 8002528:	2800      	cmp	r0, #0
 800252a:	d40c      	bmi.n	8002546 <HAL_RCC_OscConfig+0x246>
 800252c:	e7ff      	b.n	800252e <HAL_RCC_OscConfig+0x22e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7ff f9ed 	bl	800190c <HAL_GetTick>
 8002532:	9903      	ldr	r1, [sp, #12]
 8002534:	1a40      	subs	r0, r0, r1
 8002536:	2803      	cmp	r0, #3
 8002538:	d304      	bcc.n	8002544 <HAL_RCC_OscConfig+0x244>
 800253a:	e7ff      	b.n	800253c <HAL_RCC_OscConfig+0x23c>
 800253c:	2003      	movs	r0, #3
            return HAL_TIMEOUT;
 800253e:	f88d 0017 	strb.w	r0, [sp, #23]
 8002542:	e216      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	e7ea      	b.n	800251c <HAL_RCC_OscConfig+0x21c>
 8002546:	f241 0100 	movw	r1, #4096	@ 0x1000
 800254a:	f2c4 0102 	movt	r1, #16386	@ 0x4002
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	6808      	ldr	r0, [r1, #0]
 8002550:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 8002554:	9a04      	ldr	r2, [sp, #16]
 8002556:	6952      	ldr	r2, [r2, #20]
 8002558:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 800255c:	6008      	str	r0, [r1, #0]
      }
 800255e:	e01e      	b.n	800259e <HAL_RCC_OscConfig+0x29e>
 8002560:	2100      	movs	r1, #0
 8002562:	f2c4 2142 	movt	r1, #16962	@ 0x4242
 8002566:	2000      	movs	r0, #0
        __HAL_RCC_HSI_DISABLE();
 8002568:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 800256a:	f7ff f9cf 	bl	800190c <HAL_GetTick>
 800256e:	9003      	str	r0, [sp, #12]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002570:	e7ff      	b.n	8002572 <HAL_RCC_OscConfig+0x272>
 8002572:	f241 0000 	movw	r0, #4096	@ 0x1000
 8002576:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800257a:	6800      	ldr	r0, [r0, #0]
 800257c:	0780      	lsls	r0, r0, #30
 800257e:	2800      	cmp	r0, #0
 8002580:	d50c      	bpl.n	800259c <HAL_RCC_OscConfig+0x29c>
 8002582:	e7ff      	b.n	8002584 <HAL_RCC_OscConfig+0x284>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002584:	f7ff f9c2 	bl	800190c <HAL_GetTick>
 8002588:	9903      	ldr	r1, [sp, #12]
 800258a:	1a40      	subs	r0, r0, r1
 800258c:	2803      	cmp	r0, #3
 800258e:	d304      	bcc.n	800259a <HAL_RCC_OscConfig+0x29a>
 8002590:	e7ff      	b.n	8002592 <HAL_RCC_OscConfig+0x292>
 8002592:	2003      	movs	r0, #3
            return HAL_TIMEOUT;
 8002594:	f88d 0017 	strb.w	r0, [sp, #23]
 8002598:	e1eb      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e7ea      	b.n	8002572 <HAL_RCC_OscConfig+0x272>
 800259c:	e7ff      	b.n	800259e <HAL_RCC_OscConfig+0x29e>
 800259e:	e7ff      	b.n	80025a0 <HAL_RCC_OscConfig+0x2a0>
  }
 80025a0:	e7ff      	b.n	80025a2 <HAL_RCC_OscConfig+0x2a2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	9804      	ldr	r0, [sp, #16]
 80025a4:	7800      	ldrb	r0, [r0, #0]
 80025a6:	0700      	lsls	r0, r0, #28
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d548      	bpl.n	800263e <HAL_RCC_OscConfig+0x33e>
 80025ac:	e7ff      	b.n	80025ae <HAL_RCC_OscConfig+0x2ae>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ae:	9804      	ldr	r0, [sp, #16]
 80025b0:	6980      	ldr	r0, [r0, #24]
 80025b2:	b318      	cbz	r0, 80025fc <HAL_RCC_OscConfig+0x2fc>
 80025b4:	e7ff      	b.n	80025b6 <HAL_RCC_OscConfig+0x2b6>
 80025b6:	f240 4180 	movw	r1, #1152	@ 0x480
 80025ba:	f2c4 2142 	movt	r1, #16962	@ 0x4242
 80025be:	2001      	movs	r0, #1
      __HAL_RCC_LSI_ENABLE();
 80025c0:	6008      	str	r0, [r1, #0]
      tickstart = HAL_GetTick();
 80025c2:	f7ff f9a3 	bl	800190c <HAL_GetTick>
 80025c6:	9003      	str	r0, [sp, #12]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c8:	e7ff      	b.n	80025ca <HAL_RCC_OscConfig+0x2ca>
 80025ca:	f241 0024 	movw	r0, #4132	@ 0x1024
 80025ce:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80025d2:	6800      	ldr	r0, [r0, #0]
 80025d4:	0780      	lsls	r0, r0, #30
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d40c      	bmi.n	80025f4 <HAL_RCC_OscConfig+0x2f4>
 80025da:	e7ff      	b.n	80025dc <HAL_RCC_OscConfig+0x2dc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7ff f996 	bl	800190c <HAL_GetTick>
 80025e0:	9903      	ldr	r1, [sp, #12]
 80025e2:	1a40      	subs	r0, r0, r1
 80025e4:	2803      	cmp	r0, #3
 80025e6:	d304      	bcc.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
 80025e8:	e7ff      	b.n	80025ea <HAL_RCC_OscConfig+0x2ea>
 80025ea:	2003      	movs	r0, #3
          return HAL_TIMEOUT;
 80025ec:	f88d 0017 	strb.w	r0, [sp, #23]
 80025f0:	e1bf      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	e7ea      	b.n	80025ca <HAL_RCC_OscConfig+0x2ca>
 80025f4:	2001      	movs	r0, #1
      RCC_Delay(1);
 80025f6:	f002 fb99 	bl	8004d2c <RCC_Delay>
    }
 80025fa:	e01f      	b.n	800263c <HAL_RCC_OscConfig+0x33c>
 80025fc:	f240 4180 	movw	r1, #1152	@ 0x480
 8002600:	f2c4 2142 	movt	r1, #16962	@ 0x4242
 8002604:	2000      	movs	r0, #0
      __HAL_RCC_LSI_DISABLE();
 8002606:	6008      	str	r0, [r1, #0]
      tickstart = HAL_GetTick();
 8002608:	f7ff f980 	bl	800190c <HAL_GetTick>
 800260c:	9003      	str	r0, [sp, #12]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260e:	e7ff      	b.n	8002610 <HAL_RCC_OscConfig+0x310>
 8002610:	f241 0024 	movw	r0, #4132	@ 0x1024
 8002614:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002618:	6800      	ldr	r0, [r0, #0]
 800261a:	0780      	lsls	r0, r0, #30
 800261c:	2800      	cmp	r0, #0
 800261e:	d50c      	bpl.n	800263a <HAL_RCC_OscConfig+0x33a>
 8002620:	e7ff      	b.n	8002622 <HAL_RCC_OscConfig+0x322>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002622:	f7ff f973 	bl	800190c <HAL_GetTick>
 8002626:	9903      	ldr	r1, [sp, #12]
 8002628:	1a40      	subs	r0, r0, r1
 800262a:	2803      	cmp	r0, #3
 800262c:	d304      	bcc.n	8002638 <HAL_RCC_OscConfig+0x338>
 800262e:	e7ff      	b.n	8002630 <HAL_RCC_OscConfig+0x330>
 8002630:	2003      	movs	r0, #3
          return HAL_TIMEOUT;
 8002632:	f88d 0017 	strb.w	r0, [sp, #23]
 8002636:	e19c      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	e7ea      	b.n	8002610 <HAL_RCC_OscConfig+0x310>
 800263a:	e7ff      	b.n	800263c <HAL_RCC_OscConfig+0x33c>
  }
 800263c:	e7ff      	b.n	800263e <HAL_RCC_OscConfig+0x33e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	9804      	ldr	r0, [sp, #16]
 8002640:	7800      	ldrb	r0, [r0, #0]
 8002642:	0740      	lsls	r0, r0, #29
 8002644:	2800      	cmp	r0, #0
 8002646:	f140 80d8 	bpl.w	80027fa <HAL_RCC_OscConfig+0x4fa>
 800264a:	e7ff      	b.n	800264c <HAL_RCC_OscConfig+0x34c>
 800264c:	2000      	movs	r0, #0
    FlagStatus       pwrclkchanged = RESET;
 800264e:	f88d 0007 	strb.w	r0, [sp, #7]
 8002652:	f241 001c 	movw	r0, #4124	@ 0x101c
 8002656:	f2c4 0002 	movt	r0, #16386	@ 0x4002
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	6800      	ldr	r0, [r0, #0]
 800265c:	00c0      	lsls	r0, r0, #3
 800265e:	2800      	cmp	r0, #0
 8002660:	d413      	bmi.n	800268a <HAL_RCC_OscConfig+0x38a>
 8002662:	e7ff      	b.n	8002664 <HAL_RCC_OscConfig+0x364>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	e7ff      	b.n	8002666 <HAL_RCC_OscConfig+0x366>
 8002666:	f241 001c 	movw	r0, #4124	@ 0x101c
 800266a:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800266e:	6801      	ldr	r1, [r0, #0]
 8002670:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002674:	6001      	str	r1, [r0, #0]
 8002676:	6800      	ldr	r0, [r0, #0]
 8002678:	f000 5080 	and.w	r0, r0, #268435456	@ 0x10000000
 800267c:	9000      	str	r0, [sp, #0]
 800267e:	9800      	ldr	r0, [sp, #0]
 8002680:	e7ff      	b.n	8002682 <HAL_RCC_OscConfig+0x382>
 8002682:	2001      	movs	r0, #1
      pwrclkchanged = SET;
 8002684:	f88d 0007 	strb.w	r0, [sp, #7]
    }
 8002688:	e7ff      	b.n	800268a <HAL_RCC_OscConfig+0x38a>
 800268a:	f247 0000 	movw	r0, #28672	@ 0x7000
 800268e:	f2c4 0000 	movt	r0, #16384	@ 0x4000
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	6800      	ldr	r0, [r0, #0]
 8002694:	05c0      	lsls	r0, r0, #23
 8002696:	2800      	cmp	r0, #0
 8002698:	d422      	bmi.n	80026e0 <HAL_RCC_OscConfig+0x3e0>
 800269a:	e7ff      	b.n	800269c <HAL_RCC_OscConfig+0x39c>
 800269c:	f247 0100 	movw	r1, #28672	@ 0x7000
 80026a0:	f2c4 0100 	movt	r1, #16384	@ 0x4000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a4:	6808      	ldr	r0, [r1, #0]
 80026a6:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80026aa:	6008      	str	r0, [r1, #0]
      tickstart = HAL_GetTick();
 80026ac:	f7ff f92e 	bl	800190c <HAL_GetTick>
 80026b0:	9003      	str	r0, [sp, #12]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	e7ff      	b.n	80026b4 <HAL_RCC_OscConfig+0x3b4>
 80026b4:	f247 0000 	movw	r0, #28672	@ 0x7000
 80026b8:	f2c4 0000 	movt	r0, #16384	@ 0x4000
 80026bc:	6800      	ldr	r0, [r0, #0]
 80026be:	05c0      	lsls	r0, r0, #23
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d40c      	bmi.n	80026de <HAL_RCC_OscConfig+0x3de>
 80026c4:	e7ff      	b.n	80026c6 <HAL_RCC_OscConfig+0x3c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7ff f921 	bl	800190c <HAL_GetTick>
 80026ca:	9903      	ldr	r1, [sp, #12]
 80026cc:	1a40      	subs	r0, r0, r1
 80026ce:	2865      	cmp	r0, #101	@ 0x65
 80026d0:	d304      	bcc.n	80026dc <HAL_RCC_OscConfig+0x3dc>
 80026d2:	e7ff      	b.n	80026d4 <HAL_RCC_OscConfig+0x3d4>
 80026d4:	2003      	movs	r0, #3
          return HAL_TIMEOUT;
 80026d6:	f88d 0017 	strb.w	r0, [sp, #23]
 80026da:	e14a      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e7ea      	b.n	80026b4 <HAL_RCC_OscConfig+0x3b4>
    }
 80026de:	e7ff      	b.n	80026e0 <HAL_RCC_OscConfig+0x3e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	e7ff      	b.n	80026e2 <HAL_RCC_OscConfig+0x3e2>
 80026e2:	9804      	ldr	r0, [sp, #16]
 80026e4:	68c0      	ldr	r0, [r0, #12]
 80026e6:	2801      	cmp	r0, #1
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_OscConfig+0x3fe>
 80026ea:	e7ff      	b.n	80026ec <HAL_RCC_OscConfig+0x3ec>
 80026ec:	f241 0120 	movw	r1, #4128	@ 0x1020
 80026f0:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 80026f4:	6808      	ldr	r0, [r1, #0]
 80026f6:	f040 0001 	orr.w	r0, r0, #1
 80026fa:	6008      	str	r0, [r1, #0]
 80026fc:	e031      	b.n	8002762 <HAL_RCC_OscConfig+0x462>
 80026fe:	9804      	ldr	r0, [sp, #16]
 8002700:	68c0      	ldr	r0, [r0, #12]
 8002702:	b968      	cbnz	r0, 8002720 <HAL_RCC_OscConfig+0x420>
 8002704:	e7ff      	b.n	8002706 <HAL_RCC_OscConfig+0x406>
 8002706:	f241 0120 	movw	r1, #4128	@ 0x1020
 800270a:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 800270e:	6808      	ldr	r0, [r1, #0]
 8002710:	f020 0001 	bic.w	r0, r0, #1
 8002714:	6008      	str	r0, [r1, #0]
 8002716:	6808      	ldr	r0, [r1, #0]
 8002718:	f020 0004 	bic.w	r0, r0, #4
 800271c:	6008      	str	r0, [r1, #0]
 800271e:	e01f      	b.n	8002760 <HAL_RCC_OscConfig+0x460>
 8002720:	9804      	ldr	r0, [sp, #16]
 8002722:	68c0      	ldr	r0, [r0, #12]
 8002724:	2805      	cmp	r0, #5
 8002726:	d10d      	bne.n	8002744 <HAL_RCC_OscConfig+0x444>
 8002728:	e7ff      	b.n	800272a <HAL_RCC_OscConfig+0x42a>
 800272a:	f241 0120 	movw	r1, #4128	@ 0x1020
 800272e:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 8002732:	6808      	ldr	r0, [r1, #0]
 8002734:	f040 0004 	orr.w	r0, r0, #4
 8002738:	6008      	str	r0, [r1, #0]
 800273a:	6808      	ldr	r0, [r1, #0]
 800273c:	f040 0001 	orr.w	r0, r0, #1
 8002740:	6008      	str	r0, [r1, #0]
 8002742:	e00c      	b.n	800275e <HAL_RCC_OscConfig+0x45e>
 8002744:	f241 0120 	movw	r1, #4128	@ 0x1020
 8002748:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 800274c:	6808      	ldr	r0, [r1, #0]
 800274e:	f020 0001 	bic.w	r0, r0, #1
 8002752:	6008      	str	r0, [r1, #0]
 8002754:	6808      	ldr	r0, [r1, #0]
 8002756:	f020 0004 	bic.w	r0, r0, #4
 800275a:	6008      	str	r0, [r1, #0]
 800275c:	e7ff      	b.n	800275e <HAL_RCC_OscConfig+0x45e>
 800275e:	e7ff      	b.n	8002760 <HAL_RCC_OscConfig+0x460>
 8002760:	e7ff      	b.n	8002762 <HAL_RCC_OscConfig+0x462>
 8002762:	e7ff      	b.n	8002764 <HAL_RCC_OscConfig+0x464>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002764:	9804      	ldr	r0, [sp, #16]
 8002766:	68c0      	ldr	r0, [r0, #12]
 8002768:	b1e0      	cbz	r0, 80027a4 <HAL_RCC_OscConfig+0x4a4>
 800276a:	e7ff      	b.n	800276c <HAL_RCC_OscConfig+0x46c>
      tickstart = HAL_GetTick();
 800276c:	f7ff f8ce 	bl	800190c <HAL_GetTick>
 8002770:	9003      	str	r0, [sp, #12]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	e7ff      	b.n	8002774 <HAL_RCC_OscConfig+0x474>
 8002774:	f241 0020 	movw	r0, #4128	@ 0x1020
 8002778:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 800277c:	6800      	ldr	r0, [r0, #0]
 800277e:	0780      	lsls	r0, r0, #30
 8002780:	2800      	cmp	r0, #0
 8002782:	d40e      	bmi.n	80027a2 <HAL_RCC_OscConfig+0x4a2>
 8002784:	e7ff      	b.n	8002786 <HAL_RCC_OscConfig+0x486>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff f8c1 	bl	800190c <HAL_GetTick>
 800278a:	9903      	ldr	r1, [sp, #12]
 800278c:	1a40      	subs	r0, r0, r1
 800278e:	f241 3189 	movw	r1, #5001	@ 0x1389
 8002792:	4288      	cmp	r0, r1
 8002794:	d304      	bcc.n	80027a0 <HAL_RCC_OscConfig+0x4a0>
 8002796:	e7ff      	b.n	8002798 <HAL_RCC_OscConfig+0x498>
 8002798:	2003      	movs	r0, #3
          return HAL_TIMEOUT;
 800279a:	f88d 0017 	strb.w	r0, [sp, #23]
 800279e:	e0e8      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	e7e8      	b.n	8002774 <HAL_RCC_OscConfig+0x474>
    }
 80027a2:	e01b      	b.n	80027dc <HAL_RCC_OscConfig+0x4dc>
      tickstart = HAL_GetTick();
 80027a4:	f7ff f8b2 	bl	800190c <HAL_GetTick>
 80027a8:	9003      	str	r0, [sp, #12]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027aa:	e7ff      	b.n	80027ac <HAL_RCC_OscConfig+0x4ac>
 80027ac:	f241 0020 	movw	r0, #4128	@ 0x1020
 80027b0:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80027b4:	6800      	ldr	r0, [r0, #0]
 80027b6:	0780      	lsls	r0, r0, #30
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d50e      	bpl.n	80027da <HAL_RCC_OscConfig+0x4da>
 80027bc:	e7ff      	b.n	80027be <HAL_RCC_OscConfig+0x4be>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7ff f8a5 	bl	800190c <HAL_GetTick>
 80027c2:	9903      	ldr	r1, [sp, #12]
 80027c4:	1a40      	subs	r0, r0, r1
 80027c6:	f241 3189 	movw	r1, #5001	@ 0x1389
 80027ca:	4288      	cmp	r0, r1
 80027cc:	d304      	bcc.n	80027d8 <HAL_RCC_OscConfig+0x4d8>
 80027ce:	e7ff      	b.n	80027d0 <HAL_RCC_OscConfig+0x4d0>
 80027d0:	2003      	movs	r0, #3
          return HAL_TIMEOUT;
 80027d2:	f88d 0017 	strb.w	r0, [sp, #23]
 80027d6:	e0cc      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d8:	e7e8      	b.n	80027ac <HAL_RCC_OscConfig+0x4ac>
 80027da:	e7ff      	b.n	80027dc <HAL_RCC_OscConfig+0x4dc>
    if (pwrclkchanged == SET)
 80027dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80027e0:	2801      	cmp	r0, #1
 80027e2:	d109      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4f8>
 80027e4:	e7ff      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e6>
 80027e6:	f241 011c 	movw	r1, #4124	@ 0x101c
 80027ea:	f2c4 0102 	movt	r1, #16386	@ 0x4002
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	6808      	ldr	r0, [r1, #0]
 80027f0:	f020 5080 	bic.w	r0, r0, #268435456	@ 0x10000000
 80027f4:	6008      	str	r0, [r1, #0]
    }
 80027f6:	e7ff      	b.n	80027f8 <HAL_RCC_OscConfig+0x4f8>
  }
 80027f8:	e7ff      	b.n	80027fa <HAL_RCC_OscConfig+0x4fa>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fa:	9804      	ldr	r0, [sp, #16]
 80027fc:	69c0      	ldr	r0, [r0, #28]
 80027fe:	2800      	cmp	r0, #0
 8002800:	f000 80b3 	beq.w	800296a <HAL_RCC_OscConfig+0x66a>
 8002804:	e7ff      	b.n	8002806 <HAL_RCC_OscConfig+0x506>
 8002806:	f241 0004 	movw	r0, #4100	@ 0x1004
 800280a:	f2c4 0002 	movt	r0, #16386	@ 0x4002
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280e:	6800      	ldr	r0, [r0, #0]
 8002810:	f000 000c 	and.w	r0, r0, #12
 8002814:	2808      	cmp	r0, #8
 8002816:	f000 8082 	beq.w	800291e <HAL_RCC_OscConfig+0x61e>
 800281a:	e7ff      	b.n	800281c <HAL_RCC_OscConfig+0x51c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281c:	9804      	ldr	r0, [sp, #16]
 800281e:	69c0      	ldr	r0, [r0, #28]
 8002820:	2802      	cmp	r0, #2
 8002822:	d15c      	bne.n	80028de <HAL_RCC_OscConfig+0x5de>
 8002824:	e7ff      	b.n	8002826 <HAL_RCC_OscConfig+0x526>
 8002826:	2160      	movs	r1, #96	@ 0x60
 8002828:	f2c4 2142 	movt	r1, #16962	@ 0x4242
 800282c:	2000      	movs	r0, #0
        __HAL_RCC_PLL_DISABLE();
 800282e:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8002830:	f7ff f86c 	bl	800190c <HAL_GetTick>
 8002834:	9003      	str	r0, [sp, #12]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002836:	e7ff      	b.n	8002838 <HAL_RCC_OscConfig+0x538>
 8002838:	f241 0000 	movw	r0, #4096	@ 0x1000
 800283c:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002840:	6800      	ldr	r0, [r0, #0]
 8002842:	0180      	lsls	r0, r0, #6
 8002844:	2800      	cmp	r0, #0
 8002846:	d50c      	bpl.n	8002862 <HAL_RCC_OscConfig+0x562>
 8002848:	e7ff      	b.n	800284a <HAL_RCC_OscConfig+0x54a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7ff f85f 	bl	800190c <HAL_GetTick>
 800284e:	9903      	ldr	r1, [sp, #12]
 8002850:	1a40      	subs	r0, r0, r1
 8002852:	2803      	cmp	r0, #3
 8002854:	d304      	bcc.n	8002860 <HAL_RCC_OscConfig+0x560>
 8002856:	e7ff      	b.n	8002858 <HAL_RCC_OscConfig+0x558>
 8002858:	2003      	movs	r0, #3
            return HAL_TIMEOUT;
 800285a:	f88d 0017 	strb.w	r0, [sp, #23]
 800285e:	e088      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002860:	e7ea      	b.n	8002838 <HAL_RCC_OscConfig+0x538>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002862:	9804      	ldr	r0, [sp, #16]
 8002864:	6a00      	ldr	r0, [r0, #32]
 8002866:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800286a:	d10c      	bne.n	8002886 <HAL_RCC_OscConfig+0x586>
 800286c:	e7ff      	b.n	800286e <HAL_RCC_OscConfig+0x56e>
 800286e:	f241 0104 	movw	r1, #4100	@ 0x1004
 8002872:	f2c4 0102 	movt	r1, #16386	@ 0x4002
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002876:	6808      	ldr	r0, [r1, #0]
 8002878:	f420 3000 	bic.w	r0, r0, #131072	@ 0x20000
 800287c:	9a04      	ldr	r2, [sp, #16]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	4310      	orrs	r0, r2
 8002882:	6008      	str	r0, [r1, #0]
        }
 8002884:	e7ff      	b.n	8002886 <HAL_RCC_OscConfig+0x586>
 8002886:	f241 0104 	movw	r1, #4100	@ 0x1004
 800288a:	f2c4 0102 	movt	r1, #16386	@ 0x4002
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288e:	6808      	ldr	r0, [r1, #0]
 8002890:	f420 1074 	bic.w	r0, r0, #3997696	@ 0x3d0000
 8002894:	9b04      	ldr	r3, [sp, #16]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	431a      	orrs	r2, r3
 800289c:	4310      	orrs	r0, r2
 800289e:	6008      	str	r0, [r1, #0]
 80028a0:	2160      	movs	r1, #96	@ 0x60
 80028a2:	f2c4 2142 	movt	r1, #16962	@ 0x4242
 80028a6:	2001      	movs	r0, #1
        __HAL_RCC_PLL_ENABLE();
 80028a8:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 80028aa:	f7ff f82f 	bl	800190c <HAL_GetTick>
 80028ae:	9003      	str	r0, [sp, #12]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b0:	e7ff      	b.n	80028b2 <HAL_RCC_OscConfig+0x5b2>
 80028b2:	f241 0000 	movw	r0, #4096	@ 0x1000
 80028b6:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80028ba:	6800      	ldr	r0, [r0, #0]
 80028bc:	0180      	lsls	r0, r0, #6
 80028be:	2800      	cmp	r0, #0
 80028c0:	d40c      	bmi.n	80028dc <HAL_RCC_OscConfig+0x5dc>
 80028c2:	e7ff      	b.n	80028c4 <HAL_RCC_OscConfig+0x5c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff f822 	bl	800190c <HAL_GetTick>
 80028c8:	9903      	ldr	r1, [sp, #12]
 80028ca:	1a40      	subs	r0, r0, r1
 80028cc:	2803      	cmp	r0, #3
 80028ce:	d304      	bcc.n	80028da <HAL_RCC_OscConfig+0x5da>
 80028d0:	e7ff      	b.n	80028d2 <HAL_RCC_OscConfig+0x5d2>
 80028d2:	2003      	movs	r0, #3
            return HAL_TIMEOUT;
 80028d4:	f88d 0017 	strb.w	r0, [sp, #23]
 80028d8:	e04b      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028da:	e7ea      	b.n	80028b2 <HAL_RCC_OscConfig+0x5b2>
      }
 80028dc:	e01e      	b.n	800291c <HAL_RCC_OscConfig+0x61c>
 80028de:	2160      	movs	r1, #96	@ 0x60
 80028e0:	f2c4 2142 	movt	r1, #16962	@ 0x4242
 80028e4:	2000      	movs	r0, #0
        __HAL_RCC_PLL_DISABLE();
 80028e6:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 80028e8:	f7ff f810 	bl	800190c <HAL_GetTick>
 80028ec:	9003      	str	r0, [sp, #12]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ee:	e7ff      	b.n	80028f0 <HAL_RCC_OscConfig+0x5f0>
 80028f0:	f241 0000 	movw	r0, #4096	@ 0x1000
 80028f4:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80028f8:	6800      	ldr	r0, [r0, #0]
 80028fa:	0180      	lsls	r0, r0, #6
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d50c      	bpl.n	800291a <HAL_RCC_OscConfig+0x61a>
 8002900:	e7ff      	b.n	8002902 <HAL_RCC_OscConfig+0x602>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7ff f803 	bl	800190c <HAL_GetTick>
 8002906:	9903      	ldr	r1, [sp, #12]
 8002908:	1a40      	subs	r0, r0, r1
 800290a:	2803      	cmp	r0, #3
 800290c:	d304      	bcc.n	8002918 <HAL_RCC_OscConfig+0x618>
 800290e:	e7ff      	b.n	8002910 <HAL_RCC_OscConfig+0x610>
 8002910:	2003      	movs	r0, #3
            return HAL_TIMEOUT;
 8002912:	f88d 0017 	strb.w	r0, [sp, #23]
 8002916:	e02c      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002918:	e7ea      	b.n	80028f0 <HAL_RCC_OscConfig+0x5f0>
 800291a:	e7ff      	b.n	800291c <HAL_RCC_OscConfig+0x61c>
    }
 800291c:	e024      	b.n	8002968 <HAL_RCC_OscConfig+0x668>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291e:	9804      	ldr	r0, [sp, #16]
 8002920:	69c0      	ldr	r0, [r0, #28]
 8002922:	2801      	cmp	r0, #1
 8002924:	d104      	bne.n	8002930 <HAL_RCC_OscConfig+0x630>
 8002926:	e7ff      	b.n	8002928 <HAL_RCC_OscConfig+0x628>
 8002928:	2001      	movs	r0, #1
        return HAL_ERROR;
 800292a:	f88d 0017 	strb.w	r0, [sp, #23]
 800292e:	e020      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
 8002930:	f241 0004 	movw	r0, #4100	@ 0x1004
 8002934:	f2c4 0002 	movt	r0, #16386	@ 0x4002
        pll_config = RCC->CFGR;
 8002938:	6800      	ldr	r0, [r0, #0]
 800293a:	9002      	str	r0, [sp, #8]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293c:	9802      	ldr	r0, [sp, #8]
 800293e:	f400 3080 	and.w	r0, r0, #65536	@ 0x10000
 8002942:	9904      	ldr	r1, [sp, #16]
 8002944:	6a09      	ldr	r1, [r1, #32]
 8002946:	4288      	cmp	r0, r1
 8002948:	d108      	bne.n	800295c <HAL_RCC_OscConfig+0x65c>
 800294a:	e7ff      	b.n	800294c <HAL_RCC_OscConfig+0x64c>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800294c:	9802      	ldr	r0, [sp, #8]
 800294e:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
 8002952:	9904      	ldr	r1, [sp, #16]
 8002954:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	4288      	cmp	r0, r1
 8002958:	d004      	beq.n	8002964 <HAL_RCC_OscConfig+0x664>
 800295a:	e7ff      	b.n	800295c <HAL_RCC_OscConfig+0x65c>
 800295c:	2001      	movs	r0, #1
          return HAL_ERROR;
 800295e:	f88d 0017 	strb.w	r0, [sp, #23]
 8002962:	e006      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
 8002964:	e7ff      	b.n	8002966 <HAL_RCC_OscConfig+0x666>
 8002966:	e7ff      	b.n	8002968 <HAL_RCC_OscConfig+0x668>
  }
 8002968:	e7ff      	b.n	800296a <HAL_RCC_OscConfig+0x66a>
 800296a:	2000      	movs	r0, #0
  return HAL_OK;
 800296c:	f88d 0017 	strb.w	r0, [sp, #23]
 8002970:	e7ff      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
}
 8002972:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002976:	b006      	add	sp, #24
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	9002      	str	r0, [sp, #8]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002982:	9802      	ldr	r0, [sp, #8]
 8002984:	b920      	cbnz	r0, 8002990 <HAL_SPI_Init+0x14>
 8002986:	e7ff      	b.n	8002988 <HAL_SPI_Init+0xc>
 8002988:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
 800298a:	f88d 000f 	strb.w	r0, [sp, #15]
 800298e:	e06d      	b.n	8002a6c <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002990:	9802      	ldr	r0, [sp, #8]
 8002992:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002994:	b960      	cbnz	r0, 80029b0 <HAL_SPI_Init+0x34>
 8002996:	e7ff      	b.n	8002998 <HAL_SPI_Init+0x1c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002998:	9802      	ldr	r0, [sp, #8]
 800299a:	6840      	ldr	r0, [r0, #4]
 800299c:	f5b0 7f82 	cmp.w	r0, #260	@ 0x104
 80029a0:	d101      	bne.n	80029a6 <HAL_SPI_Init+0x2a>
 80029a2:	e7ff      	b.n	80029a4 <HAL_SPI_Init+0x28>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
 80029a4:	e003      	b.n	80029ae <HAL_SPI_Init+0x32>
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029a6:	9902      	ldr	r1, [sp, #8]
 80029a8:	2000      	movs	r0, #0
 80029aa:	61c8      	str	r0, [r1, #28]
 80029ac:	e7ff      	b.n	80029ae <HAL_SPI_Init+0x32>
    }
  }
 80029ae:	e005      	b.n	80029bc <HAL_SPI_Init+0x40>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029b0:	9902      	ldr	r1, [sp, #8]
 80029b2:	2000      	movs	r0, #0
 80029b4:	6108      	str	r0, [r1, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029b6:	9902      	ldr	r1, [sp, #8]
 80029b8:	6148      	str	r0, [r1, #20]
 80029ba:	e7ff      	b.n	80029bc <HAL_SPI_Init+0x40>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029bc:	9902      	ldr	r1, [sp, #8]
 80029be:	2000      	movs	r0, #0
 80029c0:	6288      	str	r0, [r1, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029c2:	9802      	ldr	r0, [sp, #8]
 80029c4:	f890 0051 	ldrb.w	r0, [r0, #81]	@ 0x51
 80029c8:	b940      	cbnz	r0, 80029dc <HAL_SPI_Init+0x60>
 80029ca:	e7ff      	b.n	80029cc <HAL_SPI_Init+0x50>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029cc:	9902      	ldr	r1, [sp, #8]
 80029ce:	2000      	movs	r0, #0
 80029d0:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029d4:	9802      	ldr	r0, [sp, #8]
 80029d6:	f000 f84d 	bl	8002a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
 80029da:	e7ff      	b.n	80029dc <HAL_SPI_Init+0x60>

  hspi->State = HAL_SPI_STATE_BUSY;
 80029dc:	9902      	ldr	r1, [sp, #8]
 80029de:	2002      	movs	r0, #2
 80029e0:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029e4:	9802      	ldr	r0, [sp, #8]
 80029e6:	6801      	ldr	r1, [r0, #0]
 80029e8:	6808      	ldr	r0, [r1, #0]
 80029ea:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80029ee:	6008      	str	r0, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029f0:	9a02      	ldr	r2, [sp, #8]
 80029f2:	9201      	str	r2, [sp, #4]
 80029f4:	6811      	ldr	r1, [r2, #0]
 80029f6:	6850      	ldr	r0, [r2, #4]
 80029f8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80029fc:	68d3      	ldr	r3, [r2, #12]
 80029fe:	f400 7082 	and.w	r0, r0, #260	@ 0x104
 8002a02:	f40c 4c04 	and.w	ip, ip, #33792	@ 0x8400
 8002a06:	4460      	add	r0, ip
 8002a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a0c:	4418      	add	r0, r3
 8002a0e:	6913      	ldr	r3, [r2, #16]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	4418      	add	r0, r3
 8002a16:	6953      	ldr	r3, [r2, #20]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	4418      	add	r0, r3
 8002a1e:	6993      	ldr	r3, [r2, #24]
 8002a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a24:	4418      	add	r0, r3
 8002a26:	69d3      	ldr	r3, [r2, #28]
 8002a28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a2c:	4418      	add	r0, r3
 8002a2e:	6a13      	ldr	r3, [r2, #32]
 8002a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a34:	4318      	orrs	r0, r3
 8002a36:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002a38:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002a3c:	4310      	orrs	r0, r2
 8002a3e:	6008      	str	r0, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a40:	9902      	ldr	r1, [sp, #8]
 8002a42:	8b48      	ldrh	r0, [r1, #26]
 8002a44:	f000 0004 	and.w	r0, r0, #4
 8002a48:	6809      	ldr	r1, [r1, #0]
 8002a4a:	6048      	str	r0, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a4c:	9802      	ldr	r0, [sp, #8]
 8002a4e:	6801      	ldr	r1, [r0, #0]
 8002a50:	69c8      	ldr	r0, [r1, #28]
 8002a52:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 8002a56:	61c8      	str	r0, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a58:	9902      	ldr	r1, [sp, #8]
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	6548      	str	r0, [r1, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a5e:	9a02      	ldr	r2, [sp, #8]
 8002a60:	2101      	movs	r1, #1
 8002a62:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51

  return HAL_OK;
 8002a66:	f88d 000f 	strb.w	r0, [sp, #15]
 8002a6a:	e7ff      	b.n	8002a6c <HAL_SPI_Init+0xf0>
}
 8002a6c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_SPI_MspInit>:
  /* USER CODE END SPI2_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08e      	sub	sp, #56	@ 0x38
 8002a78:	900d      	str	r0, [sp, #52]	@ 0x34
 8002a7a:	2000      	movs	r0, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	900c      	str	r0, [sp, #48]	@ 0x30
 8002a7e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8002a80:	900a      	str	r0, [sp, #40]	@ 0x28
 8002a82:	9009      	str	r0, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8002a84:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002a86:	6800      	ldr	r0, [r0, #0]
 8002a88:	f243 0100 	movw	r1, #12288	@ 0x3000
 8002a8c:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8002a90:	4288      	cmp	r0, r1
 8002a92:	d137      	bne.n	8002b04 <HAL_SPI_MspInit+0x90>
 8002a94:	e7ff      	b.n	8002a96 <HAL_SPI_MspInit+0x22>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a96:	e7ff      	b.n	8002a98 <HAL_SPI_MspInit+0x24>
 8002a98:	f241 0018 	movw	r0, #4120	@ 0x1018
 8002a9c:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002aa0:	6801      	ldr	r1, [r0, #0]
 8002aa2:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8002aa6:	6001      	str	r1, [r0, #0]
 8002aa8:	6800      	ldr	r0, [r0, #0]
 8002aaa:	f400 5080 	and.w	r0, r0, #4096	@ 0x1000
 8002aae:	9008      	str	r0, [sp, #32]
 8002ab0:	9808      	ldr	r0, [sp, #32]
 8002ab2:	e7ff      	b.n	8002ab4 <HAL_SPI_MspInit+0x40>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	e7ff      	b.n	8002ab6 <HAL_SPI_MspInit+0x42>
 8002ab6:	f241 0018 	movw	r0, #4120	@ 0x1018
 8002aba:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002abe:	6801      	ldr	r1, [r0, #0]
 8002ac0:	f041 0104 	orr.w	r1, r1, #4
 8002ac4:	6001      	str	r1, [r0, #0]
 8002ac6:	6800      	ldr	r0, [r0, #0]
 8002ac8:	f000 0004 	and.w	r0, r0, #4
 8002acc:	9007      	str	r0, [sp, #28]
 8002ace:	9807      	ldr	r0, [sp, #28]
 8002ad0:	e7ff      	b.n	8002ad2 <HAL_SPI_MspInit+0x5e>
 8002ad2:	20a0      	movs	r0, #160	@ 0xa0
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ad4:	9009      	str	r0, [sp, #36]	@ 0x24
 8002ad6:	2002      	movs	r0, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	900a      	str	r0, [sp, #40]	@ 0x28
 8002ada:	2003      	movs	r0, #3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002adc:	900c      	str	r0, [sp, #48]	@ 0x30
 8002ade:	f640 0000 	movw	r0, #2048	@ 0x800
 8002ae2:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8002ae6:	9003      	str	r0, [sp, #12]
 8002ae8:	a909      	add	r1, sp, #36	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aea:	9104      	str	r1, [sp, #16]
 8002aec:	f7fe fd66 	bl	80015bc <HAL_GPIO_Init>
 8002af0:	9803      	ldr	r0, [sp, #12]
 8002af2:	9904      	ldr	r1, [sp, #16]
 8002af4:	2240      	movs	r2, #64	@ 0x40

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002af6:	9209      	str	r2, [sp, #36]	@ 0x24
 8002af8:	2200      	movs	r2, #0
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afa:	920a      	str	r2, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	920b      	str	r2, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f7fe fd5d 	bl	80015bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
 8002b02:	e042      	b.n	8002b8a <HAL_SPI_MspInit+0x116>
  else if(spiHandle->Instance==SPI2)
 8002b04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002b06:	6800      	ldr	r0, [r0, #0]
 8002b08:	f643 0100 	movw	r1, #14336	@ 0x3800
 8002b0c:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 8002b10:	4288      	cmp	r0, r1
 8002b12:	d139      	bne.n	8002b88 <HAL_SPI_MspInit+0x114>
 8002b14:	e7ff      	b.n	8002b16 <HAL_SPI_MspInit+0xa2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b16:	e7ff      	b.n	8002b18 <HAL_SPI_MspInit+0xa4>
 8002b18:	f241 001c 	movw	r0, #4124	@ 0x101c
 8002b1c:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002b20:	6801      	ldr	r1, [r0, #0]
 8002b22:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002b26:	6001      	str	r1, [r0, #0]
 8002b28:	6800      	ldr	r0, [r0, #0]
 8002b2a:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 8002b2e:	9006      	str	r0, [sp, #24]
 8002b30:	9806      	ldr	r0, [sp, #24]
 8002b32:	e7ff      	b.n	8002b34 <HAL_SPI_MspInit+0xc0>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b34:	e7ff      	b.n	8002b36 <HAL_SPI_MspInit+0xc2>
 8002b36:	f241 0018 	movw	r0, #4120	@ 0x1018
 8002b3a:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8002b3e:	6801      	ldr	r1, [r0, #0]
 8002b40:	f041 0108 	orr.w	r1, r1, #8
 8002b44:	6001      	str	r1, [r0, #0]
 8002b46:	6800      	ldr	r0, [r0, #0]
 8002b48:	f000 0008 	and.w	r0, r0, #8
 8002b4c:	9005      	str	r0, [sp, #20]
 8002b4e:	9805      	ldr	r0, [sp, #20]
 8002b50:	e7ff      	b.n	8002b52 <HAL_SPI_MspInit+0xde>
 8002b52:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002b56:	9009      	str	r0, [sp, #36]	@ 0x24
 8002b58:	2002      	movs	r0, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	900a      	str	r0, [sp, #40]	@ 0x28
 8002b5c:	2003      	movs	r0, #3
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b5e:	900c      	str	r0, [sp, #48]	@ 0x30
 8002b60:	f640 4000 	movw	r0, #3072	@ 0xc00
 8002b64:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8002b68:	9001      	str	r0, [sp, #4]
 8002b6a:	a909      	add	r1, sp, #36	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6c:	9102      	str	r1, [sp, #8]
 8002b6e:	f7fe fd25 	bl	80015bc <HAL_GPIO_Init>
 8002b72:	9801      	ldr	r0, [sp, #4]
 8002b74:	9902      	ldr	r1, [sp, #8]
 8002b76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b7c:	2200      	movs	r2, #0
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b7e:	920a      	str	r2, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	920b      	str	r2, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f7fe fd1b 	bl	80015bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
 8002b86:	e7ff      	b.n	8002b88 <HAL_SPI_MspInit+0x114>
 8002b88:	e7ff      	b.n	8002b8a <HAL_SPI_MspInit+0x116>
}
 8002b8a:	b00e      	add	sp, #56	@ 0x38
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	9006      	str	r0, [sp, #24]
 8002b96:	9105      	str	r1, [sp, #20]
 8002b98:	f8ad 2012 	strh.w	r2, [sp, #18]
 8002b9c:	9303      	str	r3, [sp, #12]
 8002b9e:	2000      	movs	r0, #0
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ba0:	f88d 0007 	strb.w	r0, [sp, #7]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ba4:	9806      	ldr	r0, [sp, #24]
 8002ba6:	f890 0051 	ldrb.w	r0, [r0, #81]	@ 0x51
 8002baa:	2801      	cmp	r0, #1
 8002bac:	d004      	beq.n	8002bb8 <HAL_SPI_Receive+0x28>
 8002bae:	e7ff      	b.n	8002bb0 <HAL_SPI_Receive+0x20>
 8002bb0:	2002      	movs	r0, #2
  {
    errorcode = HAL_BUSY;
 8002bb2:	f88d 0007 	strb.w	r0, [sp, #7]
    goto error;
 8002bb6:	e0fd      	b.n	8002db4 <HAL_SPI_Receive+0x224>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bb8:	9806      	ldr	r0, [sp, #24]
 8002bba:	6840      	ldr	r0, [r0, #4]
 8002bbc:	f5b0 7f82 	cmp.w	r0, #260	@ 0x104
 8002bc0:	d116      	bne.n	8002bf0 <HAL_SPI_Receive+0x60>
 8002bc2:	e7ff      	b.n	8002bc4 <HAL_SPI_Receive+0x34>
 8002bc4:	9806      	ldr	r0, [sp, #24]
 8002bc6:	6880      	ldr	r0, [r0, #8]
 8002bc8:	b990      	cbnz	r0, 8002bf0 <HAL_SPI_Receive+0x60>
 8002bca:	e7ff      	b.n	8002bcc <HAL_SPI_Receive+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bcc:	9906      	ldr	r1, [sp, #24]
 8002bce:	2004      	movs	r0, #4
 8002bd0:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bd4:	9806      	ldr	r0, [sp, #24]
 8002bd6:	9a05      	ldr	r2, [sp, #20]
 8002bd8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8002bdc:	9903      	ldr	r1, [sp, #12]
 8002bde:	46ec      	mov	ip, sp
 8002be0:	f8cc 1000 	str.w	r1, [ip]
 8002be4:	4611      	mov	r1, r2
 8002be6:	f000 fa41 	bl	800306c <HAL_SPI_TransmitReceive>
 8002bea:	f88d 001f 	strb.w	r0, [sp, #31]
 8002bee:	e0ec      	b.n	8002dca <HAL_SPI_Receive+0x23a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bf0:	e7ff      	b.n	8002bf2 <HAL_SPI_Receive+0x62>
 8002bf2:	9806      	ldr	r0, [sp, #24]
 8002bf4:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8002bf8:	2801      	cmp	r0, #1
 8002bfa:	d104      	bne.n	8002c06 <HAL_SPI_Receive+0x76>
 8002bfc:	e7ff      	b.n	8002bfe <HAL_SPI_Receive+0x6e>
 8002bfe:	2002      	movs	r0, #2
 8002c00:	f88d 001f 	strb.w	r0, [sp, #31]
 8002c04:	e0e1      	b.n	8002dca <HAL_SPI_Receive+0x23a>
 8002c06:	9906      	ldr	r1, [sp, #24]
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
 8002c0e:	e7ff      	b.n	8002c10 <HAL_SPI_Receive+0x80>
 8002c10:	e7ff      	b.n	8002c12 <HAL_SPI_Receive+0x82>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c12:	f7fe fe7b 	bl	800190c <HAL_GetTick>
 8002c16:	9002      	str	r0, [sp, #8]

  if ((pData == NULL) || (Size == 0U))
 8002c18:	9805      	ldr	r0, [sp, #20]
 8002c1a:	b120      	cbz	r0, 8002c26 <HAL_SPI_Receive+0x96>
 8002c1c:	e7ff      	b.n	8002c1e <HAL_SPI_Receive+0x8e>
 8002c1e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8002c22:	b920      	cbnz	r0, 8002c2e <HAL_SPI_Receive+0x9e>
 8002c24:	e7ff      	b.n	8002c26 <HAL_SPI_Receive+0x96>
 8002c26:	2001      	movs	r0, #1
  {
    errorcode = HAL_ERROR;
 8002c28:	f88d 0007 	strb.w	r0, [sp, #7]
    goto error;
 8002c2c:	e0c2      	b.n	8002db4 <HAL_SPI_Receive+0x224>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c2e:	9906      	ldr	r1, [sp, #24]
 8002c30:	2004      	movs	r0, #4
 8002c32:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c36:	9906      	ldr	r1, [sp, #24]
 8002c38:	2000      	movs	r0, #0
 8002c3a:	6548      	str	r0, [r1, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c3c:	9905      	ldr	r1, [sp, #20]
 8002c3e:	9a06      	ldr	r2, [sp, #24]
 8002c40:	6391      	str	r1, [r2, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002c42:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8002c46:	9a06      	ldr	r2, [sp, #24]
 8002c48:	8791      	strh	r1, [r2, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002c4a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8002c4e:	9a06      	ldr	r2, [sp, #24]
 8002c50:	87d1      	strh	r1, [r2, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c52:	9906      	ldr	r1, [sp, #24]
 8002c54:	6308      	str	r0, [r1, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002c56:	9906      	ldr	r1, [sp, #24]
 8002c58:	8688      	strh	r0, [r1, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002c5a:	9906      	ldr	r1, [sp, #24]
 8002c5c:	86c8      	strh	r0, [r1, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002c5e:	9906      	ldr	r1, [sp, #24]
 8002c60:	6408      	str	r0, [r1, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c62:	9906      	ldr	r1, [sp, #24]
 8002c64:	6448      	str	r0, [r1, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c66:	9806      	ldr	r0, [sp, #24]
 8002c68:	6880      	ldr	r0, [r0, #8]
 8002c6a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002c6e:	d10d      	bne.n	8002c8c <HAL_SPI_Receive+0xfc>
 8002c70:	e7ff      	b.n	8002c72 <HAL_SPI_Receive+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c72:	9806      	ldr	r0, [sp, #24]
 8002c74:	6801      	ldr	r1, [r0, #0]
 8002c76:	6808      	ldr	r0, [r1, #0]
 8002c78:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002c7c:	6008      	str	r0, [r1, #0]
    SPI_1LINE_RX(hspi);
 8002c7e:	9806      	ldr	r0, [sp, #24]
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	6808      	ldr	r0, [r1, #0]
 8002c84:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8002c88:	6008      	str	r0, [r1, #0]
  }
 8002c8a:	e7ff      	b.n	8002c8c <HAL_SPI_Receive+0xfc>

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c8c:	9806      	ldr	r0, [sp, #24]
 8002c8e:	6800      	ldr	r0, [r0, #0]
 8002c90:	6800      	ldr	r0, [r0, #0]
 8002c92:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 8002c96:	2840      	cmp	r0, #64	@ 0x40
 8002c98:	d007      	beq.n	8002caa <HAL_SPI_Receive+0x11a>
 8002c9a:	e7ff      	b.n	8002c9c <HAL_SPI_Receive+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c9c:	9806      	ldr	r0, [sp, #24]
 8002c9e:	6801      	ldr	r1, [r0, #0]
 8002ca0:	6808      	ldr	r0, [r1, #0]
 8002ca2:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8002ca6:	6008      	str	r0, [r1, #0]
  }
 8002ca8:	e7ff      	b.n	8002caa <HAL_SPI_Receive+0x11a>

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002caa:	9806      	ldr	r0, [sp, #24]
 8002cac:	68c0      	ldr	r0, [r0, #12]
 8002cae:	bba0      	cbnz	r0, 8002d1a <HAL_SPI_Receive+0x18a>
 8002cb0:	e7ff      	b.n	8002cb2 <HAL_SPI_Receive+0x122>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cb2:	e7ff      	b.n	8002cb4 <HAL_SPI_Receive+0x124>
 8002cb4:	9806      	ldr	r0, [sp, #24]
 8002cb6:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 8002cb8:	b370      	cbz	r0, 8002d18 <HAL_SPI_Receive+0x188>
 8002cba:	e7ff      	b.n	8002cbc <HAL_SPI_Receive+0x12c>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cbc:	9806      	ldr	r0, [sp, #24]
 8002cbe:	6800      	ldr	r0, [r0, #0]
 8002cc0:	6880      	ldr	r0, [r0, #8]
 8002cc2:	07c0      	lsls	r0, r0, #31
 8002cc4:	b178      	cbz	r0, 8002ce6 <HAL_SPI_Receive+0x156>
 8002cc6:	e7ff      	b.n	8002cc8 <HAL_SPI_Receive+0x138>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cc8:	9806      	ldr	r0, [sp, #24]
 8002cca:	6800      	ldr	r0, [r0, #0]
 8002ccc:	7b00      	ldrb	r0, [r0, #12]
 8002cce:	9906      	ldr	r1, [sp, #24]
 8002cd0:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8002cd2:	7008      	strb	r0, [r1, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cd4:	9906      	ldr	r1, [sp, #24]
 8002cd6:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8002cd8:	3001      	adds	r0, #1
 8002cda:	6388      	str	r0, [r1, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cdc:	9906      	ldr	r1, [sp, #24]
 8002cde:	8fc8      	ldrh	r0, [r1, #62]	@ 0x3e
 8002ce0:	3801      	subs	r0, #1
 8002ce2:	87c8      	strh	r0, [r1, #62]	@ 0x3e
      }
 8002ce4:	e017      	b.n	8002d16 <HAL_SPI_Receive+0x186>
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ce6:	f7fe fe11 	bl	800190c <HAL_GetTick>
 8002cea:	9902      	ldr	r1, [sp, #8]
 8002cec:	1a40      	subs	r0, r0, r1
 8002cee:	9903      	ldr	r1, [sp, #12]
 8002cf0:	4288      	cmp	r0, r1
 8002cf2:	d304      	bcc.n	8002cfe <HAL_SPI_Receive+0x16e>
 8002cf4:	e7ff      	b.n	8002cf6 <HAL_SPI_Receive+0x166>
 8002cf6:	9803      	ldr	r0, [sp, #12]
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	b918      	cbnz	r0, 8002d04 <HAL_SPI_Receive+0x174>
 8002cfc:	e7ff      	b.n	8002cfe <HAL_SPI_Receive+0x16e>
 8002cfe:	9803      	ldr	r0, [sp, #12]
 8002d00:	b940      	cbnz	r0, 8002d14 <HAL_SPI_Receive+0x184>
 8002d02:	e7ff      	b.n	8002d04 <HAL_SPI_Receive+0x174>
 8002d04:	2003      	movs	r0, #3
        {
          errorcode = HAL_TIMEOUT;
 8002d06:	f88d 0007 	strb.w	r0, [sp, #7]
          hspi->State = HAL_SPI_STATE_READY;
 8002d0a:	9906      	ldr	r1, [sp, #24]
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
          goto error;
 8002d12:	e04f      	b.n	8002db4 <HAL_SPI_Receive+0x224>
 8002d14:	e7ff      	b.n	8002d16 <HAL_SPI_Receive+0x186>
    while (hspi->RxXferCount > 0U)
 8002d16:	e7cd      	b.n	8002cb4 <HAL_SPI_Receive+0x124>
        }
      }
    }
  }
 8002d18:	e033      	b.n	8002d82 <HAL_SPI_Receive+0x1f2>
  else
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d1a:	e7ff      	b.n	8002d1c <HAL_SPI_Receive+0x18c>
 8002d1c:	9806      	ldr	r0, [sp, #24]
 8002d1e:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 8002d20:	b370      	cbz	r0, 8002d80 <HAL_SPI_Receive+0x1f0>
 8002d22:	e7ff      	b.n	8002d24 <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d24:	9806      	ldr	r0, [sp, #24]
 8002d26:	6800      	ldr	r0, [r0, #0]
 8002d28:	6880      	ldr	r0, [r0, #8]
 8002d2a:	07c0      	lsls	r0, r0, #31
 8002d2c:	b178      	cbz	r0, 8002d4e <HAL_SPI_Receive+0x1be>
 8002d2e:	e7ff      	b.n	8002d30 <HAL_SPI_Receive+0x1a0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d30:	9806      	ldr	r0, [sp, #24]
 8002d32:	6800      	ldr	r0, [r0, #0]
 8002d34:	68c0      	ldr	r0, [r0, #12]
 8002d36:	9906      	ldr	r1, [sp, #24]
 8002d38:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8002d3a:	8008      	strh	r0, [r1, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d3c:	9906      	ldr	r1, [sp, #24]
 8002d3e:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8002d40:	3002      	adds	r0, #2
 8002d42:	6388      	str	r0, [r1, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d44:	9906      	ldr	r1, [sp, #24]
 8002d46:	8fc8      	ldrh	r0, [r1, #62]	@ 0x3e
 8002d48:	3801      	subs	r0, #1
 8002d4a:	87c8      	strh	r0, [r1, #62]	@ 0x3e
      }
 8002d4c:	e017      	b.n	8002d7e <HAL_SPI_Receive+0x1ee>
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d4e:	f7fe fddd 	bl	800190c <HAL_GetTick>
 8002d52:	9902      	ldr	r1, [sp, #8]
 8002d54:	1a40      	subs	r0, r0, r1
 8002d56:	9903      	ldr	r1, [sp, #12]
 8002d58:	4288      	cmp	r0, r1
 8002d5a:	d304      	bcc.n	8002d66 <HAL_SPI_Receive+0x1d6>
 8002d5c:	e7ff      	b.n	8002d5e <HAL_SPI_Receive+0x1ce>
 8002d5e:	9803      	ldr	r0, [sp, #12]
 8002d60:	3001      	adds	r0, #1
 8002d62:	b918      	cbnz	r0, 8002d6c <HAL_SPI_Receive+0x1dc>
 8002d64:	e7ff      	b.n	8002d66 <HAL_SPI_Receive+0x1d6>
 8002d66:	9803      	ldr	r0, [sp, #12]
 8002d68:	b940      	cbnz	r0, 8002d7c <HAL_SPI_Receive+0x1ec>
 8002d6a:	e7ff      	b.n	8002d6c <HAL_SPI_Receive+0x1dc>
 8002d6c:	2003      	movs	r0, #3
        {
          errorcode = HAL_TIMEOUT;
 8002d6e:	f88d 0007 	strb.w	r0, [sp, #7]
          hspi->State = HAL_SPI_STATE_READY;
 8002d72:	9906      	ldr	r1, [sp, #24]
 8002d74:	2001      	movs	r0, #1
 8002d76:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
          goto error;
 8002d7a:	e01b      	b.n	8002db4 <HAL_SPI_Receive+0x224>
 8002d7c:	e7ff      	b.n	8002d7e <HAL_SPI_Receive+0x1ee>
    while (hspi->RxXferCount > 0U)
 8002d7e:	e7cd      	b.n	8002d1c <HAL_SPI_Receive+0x18c>
 8002d80:	e7ff      	b.n	8002d82 <HAL_SPI_Receive+0x1f2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d82:	9806      	ldr	r0, [sp, #24]
 8002d84:	9903      	ldr	r1, [sp, #12]
 8002d86:	9a02      	ldr	r2, [sp, #8]
 8002d88:	f001 ffee 	bl	8004d68 <SPI_EndRxTransaction>
 8002d8c:	b120      	cbz	r0, 8002d98 <HAL_SPI_Receive+0x208>
 8002d8e:	e7ff      	b.n	8002d90 <HAL_SPI_Receive+0x200>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d90:	9906      	ldr	r1, [sp, #24]
 8002d92:	2020      	movs	r0, #32
 8002d94:	6548      	str	r0, [r1, #84]	@ 0x54
  }
 8002d96:	e7ff      	b.n	8002d98 <HAL_SPI_Receive+0x208>
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d98:	9806      	ldr	r0, [sp, #24]
 8002d9a:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 8002d9c:	b120      	cbz	r0, 8002da8 <HAL_SPI_Receive+0x218>
 8002d9e:	e7ff      	b.n	8002da0 <HAL_SPI_Receive+0x210>
 8002da0:	2001      	movs	r0, #1
  {
    errorcode = HAL_ERROR;
 8002da2:	f88d 0007 	strb.w	r0, [sp, #7]
  }
 8002da6:	e004      	b.n	8002db2 <HAL_SPI_Receive+0x222>
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002da8:	9906      	ldr	r1, [sp, #24]
 8002daa:	2001      	movs	r0, #1
 8002dac:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
 8002db0:	e7ff      	b.n	8002db2 <HAL_SPI_Receive+0x222>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db2:	e7ff      	b.n	8002db4 <HAL_SPI_Receive+0x224>
  }

error :
  __HAL_UNLOCK(hspi);
 8002db4:	e7ff      	b.n	8002db6 <HAL_SPI_Receive+0x226>
 8002db6:	9906      	ldr	r1, [sp, #24]
 8002db8:	2000      	movs	r0, #0
 8002dba:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
 8002dbe:	e7ff      	b.n	8002dc0 <HAL_SPI_Receive+0x230>
  return errorcode;
 8002dc0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002dc4:	f88d 001f 	strb.w	r0, [sp, #31]
 8002dc8:	e7ff      	b.n	8002dca <HAL_SPI_Receive+0x23a>
}
 8002dca:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8002dce:	b008      	add	sp, #32
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_SPI_Transmit>:
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	9006      	str	r0, [sp, #24]
 8002dda:	9105      	str	r1, [sp, #20]
 8002ddc:	f8ad 2012 	strh.w	r2, [sp, #18]
 8002de0:	9303      	str	r3, [sp, #12]
 8002de2:	2000      	movs	r0, #0
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002de4:	f88d 0007 	strb.w	r0, [sp, #7]
  __HAL_LOCK(hspi);
 8002de8:	e7ff      	b.n	8002dea <HAL_SPI_Transmit+0x16>
 8002dea:	9806      	ldr	r0, [sp, #24]
 8002dec:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8002df0:	2801      	cmp	r0, #1
 8002df2:	d104      	bne.n	8002dfe <HAL_SPI_Transmit+0x2a>
 8002df4:	e7ff      	b.n	8002df6 <HAL_SPI_Transmit+0x22>
 8002df6:	2002      	movs	r0, #2
 8002df8:	f88d 001f 	strb.w	r0, [sp, #31]
 8002dfc:	e131      	b.n	8003062 <HAL_SPI_Transmit+0x28e>
 8002dfe:	9906      	ldr	r1, [sp, #24]
 8002e00:	2001      	movs	r0, #1
 8002e02:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
 8002e06:	e7ff      	b.n	8002e08 <HAL_SPI_Transmit+0x34>
 8002e08:	e7ff      	b.n	8002e0a <HAL_SPI_Transmit+0x36>
  tickstart = HAL_GetTick();
 8002e0a:	f7fe fd7f 	bl	800190c <HAL_GetTick>
 8002e0e:	9002      	str	r0, [sp, #8]
  initial_TxXferCount = Size;
 8002e10:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8002e14:	f8ad 0004 	strh.w	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e18:	9806      	ldr	r0, [sp, #24]
 8002e1a:	f890 0051 	ldrb.w	r0, [r0, #81]	@ 0x51
 8002e1e:	2801      	cmp	r0, #1
 8002e20:	d004      	beq.n	8002e2c <HAL_SPI_Transmit+0x58>
 8002e22:	e7ff      	b.n	8002e24 <HAL_SPI_Transmit+0x50>
 8002e24:	2002      	movs	r0, #2
    errorcode = HAL_BUSY;
 8002e26:	f88d 0007 	strb.w	r0, [sp, #7]
    goto error;
 8002e2a:	e10f      	b.n	800304c <HAL_SPI_Transmit+0x278>
  if ((pData == NULL) || (Size == 0U))
 8002e2c:	9805      	ldr	r0, [sp, #20]
 8002e2e:	b120      	cbz	r0, 8002e3a <HAL_SPI_Transmit+0x66>
 8002e30:	e7ff      	b.n	8002e32 <HAL_SPI_Transmit+0x5e>
 8002e32:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8002e36:	b920      	cbnz	r0, 8002e42 <HAL_SPI_Transmit+0x6e>
 8002e38:	e7ff      	b.n	8002e3a <HAL_SPI_Transmit+0x66>
 8002e3a:	2001      	movs	r0, #1
    errorcode = HAL_ERROR;
 8002e3c:	f88d 0007 	strb.w	r0, [sp, #7]
    goto error;
 8002e40:	e104      	b.n	800304c <HAL_SPI_Transmit+0x278>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e42:	9906      	ldr	r1, [sp, #24]
 8002e44:	2003      	movs	r0, #3
 8002e46:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e4a:	9906      	ldr	r1, [sp, #24]
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	6548      	str	r0, [r1, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e50:	9905      	ldr	r1, [sp, #20]
 8002e52:	9a06      	ldr	r2, [sp, #24]
 8002e54:	6311      	str	r1, [r2, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e56:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8002e5a:	9a06      	ldr	r2, [sp, #24]
 8002e5c:	8691      	strh	r1, [r2, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e5e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8002e62:	9a06      	ldr	r2, [sp, #24]
 8002e64:	86d1      	strh	r1, [r2, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e66:	9906      	ldr	r1, [sp, #24]
 8002e68:	6388      	str	r0, [r1, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e6a:	9906      	ldr	r1, [sp, #24]
 8002e6c:	8788      	strh	r0, [r1, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e6e:	9906      	ldr	r1, [sp, #24]
 8002e70:	87c8      	strh	r0, [r1, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e72:	9906      	ldr	r1, [sp, #24]
 8002e74:	6448      	str	r0, [r1, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e76:	9906      	ldr	r1, [sp, #24]
 8002e78:	6408      	str	r0, [r1, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e7a:	9806      	ldr	r0, [sp, #24]
 8002e7c:	6880      	ldr	r0, [r0, #8]
 8002e7e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002e82:	d10d      	bne.n	8002ea0 <HAL_SPI_Transmit+0xcc>
 8002e84:	e7ff      	b.n	8002e86 <HAL_SPI_Transmit+0xb2>
    __HAL_SPI_DISABLE(hspi);
 8002e86:	9806      	ldr	r0, [sp, #24]
 8002e88:	6801      	ldr	r1, [r0, #0]
 8002e8a:	6808      	ldr	r0, [r1, #0]
 8002e8c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002e90:	6008      	str	r0, [r1, #0]
    SPI_1LINE_TX(hspi);
 8002e92:	9806      	ldr	r0, [sp, #24]
 8002e94:	6801      	ldr	r1, [r0, #0]
 8002e96:	6808      	ldr	r0, [r1, #0]
 8002e98:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 8002e9c:	6008      	str	r0, [r1, #0]
  }
 8002e9e:	e7ff      	b.n	8002ea0 <HAL_SPI_Transmit+0xcc>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ea0:	9806      	ldr	r0, [sp, #24]
 8002ea2:	6800      	ldr	r0, [r0, #0]
 8002ea4:	6800      	ldr	r0, [r0, #0]
 8002ea6:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 8002eaa:	2840      	cmp	r0, #64	@ 0x40
 8002eac:	d007      	beq.n	8002ebe <HAL_SPI_Transmit+0xea>
 8002eae:	e7ff      	b.n	8002eb0 <HAL_SPI_Transmit+0xdc>
    __HAL_SPI_ENABLE(hspi);
 8002eb0:	9806      	ldr	r0, [sp, #24]
 8002eb2:	6801      	ldr	r1, [r0, #0]
 8002eb4:	6808      	ldr	r0, [r1, #0]
 8002eb6:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8002eba:	6008      	str	r0, [r1, #0]
  }
 8002ebc:	e7ff      	b.n	8002ebe <HAL_SPI_Transmit+0xea>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ebe:	9806      	ldr	r0, [sp, #24]
 8002ec0:	68c0      	ldr	r0, [r0, #12]
 8002ec2:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8002ec6:	d14b      	bne.n	8002f60 <HAL_SPI_Transmit+0x18c>
 8002ec8:	e7ff      	b.n	8002eca <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eca:	9806      	ldr	r0, [sp, #24]
 8002ecc:	6840      	ldr	r0, [r0, #4]
 8002ece:	b128      	cbz	r0, 8002edc <HAL_SPI_Transmit+0x108>
 8002ed0:	e7ff      	b.n	8002ed2 <HAL_SPI_Transmit+0xfe>
 8002ed2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002ed6:	2801      	cmp	r0, #1
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_SPI_Transmit+0x124>
 8002eda:	e7ff      	b.n	8002edc <HAL_SPI_Transmit+0x108>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002edc:	9806      	ldr	r0, [sp, #24]
 8002ede:	6801      	ldr	r1, [r0, #0]
 8002ee0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002ee2:	8800      	ldrh	r0, [r0, #0]
 8002ee4:	60c8      	str	r0, [r1, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee6:	9906      	ldr	r1, [sp, #24]
 8002ee8:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8002eea:	3002      	adds	r0, #2
 8002eec:	6308      	str	r0, [r1, #48]	@ 0x30
      hspi->TxXferCount--;
 8002eee:	9906      	ldr	r1, [sp, #24]
 8002ef0:	8ec8      	ldrh	r0, [r1, #54]	@ 0x36
 8002ef2:	3801      	subs	r0, #1
 8002ef4:	86c8      	strh	r0, [r1, #54]	@ 0x36
    }
 8002ef6:	e7ff      	b.n	8002ef8 <HAL_SPI_Transmit+0x124>
    while (hspi->TxXferCount > 0U)
 8002ef8:	e7ff      	b.n	8002efa <HAL_SPI_Transmit+0x126>
 8002efa:	9806      	ldr	r0, [sp, #24]
 8002efc:	8ec0      	ldrh	r0, [r0, #54]	@ 0x36
 8002efe:	b370      	cbz	r0, 8002f5e <HAL_SPI_Transmit+0x18a>
 8002f00:	e7ff      	b.n	8002f02 <HAL_SPI_Transmit+0x12e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f02:	9806      	ldr	r0, [sp, #24]
 8002f04:	6800      	ldr	r0, [r0, #0]
 8002f06:	6880      	ldr	r0, [r0, #8]
 8002f08:	0780      	lsls	r0, r0, #30
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d50e      	bpl.n	8002f2c <HAL_SPI_Transmit+0x158>
 8002f0e:	e7ff      	b.n	8002f10 <HAL_SPI_Transmit+0x13c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f10:	9806      	ldr	r0, [sp, #24]
 8002f12:	6801      	ldr	r1, [r0, #0]
 8002f14:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002f16:	8800      	ldrh	r0, [r0, #0]
 8002f18:	60c8      	str	r0, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1a:	9906      	ldr	r1, [sp, #24]
 8002f1c:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8002f1e:	3002      	adds	r0, #2
 8002f20:	6308      	str	r0, [r1, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f22:	9906      	ldr	r1, [sp, #24]
 8002f24:	8ec8      	ldrh	r0, [r1, #54]	@ 0x36
 8002f26:	3801      	subs	r0, #1
 8002f28:	86c8      	strh	r0, [r1, #54]	@ 0x36
      }
 8002f2a:	e017      	b.n	8002f5c <HAL_SPI_Transmit+0x188>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2c:	f7fe fcee 	bl	800190c <HAL_GetTick>
 8002f30:	9902      	ldr	r1, [sp, #8]
 8002f32:	1a40      	subs	r0, r0, r1
 8002f34:	9903      	ldr	r1, [sp, #12]
 8002f36:	4288      	cmp	r0, r1
 8002f38:	d304      	bcc.n	8002f44 <HAL_SPI_Transmit+0x170>
 8002f3a:	e7ff      	b.n	8002f3c <HAL_SPI_Transmit+0x168>
 8002f3c:	9803      	ldr	r0, [sp, #12]
 8002f3e:	3001      	adds	r0, #1
 8002f40:	b918      	cbnz	r0, 8002f4a <HAL_SPI_Transmit+0x176>
 8002f42:	e7ff      	b.n	8002f44 <HAL_SPI_Transmit+0x170>
 8002f44:	9803      	ldr	r0, [sp, #12]
 8002f46:	b940      	cbnz	r0, 8002f5a <HAL_SPI_Transmit+0x186>
 8002f48:	e7ff      	b.n	8002f4a <HAL_SPI_Transmit+0x176>
 8002f4a:	2003      	movs	r0, #3
          errorcode = HAL_TIMEOUT;
 8002f4c:	f88d 0007 	strb.w	r0, [sp, #7]
          hspi->State = HAL_SPI_STATE_READY;
 8002f50:	9906      	ldr	r1, [sp, #24]
 8002f52:	2001      	movs	r0, #1
 8002f54:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
          goto error;
 8002f58:	e078      	b.n	800304c <HAL_SPI_Transmit+0x278>
 8002f5a:	e7ff      	b.n	8002f5c <HAL_SPI_Transmit+0x188>
    while (hspi->TxXferCount > 0U)
 8002f5c:	e7cd      	b.n	8002efa <HAL_SPI_Transmit+0x126>
  }
 8002f5e:	e04a      	b.n	8002ff6 <HAL_SPI_Transmit+0x222>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f60:	9806      	ldr	r0, [sp, #24]
 8002f62:	6840      	ldr	r0, [r0, #4]
 8002f64:	b128      	cbz	r0, 8002f72 <HAL_SPI_Transmit+0x19e>
 8002f66:	e7ff      	b.n	8002f68 <HAL_SPI_Transmit+0x194>
 8002f68:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002f6c:	2801      	cmp	r0, #1
 8002f6e:	d10e      	bne.n	8002f8e <HAL_SPI_Transmit+0x1ba>
 8002f70:	e7ff      	b.n	8002f72 <HAL_SPI_Transmit+0x19e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f72:	9806      	ldr	r0, [sp, #24]
 8002f74:	6801      	ldr	r1, [r0, #0]
 8002f76:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002f78:	7800      	ldrb	r0, [r0, #0]
 8002f7a:	7308      	strb	r0, [r1, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f7c:	9906      	ldr	r1, [sp, #24]
 8002f7e:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8002f80:	3001      	adds	r0, #1
 8002f82:	6308      	str	r0, [r1, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f84:	9906      	ldr	r1, [sp, #24]
 8002f86:	8ec8      	ldrh	r0, [r1, #54]	@ 0x36
 8002f88:	3801      	subs	r0, #1
 8002f8a:	86c8      	strh	r0, [r1, #54]	@ 0x36
    }
 8002f8c:	e7ff      	b.n	8002f8e <HAL_SPI_Transmit+0x1ba>
    while (hspi->TxXferCount > 0U)
 8002f8e:	e7ff      	b.n	8002f90 <HAL_SPI_Transmit+0x1bc>
 8002f90:	9806      	ldr	r0, [sp, #24]
 8002f92:	8ec0      	ldrh	r0, [r0, #54]	@ 0x36
 8002f94:	b370      	cbz	r0, 8002ff4 <HAL_SPI_Transmit+0x220>
 8002f96:	e7ff      	b.n	8002f98 <HAL_SPI_Transmit+0x1c4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f98:	9806      	ldr	r0, [sp, #24]
 8002f9a:	6800      	ldr	r0, [r0, #0]
 8002f9c:	6880      	ldr	r0, [r0, #8]
 8002f9e:	0780      	lsls	r0, r0, #30
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d50e      	bpl.n	8002fc2 <HAL_SPI_Transmit+0x1ee>
 8002fa4:	e7ff      	b.n	8002fa6 <HAL_SPI_Transmit+0x1d2>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fa6:	9806      	ldr	r0, [sp, #24]
 8002fa8:	6801      	ldr	r1, [r0, #0]
 8002faa:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002fac:	7800      	ldrb	r0, [r0, #0]
 8002fae:	7308      	strb	r0, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fb0:	9906      	ldr	r1, [sp, #24]
 8002fb2:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	6308      	str	r0, [r1, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fb8:	9906      	ldr	r1, [sp, #24]
 8002fba:	8ec8      	ldrh	r0, [r1, #54]	@ 0x36
 8002fbc:	3801      	subs	r0, #1
 8002fbe:	86c8      	strh	r0, [r1, #54]	@ 0x36
      }
 8002fc0:	e017      	b.n	8002ff2 <HAL_SPI_Transmit+0x21e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc2:	f7fe fca3 	bl	800190c <HAL_GetTick>
 8002fc6:	9902      	ldr	r1, [sp, #8]
 8002fc8:	1a40      	subs	r0, r0, r1
 8002fca:	9903      	ldr	r1, [sp, #12]
 8002fcc:	4288      	cmp	r0, r1
 8002fce:	d304      	bcc.n	8002fda <HAL_SPI_Transmit+0x206>
 8002fd0:	e7ff      	b.n	8002fd2 <HAL_SPI_Transmit+0x1fe>
 8002fd2:	9803      	ldr	r0, [sp, #12]
 8002fd4:	3001      	adds	r0, #1
 8002fd6:	b918      	cbnz	r0, 8002fe0 <HAL_SPI_Transmit+0x20c>
 8002fd8:	e7ff      	b.n	8002fda <HAL_SPI_Transmit+0x206>
 8002fda:	9803      	ldr	r0, [sp, #12]
 8002fdc:	b940      	cbnz	r0, 8002ff0 <HAL_SPI_Transmit+0x21c>
 8002fde:	e7ff      	b.n	8002fe0 <HAL_SPI_Transmit+0x20c>
 8002fe0:	2003      	movs	r0, #3
          errorcode = HAL_TIMEOUT;
 8002fe2:	f88d 0007 	strb.w	r0, [sp, #7]
          hspi->State = HAL_SPI_STATE_READY;
 8002fe6:	9906      	ldr	r1, [sp, #24]
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
          goto error;
 8002fee:	e02d      	b.n	800304c <HAL_SPI_Transmit+0x278>
 8002ff0:	e7ff      	b.n	8002ff2 <HAL_SPI_Transmit+0x21e>
    while (hspi->TxXferCount > 0U)
 8002ff2:	e7cd      	b.n	8002f90 <HAL_SPI_Transmit+0x1bc>
 8002ff4:	e7ff      	b.n	8002ff6 <HAL_SPI_Transmit+0x222>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff6:	9806      	ldr	r0, [sp, #24]
 8002ff8:	9903      	ldr	r1, [sp, #12]
 8002ffa:	9a02      	ldr	r2, [sp, #8]
 8002ffc:	f001 ff10 	bl	8004e20 <SPI_EndRxTxTransaction>
 8003000:	b120      	cbz	r0, 800300c <HAL_SPI_Transmit+0x238>
 8003002:	e7ff      	b.n	8003004 <HAL_SPI_Transmit+0x230>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003004:	9906      	ldr	r1, [sp, #24]
 8003006:	2020      	movs	r0, #32
 8003008:	6548      	str	r0, [r1, #84]	@ 0x54
  }
 800300a:	e7ff      	b.n	800300c <HAL_SPI_Transmit+0x238>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800300c:	9806      	ldr	r0, [sp, #24]
 800300e:	6880      	ldr	r0, [r0, #8]
 8003010:	b970      	cbnz	r0, 8003030 <HAL_SPI_Transmit+0x25c>
 8003012:	e7ff      	b.n	8003014 <HAL_SPI_Transmit+0x240>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003014:	e7ff      	b.n	8003016 <HAL_SPI_Transmit+0x242>
 8003016:	2000      	movs	r0, #0
 8003018:	9000      	str	r0, [sp, #0]
 800301a:	9806      	ldr	r0, [sp, #24]
 800301c:	6800      	ldr	r0, [r0, #0]
 800301e:	68c0      	ldr	r0, [r0, #12]
 8003020:	9000      	str	r0, [sp, #0]
 8003022:	9806      	ldr	r0, [sp, #24]
 8003024:	6800      	ldr	r0, [r0, #0]
 8003026:	6880      	ldr	r0, [r0, #8]
 8003028:	9000      	str	r0, [sp, #0]
 800302a:	9800      	ldr	r0, [sp, #0]
 800302c:	e7ff      	b.n	800302e <HAL_SPI_Transmit+0x25a>
  }
 800302e:	e7ff      	b.n	8003030 <HAL_SPI_Transmit+0x25c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003030:	9806      	ldr	r0, [sp, #24]
 8003032:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 8003034:	b120      	cbz	r0, 8003040 <HAL_SPI_Transmit+0x26c>
 8003036:	e7ff      	b.n	8003038 <HAL_SPI_Transmit+0x264>
 8003038:	2001      	movs	r0, #1
    errorcode = HAL_ERROR;
 800303a:	f88d 0007 	strb.w	r0, [sp, #7]
  }
 800303e:	e004      	b.n	800304a <HAL_SPI_Transmit+0x276>
    hspi->State = HAL_SPI_STATE_READY;
 8003040:	9906      	ldr	r1, [sp, #24]
 8003042:	2001      	movs	r0, #1
 8003044:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
 8003048:	e7ff      	b.n	800304a <HAL_SPI_Transmit+0x276>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800304a:	e7ff      	b.n	800304c <HAL_SPI_Transmit+0x278>
  __HAL_UNLOCK(hspi);
 800304c:	e7ff      	b.n	800304e <HAL_SPI_Transmit+0x27a>
 800304e:	9906      	ldr	r1, [sp, #24]
 8003050:	2000      	movs	r0, #0
 8003052:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
 8003056:	e7ff      	b.n	8003058 <HAL_SPI_Transmit+0x284>
  return errorcode;
 8003058:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800305c:	f88d 001f 	strb.w	r0, [sp, #31]
 8003060:	e7ff      	b.n	8003062 <HAL_SPI_Transmit+0x28e>
}
 8003062:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8003066:	b008      	add	sp, #32
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08e      	sub	sp, #56	@ 0x38
 8003070:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 8003074:	900c      	str	r0, [sp, #48]	@ 0x30
 8003076:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003078:	920a      	str	r2, [sp, #40]	@ 0x28
 800307a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800307e:	2001      	movs	r0, #1
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003080:	9005      	str	r0, [sp, #20]
 8003082:	2000      	movs	r0, #0
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003084:	f88d 0013 	strb.w	r0, [sp, #19]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003088:	e7ff      	b.n	800308a <HAL_SPI_TransmitReceive+0x1e>
 800308a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800308c:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8003090:	2801      	cmp	r0, #1
 8003092:	d104      	bne.n	800309e <HAL_SPI_TransmitReceive+0x32>
 8003094:	e7ff      	b.n	8003096 <HAL_SPI_TransmitReceive+0x2a>
 8003096:	2002      	movs	r0, #2
 8003098:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 800309c:	e1a6      	b.n	80033ec <HAL_SPI_TransmitReceive+0x380>
 800309e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80030a0:	2001      	movs	r0, #1
 80030a2:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
 80030a6:	e7ff      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x3c>
 80030a8:	e7ff      	b.n	80030aa <HAL_SPI_TransmitReceive+0x3e>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030aa:	f7fe fc2f 	bl	800190c <HAL_GetTick>
 80030ae:	9006      	str	r0, [sp, #24]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030b0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80030b2:	f890 0051 	ldrb.w	r0, [r0, #81]	@ 0x51
 80030b6:	f88d 001f 	strb.w	r0, [sp, #31]
  tmp_mode            = hspi->Init.Mode;
 80030ba:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80030bc:	6840      	ldr	r0, [r0, #4]
 80030be:	9008      	str	r0, [sp, #32]
  initial_TxXferCount = Size;
 80030c0:	f8bd 0026 	ldrh.w	r0, [sp, #38]	@ 0x26
 80030c4:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030c8:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80030cc:	2801      	cmp	r0, #1
 80030ce:	d012      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0x8a>
 80030d0:	e7ff      	b.n	80030d2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030d2:	9808      	ldr	r0, [sp, #32]
 80030d4:	f5b0 7f82 	cmp.w	r0, #260	@ 0x104
 80030d8:	d109      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x82>
 80030da:	e7ff      	b.n	80030dc <HAL_SPI_TransmitReceive+0x70>
 80030dc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80030de:	6880      	ldr	r0, [r0, #8]
 80030e0:	b928      	cbnz	r0, 80030ee <HAL_SPI_TransmitReceive+0x82>
 80030e2:	e7ff      	b.n	80030e4 <HAL_SPI_TransmitReceive+0x78>
 80030e4:	f89d 001f 	ldrb.w	r0, [sp, #31]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030e8:	2804      	cmp	r0, #4
 80030ea:	d004      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0x8a>
 80030ec:	e7ff      	b.n	80030ee <HAL_SPI_TransmitReceive+0x82>
 80030ee:	2002      	movs	r0, #2
  {
    errorcode = HAL_BUSY;
 80030f0:	f88d 0013 	strb.w	r0, [sp, #19]
    goto error;
 80030f4:	e16f      	b.n	80033d6 <HAL_SPI_TransmitReceive+0x36a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030f6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80030f8:	b138      	cbz	r0, 800310a <HAL_SPI_TransmitReceive+0x9e>
 80030fa:	e7ff      	b.n	80030fc <HAL_SPI_TransmitReceive+0x90>
 80030fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80030fe:	b120      	cbz	r0, 800310a <HAL_SPI_TransmitReceive+0x9e>
 8003100:	e7ff      	b.n	8003102 <HAL_SPI_TransmitReceive+0x96>
 8003102:	f8bd 0026 	ldrh.w	r0, [sp, #38]	@ 0x26
 8003106:	b920      	cbnz	r0, 8003112 <HAL_SPI_TransmitReceive+0xa6>
 8003108:	e7ff      	b.n	800310a <HAL_SPI_TransmitReceive+0x9e>
 800310a:	2001      	movs	r0, #1
  {
    errorcode = HAL_ERROR;
 800310c:	f88d 0013 	strb.w	r0, [sp, #19]
    goto error;
 8003110:	e161      	b.n	80033d6 <HAL_SPI_TransmitReceive+0x36a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003112:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003114:	f890 0051 	ldrb.w	r0, [r0, #81]	@ 0x51
 8003118:	2804      	cmp	r0, #4
 800311a:	d005      	beq.n	8003128 <HAL_SPI_TransmitReceive+0xbc>
 800311c:	e7ff      	b.n	800311e <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800311e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003120:	2005      	movs	r0, #5
 8003122:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
  }
 8003126:	e7ff      	b.n	8003128 <HAL_SPI_TransmitReceive+0xbc>

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003128:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800312a:	2000      	movs	r0, #0
 800312c:	6548      	str	r0, [r1, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800312e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003130:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003132:	6391      	str	r1, [r2, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003134:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 8003138:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800313a:	87d1      	strh	r1, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800313c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 8003140:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003142:	8791      	strh	r1, [r2, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003146:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003148:	6311      	str	r1, [r2, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800314a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 800314e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003150:	86d1      	strh	r1, [r2, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003152:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 8003156:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003158:	8691      	strh	r1, [r2, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800315a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800315c:	6408      	str	r0, [r1, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800315e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003160:	6448      	str	r0, [r1, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003164:	6800      	ldr	r0, [r0, #0]
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 800316c:	2840      	cmp	r0, #64	@ 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x114>
 8003170:	e7ff      	b.n	8003172 <HAL_SPI_TransmitReceive+0x106>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003172:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003174:	6801      	ldr	r1, [r0, #0]
 8003176:	6808      	ldr	r0, [r1, #0]
 8003178:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800317c:	6008      	str	r0, [r1, #0]
  }
 800317e:	e7ff      	b.n	8003180 <HAL_SPI_TransmitReceive+0x114>

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003182:	68c0      	ldr	r0, [r0, #12]
 8003184:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8003188:	d17a      	bne.n	8003280 <HAL_SPI_TransmitReceive+0x214>
 800318a:	e7ff      	b.n	800318c <HAL_SPI_TransmitReceive+0x120>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800318e:	6840      	ldr	r0, [r0, #4]
 8003190:	b128      	cbz	r0, 800319e <HAL_SPI_TransmitReceive+0x132>
 8003192:	e7ff      	b.n	8003194 <HAL_SPI_TransmitReceive+0x128>
 8003194:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 8003198:	2801      	cmp	r0, #1
 800319a:	d10e      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x14e>
 800319c:	e7ff      	b.n	800319e <HAL_SPI_TransmitReceive+0x132>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800319e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80031a0:	6801      	ldr	r1, [r0, #0]
 80031a2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80031a4:	8800      	ldrh	r0, [r0, #0]
 80031a6:	60c8      	str	r0, [r1, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80031aa:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 80031ac:	3002      	adds	r0, #2
 80031ae:	6308      	str	r0, [r1, #48]	@ 0x30
      hspi->TxXferCount--;
 80031b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80031b2:	8ec8      	ldrh	r0, [r1, #54]	@ 0x36
 80031b4:	3801      	subs	r0, #1
 80031b6:	86c8      	strh	r0, [r1, #54]	@ 0x36
    }
 80031b8:	e7ff      	b.n	80031ba <HAL_SPI_TransmitReceive+0x14e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ba:	e7ff      	b.n	80031bc <HAL_SPI_TransmitReceive+0x150>
 80031bc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80031be:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80031c0:	2001      	movs	r0, #1
 80031c2:	9002      	str	r0, [sp, #8]
 80031c4:	b939      	cbnz	r1, 80031d6 <HAL_SPI_TransmitReceive+0x16a>
 80031c6:	e7ff      	b.n	80031c8 <HAL_SPI_TransmitReceive+0x15c>
 80031c8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80031ca:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 80031cc:	2800      	cmp	r0, #0
 80031ce:	bf18      	it	ne
 80031d0:	2001      	movne	r0, #1
 80031d2:	9002      	str	r0, [sp, #8]
 80031d4:	e7ff      	b.n	80031d6 <HAL_SPI_TransmitReceive+0x16a>
 80031d6:	9802      	ldr	r0, [sp, #8]
 80031d8:	07c0      	lsls	r0, r0, #31
 80031da:	2800      	cmp	r0, #0
 80031dc:	d04f      	beq.n	800327e <HAL_SPI_TransmitReceive+0x212>
 80031de:	e7ff      	b.n	80031e0 <HAL_SPI_TransmitReceive+0x174>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80031e2:	6800      	ldr	r0, [r0, #0]
 80031e4:	6880      	ldr	r0, [r0, #8]
 80031e6:	0780      	lsls	r0, r0, #30
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d518      	bpl.n	800321e <HAL_SPI_TransmitReceive+0x1b2>
 80031ec:	e7ff      	b.n	80031ee <HAL_SPI_TransmitReceive+0x182>
 80031ee:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80031f0:	8ec0      	ldrh	r0, [r0, #54]	@ 0x36
 80031f2:	b1a0      	cbz	r0, 800321e <HAL_SPI_TransmitReceive+0x1b2>
 80031f4:	e7ff      	b.n	80031f6 <HAL_SPI_TransmitReceive+0x18a>
 80031f6:	9805      	ldr	r0, [sp, #20]
 80031f8:	2801      	cmp	r0, #1
 80031fa:	d110      	bne.n	800321e <HAL_SPI_TransmitReceive+0x1b2>
 80031fc:	e7ff      	b.n	80031fe <HAL_SPI_TransmitReceive+0x192>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031fe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003200:	6801      	ldr	r1, [r0, #0]
 8003202:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003204:	8800      	ldrh	r0, [r0, #0]
 8003206:	60c8      	str	r0, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003208:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800320a:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 800320c:	3002      	adds	r0, #2
 800320e:	6308      	str	r0, [r1, #48]	@ 0x30
        hspi->TxXferCount--;
 8003210:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003212:	8ec8      	ldrh	r0, [r1, #54]	@ 0x36
 8003214:	3801      	subs	r0, #1
 8003216:	86c8      	strh	r0, [r1, #54]	@ 0x36
 8003218:	2000      	movs	r0, #0
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800321a:	9005      	str	r0, [sp, #20]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
 800321c:	e7ff      	b.n	800321e <HAL_SPI_TransmitReceive+0x1b2>

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800321e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003220:	6800      	ldr	r0, [r0, #0]
 8003222:	6880      	ldr	r0, [r0, #8]
 8003224:	07c0      	lsls	r0, r0, #31
 8003226:	b1a8      	cbz	r0, 8003254 <HAL_SPI_TransmitReceive+0x1e8>
 8003228:	e7ff      	b.n	800322a <HAL_SPI_TransmitReceive+0x1be>
 800322a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800322c:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 800322e:	b188      	cbz	r0, 8003254 <HAL_SPI_TransmitReceive+0x1e8>
 8003230:	e7ff      	b.n	8003232 <HAL_SPI_TransmitReceive+0x1c6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003232:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003234:	6800      	ldr	r0, [r0, #0]
 8003236:	68c0      	ldr	r0, [r0, #12]
 8003238:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800323a:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 800323c:	8008      	strh	r0, [r1, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800323e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003240:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8003242:	3002      	adds	r0, #2
 8003244:	6388      	str	r0, [r1, #56]	@ 0x38
        hspi->RxXferCount--;
 8003246:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003248:	8fc8      	ldrh	r0, [r1, #62]	@ 0x3e
 800324a:	3801      	subs	r0, #1
 800324c:	87c8      	strh	r0, [r1, #62]	@ 0x3e
 800324e:	2001      	movs	r0, #1
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003250:	9005      	str	r0, [sp, #20]
      }
 8003252:	e7ff      	b.n	8003254 <HAL_SPI_TransmitReceive+0x1e8>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003254:	f7fe fb5a 	bl	800190c <HAL_GetTick>
 8003258:	9906      	ldr	r1, [sp, #24]
 800325a:	1a40      	subs	r0, r0, r1
 800325c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800325e:	4288      	cmp	r0, r1
 8003260:	d30c      	bcc.n	800327c <HAL_SPI_TransmitReceive+0x210>
 8003262:	e7ff      	b.n	8003264 <HAL_SPI_TransmitReceive+0x1f8>
 8003264:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8003266:	3001      	adds	r0, #1
 8003268:	b140      	cbz	r0, 800327c <HAL_SPI_TransmitReceive+0x210>
 800326a:	e7ff      	b.n	800326c <HAL_SPI_TransmitReceive+0x200>
 800326c:	2003      	movs	r0, #3
      {
        errorcode = HAL_TIMEOUT;
 800326e:	f88d 0013 	strb.w	r0, [sp, #19]
        hspi->State = HAL_SPI_STATE_READY;
 8003272:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003274:	2001      	movs	r0, #1
 8003276:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
        goto error;
 800327a:	e0ac      	b.n	80033d6 <HAL_SPI_TransmitReceive+0x36a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800327c:	e79e      	b.n	80031bc <HAL_SPI_TransmitReceive+0x150>
      }
    }
  }
 800327e:	e07c      	b.n	800337a <HAL_SPI_TransmitReceive+0x30e>
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003280:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003282:	6840      	ldr	r0, [r0, #4]
 8003284:	b128      	cbz	r0, 8003292 <HAL_SPI_TransmitReceive+0x226>
 8003286:	e7ff      	b.n	8003288 <HAL_SPI_TransmitReceive+0x21c>
 8003288:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 800328c:	2801      	cmp	r0, #1
 800328e:	d10e      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x242>
 8003290:	e7ff      	b.n	8003292 <HAL_SPI_TransmitReceive+0x226>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003292:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003294:	6801      	ldr	r1, [r0, #0]
 8003296:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003298:	7800      	ldrb	r0, [r0, #0]
 800329a:	7308      	strb	r0, [r1, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800329c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800329e:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 80032a0:	3001      	adds	r0, #1
 80032a2:	6308      	str	r0, [r1, #48]	@ 0x30
      hspi->TxXferCount--;
 80032a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80032a6:	8ec8      	ldrh	r0, [r1, #54]	@ 0x36
 80032a8:	3801      	subs	r0, #1
 80032aa:	86c8      	strh	r0, [r1, #54]	@ 0x36
    }
 80032ac:	e7ff      	b.n	80032ae <HAL_SPI_TransmitReceive+0x242>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ae:	e7ff      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x244>
 80032b0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80032b2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80032b4:	2001      	movs	r0, #1
 80032b6:	9001      	str	r0, [sp, #4]
 80032b8:	b939      	cbnz	r1, 80032ca <HAL_SPI_TransmitReceive+0x25e>
 80032ba:	e7ff      	b.n	80032bc <HAL_SPI_TransmitReceive+0x250>
 80032bc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80032be:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 80032c0:	2800      	cmp	r0, #0
 80032c2:	bf18      	it	ne
 80032c4:	2001      	movne	r0, #1
 80032c6:	9001      	str	r0, [sp, #4]
 80032c8:	e7ff      	b.n	80032ca <HAL_SPI_TransmitReceive+0x25e>
 80032ca:	9801      	ldr	r0, [sp, #4]
 80032cc:	07c0      	lsls	r0, r0, #31
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d052      	beq.n	8003378 <HAL_SPI_TransmitReceive+0x30c>
 80032d2:	e7ff      	b.n	80032d4 <HAL_SPI_TransmitReceive+0x268>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032d4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80032d6:	6800      	ldr	r0, [r0, #0]
 80032d8:	6880      	ldr	r0, [r0, #8]
 80032da:	0780      	lsls	r0, r0, #30
 80032dc:	2800      	cmp	r0, #0
 80032de:	d518      	bpl.n	8003312 <HAL_SPI_TransmitReceive+0x2a6>
 80032e0:	e7ff      	b.n	80032e2 <HAL_SPI_TransmitReceive+0x276>
 80032e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80032e4:	8ec0      	ldrh	r0, [r0, #54]	@ 0x36
 80032e6:	b1a0      	cbz	r0, 8003312 <HAL_SPI_TransmitReceive+0x2a6>
 80032e8:	e7ff      	b.n	80032ea <HAL_SPI_TransmitReceive+0x27e>
 80032ea:	9805      	ldr	r0, [sp, #20]
 80032ec:	2801      	cmp	r0, #1
 80032ee:	d110      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2a6>
 80032f0:	e7ff      	b.n	80032f2 <HAL_SPI_TransmitReceive+0x286>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032f2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80032f4:	6801      	ldr	r1, [r0, #0]
 80032f6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80032f8:	7800      	ldrb	r0, [r0, #0]
 80032fa:	7308      	strb	r0, [r1, #12]
        hspi->pTxBuffPtr++;
 80032fc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80032fe:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 8003300:	3001      	adds	r0, #1
 8003302:	6308      	str	r0, [r1, #48]	@ 0x30
        hspi->TxXferCount--;
 8003304:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003306:	8ec8      	ldrh	r0, [r1, #54]	@ 0x36
 8003308:	3801      	subs	r0, #1
 800330a:	86c8      	strh	r0, [r1, #54]	@ 0x36
 800330c:	2000      	movs	r0, #0
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800330e:	9005      	str	r0, [sp, #20]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
 8003310:	e7ff      	b.n	8003312 <HAL_SPI_TransmitReceive+0x2a6>

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003312:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003314:	6800      	ldr	r0, [r0, #0]
 8003316:	6880      	ldr	r0, [r0, #8]
 8003318:	07c0      	lsls	r0, r0, #31
 800331a:	b1a8      	cbz	r0, 8003348 <HAL_SPI_TransmitReceive+0x2dc>
 800331c:	e7ff      	b.n	800331e <HAL_SPI_TransmitReceive+0x2b2>
 800331e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003320:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 8003322:	b188      	cbz	r0, 8003348 <HAL_SPI_TransmitReceive+0x2dc>
 8003324:	e7ff      	b.n	8003326 <HAL_SPI_TransmitReceive+0x2ba>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003326:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003328:	6800      	ldr	r0, [r0, #0]
 800332a:	68c0      	ldr	r0, [r0, #12]
 800332c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800332e:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8003330:	7008      	strb	r0, [r1, #0]
        hspi->pRxBuffPtr++;
 8003332:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003334:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8003336:	3001      	adds	r0, #1
 8003338:	6388      	str	r0, [r1, #56]	@ 0x38
        hspi->RxXferCount--;
 800333a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800333c:	8fc8      	ldrh	r0, [r1, #62]	@ 0x3e
 800333e:	3801      	subs	r0, #1
 8003340:	87c8      	strh	r0, [r1, #62]	@ 0x3e
 8003342:	2001      	movs	r0, #1
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003344:	9005      	str	r0, [sp, #20]
      }
 8003346:	e7ff      	b.n	8003348 <HAL_SPI_TransmitReceive+0x2dc>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003348:	f7fe fae0 	bl	800190c <HAL_GetTick>
 800334c:	9906      	ldr	r1, [sp, #24]
 800334e:	1a40      	subs	r0, r0, r1
 8003350:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8003352:	4288      	cmp	r0, r1
 8003354:	d304      	bcc.n	8003360 <HAL_SPI_TransmitReceive+0x2f4>
 8003356:	e7ff      	b.n	8003358 <HAL_SPI_TransmitReceive+0x2ec>
 8003358:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800335a:	3001      	adds	r0, #1
 800335c:	b918      	cbnz	r0, 8003366 <HAL_SPI_TransmitReceive+0x2fa>
 800335e:	e7ff      	b.n	8003360 <HAL_SPI_TransmitReceive+0x2f4>
 8003360:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8003362:	b940      	cbnz	r0, 8003376 <HAL_SPI_TransmitReceive+0x30a>
 8003364:	e7ff      	b.n	8003366 <HAL_SPI_TransmitReceive+0x2fa>
 8003366:	2003      	movs	r0, #3
      {
        errorcode = HAL_TIMEOUT;
 8003368:	f88d 0013 	strb.w	r0, [sp, #19]
        hspi->State = HAL_SPI_STATE_READY;
 800336c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800336e:	2001      	movs	r0, #1
 8003370:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
        goto error;
 8003374:	e02f      	b.n	80033d6 <HAL_SPI_TransmitReceive+0x36a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003376:	e79b      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x244>
 8003378:	e7ff      	b.n	800337a <HAL_SPI_TransmitReceive+0x30e>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800337a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800337c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800337e:	9a06      	ldr	r2, [sp, #24]
 8003380:	f001 fd4e 	bl	8004e20 <SPI_EndRxTxTransaction>
 8003384:	b138      	cbz	r0, 8003396 <HAL_SPI_TransmitReceive+0x32a>
 8003386:	e7ff      	b.n	8003388 <HAL_SPI_TransmitReceive+0x31c>
 8003388:	2001      	movs	r0, #1
  {
    errorcode = HAL_ERROR;
 800338a:	f88d 0013 	strb.w	r0, [sp, #19]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003390:	2020      	movs	r0, #32
 8003392:	6548      	str	r0, [r1, #84]	@ 0x54
    goto error;
 8003394:	e01f      	b.n	80033d6 <HAL_SPI_TransmitReceive+0x36a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003396:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003398:	6880      	ldr	r0, [r0, #8]
 800339a:	b970      	cbnz	r0, 80033ba <HAL_SPI_TransmitReceive+0x34e>
 800339c:	e7ff      	b.n	800339e <HAL_SPI_TransmitReceive+0x332>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339e:	e7ff      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x334>
 80033a0:	2000      	movs	r0, #0
 80033a2:	9003      	str	r0, [sp, #12]
 80033a4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80033a6:	6800      	ldr	r0, [r0, #0]
 80033a8:	68c0      	ldr	r0, [r0, #12]
 80033aa:	9003      	str	r0, [sp, #12]
 80033ac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80033ae:	6800      	ldr	r0, [r0, #0]
 80033b0:	6880      	ldr	r0, [r0, #8]
 80033b2:	9003      	str	r0, [sp, #12]
 80033b4:	9803      	ldr	r0, [sp, #12]
 80033b6:	e7ff      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x34c>
  }
 80033b8:	e7ff      	b.n	80033ba <HAL_SPI_TransmitReceive+0x34e>

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033ba:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80033bc:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 80033be:	b120      	cbz	r0, 80033ca <HAL_SPI_TransmitReceive+0x35e>
 80033c0:	e7ff      	b.n	80033c2 <HAL_SPI_TransmitReceive+0x356>
 80033c2:	2001      	movs	r0, #1
  {
    errorcode = HAL_ERROR;
 80033c4:	f88d 0013 	strb.w	r0, [sp, #19]
  }
 80033c8:	e004      	b.n	80033d4 <HAL_SPI_TransmitReceive+0x368>
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80033cc:	2001      	movs	r0, #1
 80033ce:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
 80033d2:	e7ff      	b.n	80033d4 <HAL_SPI_TransmitReceive+0x368>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033d4:	e7ff      	b.n	80033d6 <HAL_SPI_TransmitReceive+0x36a>
  }
  
error :
  __HAL_UNLOCK(hspi);
 80033d6:	e7ff      	b.n	80033d8 <HAL_SPI_TransmitReceive+0x36c>
 80033d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80033da:	2000      	movs	r0, #0
 80033dc:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
 80033e0:	e7ff      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x376>
  return errorcode;
 80033e2:	f89d 0013 	ldrb.w	r0, [sp, #19]
 80033e6:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 80033ea:	e7ff      	b.n	80033ec <HAL_SPI_TransmitReceive+0x380>
}
 80033ec:	f89d 0037 	ldrb.w	r0, [sp, #55]	@ 0x37
 80033f0:	b00e      	add	sp, #56	@ 0x38
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	9001      	str	r0, [sp, #4]
   return SysTick_Config(TicksNumb);
 80033fa:	9801      	ldr	r0, [sp, #4]
 80033fc:	f001 fdca 	bl	8004f94 <SysTick_Config>
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b081      	sub	sp, #4
 8003406:	9000      	str	r0, [sp, #0]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003408:	b001      	add	sp, #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIMEx_CommutCallback>:
{
 800340c:	b081      	sub	sp, #4
 800340e:	9000      	str	r0, [sp, #0]
}
 8003410:	b001      	add	sp, #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIMEx_MasterConfigSynchronization>:
{
 8003414:	b085      	sub	sp, #20
 8003416:	9003      	str	r0, [sp, #12]
 8003418:	9102      	str	r1, [sp, #8]
  __HAL_LOCK(htim);
 800341a:	e7ff      	b.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x8>
 800341c:	9803      	ldr	r0, [sp, #12]
 800341e:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003422:	2801      	cmp	r0, #1
 8003424:	d104      	bne.n	8003430 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
 8003426:	e7ff      	b.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0x14>
 8003428:	2002      	movs	r0, #2
 800342a:	f88d 0013 	strb.w	r0, [sp, #19]
 800342e:	e05b      	b.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>
 8003430:	9903      	ldr	r1, [sp, #12]
 8003432:	2001      	movs	r0, #1
 8003434:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8003438:	e7ff      	b.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800343a:	e7ff      	b.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	9903      	ldr	r1, [sp, #12]
 800343e:	2002      	movs	r0, #2
 8003440:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003444:	9803      	ldr	r0, [sp, #12]
 8003446:	6800      	ldr	r0, [r0, #0]
 8003448:	6840      	ldr	r0, [r0, #4]
 800344a:	9001      	str	r0, [sp, #4]
  tmpsmcr = htim->Instance->SMCR;
 800344c:	9803      	ldr	r0, [sp, #12]
 800344e:	6800      	ldr	r0, [r0, #0]
 8003450:	6880      	ldr	r0, [r0, #8]
 8003452:	9000      	str	r0, [sp, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003454:	9801      	ldr	r0, [sp, #4]
 8003456:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 800345a:	9001      	str	r0, [sp, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800345c:	9802      	ldr	r0, [sp, #8]
 800345e:	6801      	ldr	r1, [r0, #0]
 8003460:	9801      	ldr	r0, [sp, #4]
 8003462:	4308      	orrs	r0, r1
 8003464:	9001      	str	r0, [sp, #4]
  htim->Instance->CR2 = tmpcr2;
 8003466:	9801      	ldr	r0, [sp, #4]
 8003468:	9903      	ldr	r1, [sp, #12]
 800346a:	6809      	ldr	r1, [r1, #0]
 800346c:	6048      	str	r0, [r1, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346e:	9803      	ldr	r0, [sp, #12]
 8003470:	6800      	ldr	r0, [r0, #0]
 8003472:	f642 4100 	movw	r1, #11264	@ 0x2c00
 8003476:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 800347a:	4288      	cmp	r0, r1
 800347c:	d018      	beq.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800347e:	e7ff      	b.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8003480:	9803      	ldr	r0, [sp, #12]
 8003482:	6800      	ldr	r0, [r0, #0]
 8003484:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003488:	d012      	beq.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800348a:	e7ff      	b.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800348c:	9803      	ldr	r0, [sp, #12]
 800348e:	6800      	ldr	r0, [r0, #0]
 8003490:	f240 4100 	movw	r1, #1024	@ 0x400
 8003494:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 8003498:	4288      	cmp	r0, r1
 800349a:	d009      	beq.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800349c:	e7ff      	b.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 800349e:	9803      	ldr	r0, [sp, #12]
 80034a0:	6800      	ldr	r0, [r0, #0]
 80034a2:	f640 0100 	movw	r1, #2048	@ 0x800
 80034a6:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 80034aa:	4288      	cmp	r0, r1
 80034ac:	d10e      	bne.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80034ae:	e7ff      	b.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034b0:	9800      	ldr	r0, [sp, #0]
 80034b2:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 80034b6:	9000      	str	r0, [sp, #0]
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b8:	9802      	ldr	r0, [sp, #8]
 80034ba:	6841      	ldr	r1, [r0, #4]
 80034bc:	9800      	ldr	r0, [sp, #0]
 80034be:	4308      	orrs	r0, r1
 80034c0:	9000      	str	r0, [sp, #0]
    htim->Instance->SMCR = tmpsmcr;
 80034c2:	9800      	ldr	r0, [sp, #0]
 80034c4:	9903      	ldr	r1, [sp, #12]
 80034c6:	6809      	ldr	r1, [r1, #0]
 80034c8:	6088      	str	r0, [r1, #8]
  }
 80034ca:	e7ff      	b.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	9903      	ldr	r1, [sp, #12]
 80034ce:	2001      	movs	r0, #1
 80034d0:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80034d4:	e7ff      	b.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80034d6:	9903      	ldr	r1, [sp, #12]
 80034d8:	2000      	movs	r0, #0
 80034da:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80034de:	e7ff      	b.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80034e0:	2000      	movs	r0, #0
  return HAL_OK;
 80034e2:	f88d 0013 	strb.w	r0, [sp, #19]
 80034e6:	e7ff      	b.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>
}
 80034e8:	f89d 0013 	ldrb.w	r0, [sp, #19]
 80034ec:	b005      	add	sp, #20
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	9000      	str	r0, [sp, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f6:	9800      	ldr	r0, [sp, #0]
 80034f8:	b920      	cbnz	r0, 8003504 <HAL_TIM_Base_Init+0x14>
 80034fa:	e7ff      	b.n	80034fc <HAL_TIM_Base_Init+0xc>
 80034fc:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
 80034fe:	f88d 0007 	strb.w	r0, [sp, #7]
 8003502:	e03f      	b.n	8003584 <HAL_TIM_Base_Init+0x94>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003504:	9800      	ldr	r0, [sp, #0]
 8003506:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
 800350a:	b940      	cbnz	r0, 800351e <HAL_TIM_Base_Init+0x2e>
 800350c:	e7ff      	b.n	800350e <HAL_TIM_Base_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350e:	9900      	ldr	r1, [sp, #0]
 8003510:	2000      	movs	r0, #0
 8003512:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003516:	9800      	ldr	r0, [sp, #0]
 8003518:	f000 f838 	bl	800358c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
 800351c:	e7ff      	b.n	800351e <HAL_TIM_Base_Init+0x2e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351e:	9900      	ldr	r1, [sp, #0]
 8003520:	2002      	movs	r0, #2
 8003522:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003526:	9900      	ldr	r1, [sp, #0]
 8003528:	f851 0b04 	ldr.w	r0, [r1], #4
 800352c:	f001 fda0 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	9900      	ldr	r1, [sp, #0]
 8003532:	2001      	movs	r0, #1
 8003534:	f881 0046 	strb.w	r0, [r1, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	e7ff      	b.n	800353a <HAL_TIM_Base_Init+0x4a>
 800353a:	9900      	ldr	r1, [sp, #0]
 800353c:	2001      	movs	r0, #1
 800353e:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
 8003542:	9900      	ldr	r1, [sp, #0]
 8003544:	f881 003f 	strb.w	r0, [r1, #63]	@ 0x3f
 8003548:	9900      	ldr	r1, [sp, #0]
 800354a:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 800354e:	9900      	ldr	r1, [sp, #0]
 8003550:	f881 0041 	strb.w	r0, [r1, #65]	@ 0x41
 8003554:	e7ff      	b.n	8003556 <HAL_TIM_Base_Init+0x66>
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003556:	e7ff      	b.n	8003558 <HAL_TIM_Base_Init+0x68>
 8003558:	9900      	ldr	r1, [sp, #0]
 800355a:	2001      	movs	r0, #1
 800355c:	f881 0042 	strb.w	r0, [r1, #66]	@ 0x42
 8003560:	9900      	ldr	r1, [sp, #0]
 8003562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003566:	9900      	ldr	r1, [sp, #0]
 8003568:	f881 0044 	strb.w	r0, [r1, #68]	@ 0x44
 800356c:	9900      	ldr	r1, [sp, #0]
 800356e:	f881 0045 	strb.w	r0, [r1, #69]	@ 0x45
 8003572:	e7ff      	b.n	8003574 <HAL_TIM_Base_Init+0x84>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003574:	9900      	ldr	r1, [sp, #0]
 8003576:	2001      	movs	r0, #1
 8003578:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 800357c:	2000      	movs	r0, #0

  return HAL_OK;
 800357e:	f88d 0007 	strb.w	r0, [sp, #7]
 8003582:	e7ff      	b.n	8003584 <HAL_TIM_Base_Init+0x94>
}
 8003584:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	9003      	str	r0, [sp, #12]

  if(tim_baseHandle->Instance==TIM2)
 8003592:	9803      	ldr	r0, [sp, #12]
 8003594:	6800      	ldr	r0, [r0, #0]
 8003596:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800359a:	d119      	bne.n	80035d0 <HAL_TIM_Base_MspInit+0x44>
 800359c:	e7ff      	b.n	800359e <HAL_TIM_Base_MspInit+0x12>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800359e:	e7ff      	b.n	80035a0 <HAL_TIM_Base_MspInit+0x14>
 80035a0:	f241 001c 	movw	r0, #4124	@ 0x101c
 80035a4:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80035a8:	6801      	ldr	r1, [r0, #0]
 80035aa:	f041 0101 	orr.w	r1, r1, #1
 80035ae:	6001      	str	r1, [r0, #0]
 80035b0:	6800      	ldr	r0, [r0, #0]
 80035b2:	f000 0001 	and.w	r0, r0, #1
 80035b6:	9002      	str	r0, [sp, #8]
 80035b8:	9802      	ldr	r0, [sp, #8]
 80035ba:	e7ff      	b.n	80035bc <HAL_TIM_Base_MspInit+0x30>
 80035bc:	201c      	movs	r0, #28
 80035be:	9001      	str	r0, [sp, #4]
 80035c0:	210f      	movs	r1, #15
 80035c2:	2200      	movs	r2, #0

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80035c4:	f7fe fcd8 	bl	8001f78 <HAL_NVIC_SetPriority>
 80035c8:	9801      	ldr	r0, [sp, #4]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035ca:	f7fe fccb 	bl	8001f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
 80035ce:	e7ff      	b.n	80035d0 <HAL_TIM_Base_MspInit+0x44>
}
 80035d0:	b004      	add	sp, #16
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d4:	b083      	sub	sp, #12
 80035d6:	9001      	str	r0, [sp, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d8:	9801      	ldr	r0, [sp, #4]
 80035da:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
 80035de:	2801      	cmp	r0, #1
 80035e0:	d004      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x18>
 80035e2:	e7ff      	b.n	80035e4 <HAL_TIM_Base_Start_IT+0x10>
 80035e4:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
 80035e6:	f88d 000b 	strb.w	r0, [sp, #11]
 80035ea:	e047      	b.n	800367c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	9901      	ldr	r1, [sp, #4]
 80035ee:	2002      	movs	r0, #2
 80035f0:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f4:	9801      	ldr	r0, [sp, #4]
 80035f6:	6801      	ldr	r1, [r0, #0]
 80035f8:	68c8      	ldr	r0, [r1, #12]
 80035fa:	f040 0001 	orr.w	r0, r0, #1
 80035fe:	60c8      	str	r0, [r1, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003600:	9801      	ldr	r0, [sp, #4]
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	f642 4100 	movw	r1, #11264	@ 0x2c00
 8003608:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 800360c:	4288      	cmp	r0, r1
 800360e:	d018      	beq.n	8003642 <HAL_TIM_Base_Start_IT+0x6e>
 8003610:	e7ff      	b.n	8003612 <HAL_TIM_Base_Start_IT+0x3e>
 8003612:	9801      	ldr	r0, [sp, #4]
 8003614:	6800      	ldr	r0, [r0, #0]
 8003616:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800361a:	d012      	beq.n	8003642 <HAL_TIM_Base_Start_IT+0x6e>
 800361c:	e7ff      	b.n	800361e <HAL_TIM_Base_Start_IT+0x4a>
 800361e:	9801      	ldr	r0, [sp, #4]
 8003620:	6800      	ldr	r0, [r0, #0]
 8003622:	f240 4100 	movw	r1, #1024	@ 0x400
 8003626:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 800362a:	4288      	cmp	r0, r1
 800362c:	d009      	beq.n	8003642 <HAL_TIM_Base_Start_IT+0x6e>
 800362e:	e7ff      	b.n	8003630 <HAL_TIM_Base_Start_IT+0x5c>
 8003630:	9801      	ldr	r0, [sp, #4]
 8003632:	6800      	ldr	r0, [r0, #0]
 8003634:	f640 0100 	movw	r1, #2048	@ 0x800
 8003638:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 800363c:	4288      	cmp	r0, r1
 800363e:	d112      	bne.n	8003666 <HAL_TIM_Base_Start_IT+0x92>
 8003640:	e7ff      	b.n	8003642 <HAL_TIM_Base_Start_IT+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003642:	9801      	ldr	r0, [sp, #4]
 8003644:	6800      	ldr	r0, [r0, #0]
 8003646:	6880      	ldr	r0, [r0, #8]
 8003648:	f000 0007 	and.w	r0, r0, #7
 800364c:	9000      	str	r0, [sp, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	9800      	ldr	r0, [sp, #0]
 8003650:	2806      	cmp	r0, #6
 8003652:	d007      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x90>
 8003654:	e7ff      	b.n	8003656 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003656:	9801      	ldr	r0, [sp, #4]
 8003658:	6801      	ldr	r1, [r0, #0]
 800365a:	6808      	ldr	r0, [r1, #0]
 800365c:	f040 0001 	orr.w	r0, r0, #1
 8003660:	6008      	str	r0, [r1, #0]
    }
 8003662:	e7ff      	b.n	8003664 <HAL_TIM_Base_Start_IT+0x90>
  }
 8003664:	e006      	b.n	8003674 <HAL_TIM_Base_Start_IT+0xa0>
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003666:	9801      	ldr	r0, [sp, #4]
 8003668:	6801      	ldr	r1, [r0, #0]
 800366a:	6808      	ldr	r0, [r1, #0]
 800366c:	f040 0001 	orr.w	r0, r0, #1
 8003670:	6008      	str	r0, [r1, #0]
 8003672:	e7ff      	b.n	8003674 <HAL_TIM_Base_Start_IT+0xa0>
 8003674:	2000      	movs	r0, #0
  }

  /* Return function status */
  return HAL_OK;
 8003676:	f88d 000b 	strb.w	r0, [sp, #11]
 800367a:	e7ff      	b.n	800367c <HAL_TIM_Base_Start_IT+0xa8>
}
 800367c:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003680:	b003      	add	sp, #12
 8003682:	4770      	bx	lr

08003684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	9004      	str	r0, [sp, #16]
 800368a:	9103      	str	r1, [sp, #12]
 800368c:	2000      	movs	r0, #0
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	f88d 000b 	strb.w	r0, [sp, #11]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003692:	e7ff      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x10>
 8003694:	9804      	ldr	r0, [sp, #16]
 8003696:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800369a:	2801      	cmp	r0, #1
 800369c:	d104      	bne.n	80036a8 <HAL_TIM_ConfigClockSource+0x24>
 800369e:	e7ff      	b.n	80036a0 <HAL_TIM_ConfigClockSource+0x1c>
 80036a0:	2002      	movs	r0, #2
 80036a2:	f88d 0017 	strb.w	r0, [sp, #23]
 80036a6:	e0ab      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x17c>
 80036a8:	9904      	ldr	r1, [sp, #16]
 80036aa:	2001      	movs	r0, #1
 80036ac:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80036b0:	e7ff      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x2e>
 80036b2:	e7ff      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x30>

  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	9904      	ldr	r1, [sp, #16]
 80036b6:	2002      	movs	r0, #2
 80036b8:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	9804      	ldr	r0, [sp, #16]
 80036be:	6800      	ldr	r0, [r0, #0]
 80036c0:	6880      	ldr	r0, [r0, #8]
 80036c2:	9001      	str	r0, [sp, #4]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036c4:	9801      	ldr	r0, [sp, #4]
 80036c6:	f020 0077 	bic.w	r0, r0, #119	@ 0x77
 80036ca:	9001      	str	r0, [sp, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036cc:	9801      	ldr	r0, [sp, #4]
 80036ce:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 80036d2:	9001      	str	r0, [sp, #4]
  htim->Instance->SMCR = tmpsmcr;
 80036d4:	9801      	ldr	r0, [sp, #4]
 80036d6:	9904      	ldr	r1, [sp, #16]
 80036d8:	6809      	ldr	r1, [r1, #0]
 80036da:	6088      	str	r0, [r1, #8]

  switch (sClockSourceConfig->ClockSource)
 80036dc:	9803      	ldr	r0, [sp, #12]
 80036de:	6800      	ldr	r0, [r0, #0]
 80036e0:	9000      	str	r0, [sp, #0]
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d072      	beq.n	80037cc <HAL_TIM_ConfigClockSource+0x148>
 80036e6:	e7ff      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x64>
 80036e8:	9800      	ldr	r0, [sp, #0]
 80036ea:	2810      	cmp	r0, #16
 80036ec:	d06e      	beq.n	80037cc <HAL_TIM_ConfigClockSource+0x148>
 80036ee:	e7ff      	b.n	80036f0 <HAL_TIM_ConfigClockSource+0x6c>
 80036f0:	9800      	ldr	r0, [sp, #0]
 80036f2:	2820      	cmp	r0, #32
 80036f4:	d06a      	beq.n	80037cc <HAL_TIM_ConfigClockSource+0x148>
 80036f6:	e7ff      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x74>
 80036f8:	9800      	ldr	r0, [sp, #0]
 80036fa:	2830      	cmp	r0, #48	@ 0x30
 80036fc:	d066      	beq.n	80037cc <HAL_TIM_ConfigClockSource+0x148>
 80036fe:	e7ff      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x7c>
 8003700:	9800      	ldr	r0, [sp, #0]
 8003702:	2840      	cmp	r0, #64	@ 0x40
 8003704:	d055      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x12e>
 8003706:	e7ff      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x84>
 8003708:	9800      	ldr	r0, [sp, #0]
 800370a:	2850      	cmp	r0, #80	@ 0x50
 800370c:	d037      	beq.n	800377e <HAL_TIM_ConfigClockSource+0xfa>
 800370e:	e7ff      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x8c>
 8003710:	9800      	ldr	r0, [sp, #0]
 8003712:	2860      	cmp	r0, #96	@ 0x60
 8003714:	d040      	beq.n	8003798 <HAL_TIM_ConfigClockSource+0x114>
 8003716:	e7ff      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x94>
 8003718:	9800      	ldr	r0, [sp, #0]
 800371a:	2870      	cmp	r0, #112	@ 0x70
 800371c:	d00b      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0xb2>
 800371e:	e7ff      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x9c>
 8003720:	9800      	ldr	r0, [sp, #0]
 8003722:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003726:	d005      	beq.n	8003734 <HAL_TIM_ConfigClockSource+0xb0>
 8003728:	e7ff      	b.n	800372a <HAL_TIM_ConfigClockSource+0xa6>
 800372a:	9800      	ldr	r0, [sp, #0]
 800372c:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8003730:	d016      	beq.n	8003760 <HAL_TIM_ConfigClockSource+0xdc>
 8003732:	e052      	b.n	80037da <HAL_TIM_ConfigClockSource+0x156>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      break;
 8003734:	e055      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003736:	9804      	ldr	r0, [sp, #16]
 8003738:	6800      	ldr	r0, [r0, #0]
                        sClockSourceConfig->ClockPrescaler,
 800373a:	9b03      	ldr	r3, [sp, #12]
                        sClockSourceConfig->ClockPolarity,
 800373c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockPrescaler,
 800373e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockFilter);
 8003740:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003742:	f001 fd29 	bl	8005198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003746:	9804      	ldr	r0, [sp, #16]
 8003748:	6800      	ldr	r0, [r0, #0]
 800374a:	6880      	ldr	r0, [r0, #8]
 800374c:	9001      	str	r0, [sp, #4]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800374e:	9801      	ldr	r0, [sp, #4]
 8003750:	f040 0077 	orr.w	r0, r0, #119	@ 0x77
 8003754:	9001      	str	r0, [sp, #4]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003756:	9801      	ldr	r0, [sp, #4]
 8003758:	9904      	ldr	r1, [sp, #16]
 800375a:	6809      	ldr	r1, [r1, #0]
 800375c:	6088      	str	r0, [r1, #8]
      break;
 800375e:	e040      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003760:	9804      	ldr	r0, [sp, #16]
 8003762:	6800      	ldr	r0, [r0, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003764:	9b03      	ldr	r3, [sp, #12]
                        sClockSourceConfig->ClockPolarity,
 8003766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockPrescaler,
 8003768:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockFilter);
 800376a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800376c:	f001 fd14 	bl	8005198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003770:	9804      	ldr	r0, [sp, #16]
 8003772:	6801      	ldr	r1, [r0, #0]
 8003774:	6888      	ldr	r0, [r1, #8]
 8003776:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 800377a:	6088      	str	r0, [r1, #8]
      break;
 800377c:	e031      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800377e:	9804      	ldr	r0, [sp, #16]
 8003780:	6800      	ldr	r0, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8003782:	9a03      	ldr	r2, [sp, #12]
 8003784:	6851      	ldr	r1, [r2, #4]
                               sClockSourceConfig->ClockFilter);
 8003786:	68d2      	ldr	r2, [r2, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003788:	f001 fec2 	bl	8005510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800378c:	9804      	ldr	r0, [sp, #16]
 800378e:	6800      	ldr	r0, [r0, #0]
 8003790:	2150      	movs	r1, #80	@ 0x50
 8003792:	f001 fd1b 	bl	80051cc <TIM_ITRx_SetConfig>
      break;
 8003796:	e024      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003798:	9804      	ldr	r0, [sp, #16]
 800379a:	6800      	ldr	r0, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800379c:	9a03      	ldr	r2, [sp, #12]
 800379e:	6851      	ldr	r1, [r2, #4]
                               sClockSourceConfig->ClockFilter);
 80037a0:	68d2      	ldr	r2, [r2, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a2:	f001 fedd 	bl	8005560 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a6:	9804      	ldr	r0, [sp, #16]
 80037a8:	6800      	ldr	r0, [r0, #0]
 80037aa:	2160      	movs	r1, #96	@ 0x60
 80037ac:	f001 fd0e 	bl	80051cc <TIM_ITRx_SetConfig>
      break;
 80037b0:	e017      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b2:	9804      	ldr	r0, [sp, #16]
 80037b4:	6800      	ldr	r0, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b6:	9a03      	ldr	r2, [sp, #12]
 80037b8:	6851      	ldr	r1, [r2, #4]
                               sClockSourceConfig->ClockFilter);
 80037ba:	68d2      	ldr	r2, [r2, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037bc:	f001 fea8 	bl	8005510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c0:	9804      	ldr	r0, [sp, #16]
 80037c2:	6800      	ldr	r0, [r0, #0]
 80037c4:	2140      	movs	r1, #64	@ 0x40
 80037c6:	f001 fd01 	bl	80051cc <TIM_ITRx_SetConfig>
      break;
 80037ca:	e00a      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037cc:	9804      	ldr	r0, [sp, #16]
 80037ce:	6800      	ldr	r0, [r0, #0]
 80037d0:	9903      	ldr	r1, [sp, #12]
 80037d2:	6809      	ldr	r1, [r1, #0]
 80037d4:	f001 fcfa 	bl	80051cc <TIM_ITRx_SetConfig>
      break;
 80037d8:	e003      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x15e>
 80037da:	2001      	movs	r0, #1
    }

    default:
      status = HAL_ERROR;
 80037dc:	f88d 000b 	strb.w	r0, [sp, #11]
      break;
 80037e0:	e7ff      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x15e>
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e2:	9904      	ldr	r1, [sp, #16]
 80037e4:	2001      	movs	r0, #1
 80037e6:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037ea:	e7ff      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x168>
 80037ec:	9904      	ldr	r1, [sp, #16]
 80037ee:	2000      	movs	r0, #0
 80037f0:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80037f4:	e7ff      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x172>

  return status;
 80037f6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80037fa:	f88d 0017 	strb.w	r0, [sp, #23]
 80037fe:	e7ff      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x17c>
}
 8003800:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003804:	b006      	add	sp, #24
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b081      	sub	sp, #4
 800380a:	9000      	str	r0, [sp, #0]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800380c:	b001      	add	sp, #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIM_IRQHandler>:
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	9001      	str	r0, [sp, #4]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003816:	9801      	ldr	r0, [sp, #4]
 8003818:	6800      	ldr	r0, [r0, #0]
 800381a:	6900      	ldr	r0, [r0, #16]
 800381c:	f000 0102 	and.w	r1, r0, #2
 8003820:	2000      	movs	r0, #0
 8003822:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
 8003826:	d028      	beq.n	800387a <HAL_TIM_IRQHandler+0x6a>
 8003828:	e7ff      	b.n	800382a <HAL_TIM_IRQHandler+0x1a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800382a:	9801      	ldr	r0, [sp, #4]
 800382c:	6800      	ldr	r0, [r0, #0]
 800382e:	68c0      	ldr	r0, [r0, #12]
 8003830:	f000 0102 	and.w	r1, r0, #2
 8003834:	2000      	movs	r0, #0
 8003836:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
 800383a:	d01d      	beq.n	8003878 <HAL_TIM_IRQHandler+0x68>
 800383c:	e7ff      	b.n	800383e <HAL_TIM_IRQHandler+0x2e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800383e:	9801      	ldr	r0, [sp, #4]
 8003840:	6801      	ldr	r1, [r0, #0]
 8003842:	f06f 0002 	mvn.w	r0, #2
 8003846:	6108      	str	r0, [r1, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003848:	9901      	ldr	r1, [sp, #4]
 800384a:	2001      	movs	r0, #1
 800384c:	7708      	strb	r0, [r1, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800384e:	9801      	ldr	r0, [sp, #4]
 8003850:	6800      	ldr	r0, [r0, #0]
 8003852:	6980      	ldr	r0, [r0, #24]
 8003854:	0780      	lsls	r0, r0, #30
 8003856:	b120      	cbz	r0, 8003862 <HAL_TIM_IRQHandler+0x52>
 8003858:	e7ff      	b.n	800385a <HAL_TIM_IRQHandler+0x4a>
          HAL_TIM_IC_CaptureCallback(htim);
 800385a:	9801      	ldr	r0, [sp, #4]
 800385c:	f7ff ffd4 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
        }
 8003860:	e006      	b.n	8003870 <HAL_TIM_IRQHandler+0x60>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	9801      	ldr	r0, [sp, #4]
 8003864:	f000 f942 	bl	8003aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	9801      	ldr	r0, [sp, #4]
 800386a:	f000 fa51 	bl	8003d10 <HAL_TIM_PWM_PulseFinishedCallback>
 800386e:	e7ff      	b.n	8003870 <HAL_TIM_IRQHandler+0x60>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003870:	9901      	ldr	r1, [sp, #4]
 8003872:	2000      	movs	r0, #0
 8003874:	7708      	strb	r0, [r1, #28]
    }
 8003876:	e7ff      	b.n	8003878 <HAL_TIM_IRQHandler+0x68>
  }
 8003878:	e7ff      	b.n	800387a <HAL_TIM_IRQHandler+0x6a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800387a:	9801      	ldr	r0, [sp, #4]
 800387c:	6800      	ldr	r0, [r0, #0]
 800387e:	6900      	ldr	r0, [r0, #16]
 8003880:	f000 0104 	and.w	r1, r0, #4
 8003884:	2000      	movs	r0, #0
 8003886:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 800388a:	d029      	beq.n	80038e0 <HAL_TIM_IRQHandler+0xd0>
 800388c:	e7ff      	b.n	800388e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800388e:	9801      	ldr	r0, [sp, #4]
 8003890:	6800      	ldr	r0, [r0, #0]
 8003892:	68c0      	ldr	r0, [r0, #12]
 8003894:	f000 0104 	and.w	r1, r0, #4
 8003898:	2000      	movs	r0, #0
 800389a:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 800389e:	d01e      	beq.n	80038de <HAL_TIM_IRQHandler+0xce>
 80038a0:	e7ff      	b.n	80038a2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a2:	9801      	ldr	r0, [sp, #4]
 80038a4:	6801      	ldr	r1, [r0, #0]
 80038a6:	f06f 0004 	mvn.w	r0, #4
 80038aa:	6108      	str	r0, [r1, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ac:	9901      	ldr	r1, [sp, #4]
 80038ae:	2002      	movs	r0, #2
 80038b0:	7708      	strb	r0, [r1, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b2:	9801      	ldr	r0, [sp, #4]
 80038b4:	6800      	ldr	r0, [r0, #0]
 80038b6:	6980      	ldr	r0, [r0, #24]
 80038b8:	f410 7f40 	tst.w	r0, #768	@ 0x300
 80038bc:	d004      	beq.n	80038c8 <HAL_TIM_IRQHandler+0xb8>
 80038be:	e7ff      	b.n	80038c0 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 80038c0:	9801      	ldr	r0, [sp, #4]
 80038c2:	f7ff ffa1 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
      }
 80038c6:	e006      	b.n	80038d6 <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c8:	9801      	ldr	r0, [sp, #4]
 80038ca:	f000 f90f 	bl	8003aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ce:	9801      	ldr	r0, [sp, #4]
 80038d0:	f000 fa1e 	bl	8003d10 <HAL_TIM_PWM_PulseFinishedCallback>
 80038d4:	e7ff      	b.n	80038d6 <HAL_TIM_IRQHandler+0xc6>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	9901      	ldr	r1, [sp, #4]
 80038d8:	2000      	movs	r0, #0
 80038da:	7708      	strb	r0, [r1, #28]
    }
 80038dc:	e7ff      	b.n	80038de <HAL_TIM_IRQHandler+0xce>
  }
 80038de:	e7ff      	b.n	80038e0 <HAL_TIM_IRQHandler+0xd0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038e0:	9801      	ldr	r0, [sp, #4]
 80038e2:	6800      	ldr	r0, [r0, #0]
 80038e4:	6900      	ldr	r0, [r0, #16]
 80038e6:	f000 0108 	and.w	r1, r0, #8
 80038ea:	2000      	movs	r0, #0
 80038ec:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
 80038f0:	d028      	beq.n	8003944 <HAL_TIM_IRQHandler+0x134>
 80038f2:	e7ff      	b.n	80038f4 <HAL_TIM_IRQHandler+0xe4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038f4:	9801      	ldr	r0, [sp, #4]
 80038f6:	6800      	ldr	r0, [r0, #0]
 80038f8:	68c0      	ldr	r0, [r0, #12]
 80038fa:	f000 0108 	and.w	r1, r0, #8
 80038fe:	2000      	movs	r0, #0
 8003900:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
 8003904:	d01d      	beq.n	8003942 <HAL_TIM_IRQHandler+0x132>
 8003906:	e7ff      	b.n	8003908 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003908:	9801      	ldr	r0, [sp, #4]
 800390a:	6801      	ldr	r1, [r0, #0]
 800390c:	f06f 0008 	mvn.w	r0, #8
 8003910:	6108      	str	r0, [r1, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003912:	9901      	ldr	r1, [sp, #4]
 8003914:	2004      	movs	r0, #4
 8003916:	7708      	strb	r0, [r1, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003918:	9801      	ldr	r0, [sp, #4]
 800391a:	6800      	ldr	r0, [r0, #0]
 800391c:	69c0      	ldr	r0, [r0, #28]
 800391e:	0780      	lsls	r0, r0, #30
 8003920:	b120      	cbz	r0, 800392c <HAL_TIM_IRQHandler+0x11c>
 8003922:	e7ff      	b.n	8003924 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8003924:	9801      	ldr	r0, [sp, #4]
 8003926:	f7ff ff6f 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
      }
 800392a:	e006      	b.n	800393a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392c:	9801      	ldr	r0, [sp, #4]
 800392e:	f000 f8dd 	bl	8003aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003932:	9801      	ldr	r0, [sp, #4]
 8003934:	f000 f9ec 	bl	8003d10 <HAL_TIM_PWM_PulseFinishedCallback>
 8003938:	e7ff      	b.n	800393a <HAL_TIM_IRQHandler+0x12a>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	9901      	ldr	r1, [sp, #4]
 800393c:	2000      	movs	r0, #0
 800393e:	7708      	strb	r0, [r1, #28]
    }
 8003940:	e7ff      	b.n	8003942 <HAL_TIM_IRQHandler+0x132>
  }
 8003942:	e7ff      	b.n	8003944 <HAL_TIM_IRQHandler+0x134>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003944:	9801      	ldr	r0, [sp, #4]
 8003946:	6800      	ldr	r0, [r0, #0]
 8003948:	6900      	ldr	r0, [r0, #16]
 800394a:	f000 0110 	and.w	r1, r0, #16
 800394e:	2000      	movs	r0, #0
 8003950:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
 8003954:	d029      	beq.n	80039aa <HAL_TIM_IRQHandler+0x19a>
 8003956:	e7ff      	b.n	8003958 <HAL_TIM_IRQHandler+0x148>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003958:	9801      	ldr	r0, [sp, #4]
 800395a:	6800      	ldr	r0, [r0, #0]
 800395c:	68c0      	ldr	r0, [r0, #12]
 800395e:	f000 0110 	and.w	r1, r0, #16
 8003962:	2000      	movs	r0, #0
 8003964:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
 8003968:	d01e      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x198>
 800396a:	e7ff      	b.n	800396c <HAL_TIM_IRQHandler+0x15c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800396c:	9801      	ldr	r0, [sp, #4]
 800396e:	6801      	ldr	r1, [r0, #0]
 8003970:	f06f 0010 	mvn.w	r0, #16
 8003974:	6108      	str	r0, [r1, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003976:	9901      	ldr	r1, [sp, #4]
 8003978:	2008      	movs	r0, #8
 800397a:	7708      	strb	r0, [r1, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800397c:	9801      	ldr	r0, [sp, #4]
 800397e:	6800      	ldr	r0, [r0, #0]
 8003980:	69c0      	ldr	r0, [r0, #28]
 8003982:	f410 7f40 	tst.w	r0, #768	@ 0x300
 8003986:	d004      	beq.n	8003992 <HAL_TIM_IRQHandler+0x182>
 8003988:	e7ff      	b.n	800398a <HAL_TIM_IRQHandler+0x17a>
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	9801      	ldr	r0, [sp, #4]
 800398c:	f7ff ff3c 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
      }
 8003990:	e006      	b.n	80039a0 <HAL_TIM_IRQHandler+0x190>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003992:	9801      	ldr	r0, [sp, #4]
 8003994:	f000 f8aa 	bl	8003aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	9801      	ldr	r0, [sp, #4]
 800399a:	f000 f9b9 	bl	8003d10 <HAL_TIM_PWM_PulseFinishedCallback>
 800399e:	e7ff      	b.n	80039a0 <HAL_TIM_IRQHandler+0x190>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a0:	9901      	ldr	r1, [sp, #4]
 80039a2:	2000      	movs	r0, #0
 80039a4:	7708      	strb	r0, [r1, #28]
    }
 80039a6:	e7ff      	b.n	80039a8 <HAL_TIM_IRQHandler+0x198>
  }
 80039a8:	e7ff      	b.n	80039aa <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039aa:	9801      	ldr	r0, [sp, #4]
 80039ac:	6800      	ldr	r0, [r0, #0]
 80039ae:	6900      	ldr	r0, [r0, #16]
 80039b0:	07c0      	lsls	r0, r0, #31
 80039b2:	b180      	cbz	r0, 80039d6 <HAL_TIM_IRQHandler+0x1c6>
 80039b4:	e7ff      	b.n	80039b6 <HAL_TIM_IRQHandler+0x1a6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039b6:	9801      	ldr	r0, [sp, #4]
 80039b8:	6800      	ldr	r0, [r0, #0]
 80039ba:	68c0      	ldr	r0, [r0, #12]
 80039bc:	07c0      	lsls	r0, r0, #31
 80039be:	b148      	cbz	r0, 80039d4 <HAL_TIM_IRQHandler+0x1c4>
 80039c0:	e7ff      	b.n	80039c2 <HAL_TIM_IRQHandler+0x1b2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c2:	9801      	ldr	r0, [sp, #4]
 80039c4:	6801      	ldr	r1, [r0, #0]
 80039c6:	f06f 0001 	mvn.w	r0, #1
 80039ca:	6108      	str	r0, [r1, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80039cc:	9801      	ldr	r0, [sp, #4]
 80039ce:	f000 fa53 	bl	8003e78 <HAL_TIM_PeriodElapsedCallback>
    }
 80039d2:	e7ff      	b.n	80039d4 <HAL_TIM_IRQHandler+0x1c4>
  }
 80039d4:	e7ff      	b.n	80039d6 <HAL_TIM_IRQHandler+0x1c6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d6:	9801      	ldr	r0, [sp, #4]
 80039d8:	6800      	ldr	r0, [r0, #0]
 80039da:	6900      	ldr	r0, [r0, #16]
 80039dc:	b2c1      	uxtb	r1, r0
 80039de:	2000      	movs	r0, #0
 80039e0:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
 80039e4:	d013      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x1fe>
 80039e6:	e7ff      	b.n	80039e8 <HAL_TIM_IRQHandler+0x1d8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e8:	9801      	ldr	r0, [sp, #4]
 80039ea:	6800      	ldr	r0, [r0, #0]
 80039ec:	68c0      	ldr	r0, [r0, #12]
 80039ee:	b2c1      	uxtb	r1, r0
 80039f0:	2000      	movs	r0, #0
 80039f2:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
 80039f6:	d009      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x1fc>
 80039f8:	e7ff      	b.n	80039fa <HAL_TIM_IRQHandler+0x1ea>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039fa:	9801      	ldr	r0, [sp, #4]
 80039fc:	6801      	ldr	r1, [r0, #0]
 80039fe:	f06f 0080 	mvn.w	r0, #128	@ 0x80
 8003a02:	6108      	str	r0, [r1, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a04:	9801      	ldr	r0, [sp, #4]
 8003a06:	f7ff fcfd 	bl	8003404 <HAL_TIMEx_BreakCallback>
    }
 8003a0a:	e7ff      	b.n	8003a0c <HAL_TIM_IRQHandler+0x1fc>
  }
 8003a0c:	e7ff      	b.n	8003a0e <HAL_TIM_IRQHandler+0x1fe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a0e:	9801      	ldr	r0, [sp, #4]
 8003a10:	6800      	ldr	r0, [r0, #0]
 8003a12:	6900      	ldr	r0, [r0, #16]
 8003a14:	f000 0140 	and.w	r1, r0, #64	@ 0x40
 8003a18:	2000      	movs	r0, #0
 8003a1a:	ebb0 1f91 	cmp.w	r0, r1, lsr #6
 8003a1e:	d014      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x23a>
 8003a20:	e7ff      	b.n	8003a22 <HAL_TIM_IRQHandler+0x212>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a22:	9801      	ldr	r0, [sp, #4]
 8003a24:	6800      	ldr	r0, [r0, #0]
 8003a26:	68c0      	ldr	r0, [r0, #12]
 8003a28:	f000 0140 	and.w	r1, r0, #64	@ 0x40
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	ebb0 1f91 	cmp.w	r0, r1, lsr #6
 8003a32:	d009      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x238>
 8003a34:	e7ff      	b.n	8003a36 <HAL_TIM_IRQHandler+0x226>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a36:	9801      	ldr	r0, [sp, #4]
 8003a38:	6801      	ldr	r1, [r0, #0]
 8003a3a:	f06f 0040 	mvn.w	r0, #64	@ 0x40
 8003a3e:	6108      	str	r0, [r1, #16]
      HAL_TIM_TriggerCallback(htim);
 8003a40:	9801      	ldr	r0, [sp, #4]
 8003a42:	f000 fa2f 	bl	8003ea4 <HAL_TIM_TriggerCallback>
    }
 8003a46:	e7ff      	b.n	8003a48 <HAL_TIM_IRQHandler+0x238>
  }
 8003a48:	e7ff      	b.n	8003a4a <HAL_TIM_IRQHandler+0x23a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a4a:	9801      	ldr	r0, [sp, #4]
 8003a4c:	6800      	ldr	r0, [r0, #0]
 8003a4e:	6900      	ldr	r0, [r0, #16]
 8003a50:	f000 0120 	and.w	r1, r0, #32
 8003a54:	2000      	movs	r0, #0
 8003a56:	ebb0 1f51 	cmp.w	r0, r1, lsr #5
 8003a5a:	d014      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x276>
 8003a5c:	e7ff      	b.n	8003a5e <HAL_TIM_IRQHandler+0x24e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a5e:	9801      	ldr	r0, [sp, #4]
 8003a60:	6800      	ldr	r0, [r0, #0]
 8003a62:	68c0      	ldr	r0, [r0, #12]
 8003a64:	f000 0120 	and.w	r1, r0, #32
 8003a68:	2000      	movs	r0, #0
 8003a6a:	ebb0 1f51 	cmp.w	r0, r1, lsr #5
 8003a6e:	d009      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x274>
 8003a70:	e7ff      	b.n	8003a72 <HAL_TIM_IRQHandler+0x262>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a72:	9801      	ldr	r0, [sp, #4]
 8003a74:	6801      	ldr	r1, [r0, #0]
 8003a76:	f06f 0020 	mvn.w	r0, #32
 8003a7a:	6108      	str	r0, [r1, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003a7c:	9801      	ldr	r0, [sp, #4]
 8003a7e:	f7ff fcc5 	bl	800340c <HAL_TIMEx_CommutCallback>
    }
 8003a82:	e7ff      	b.n	8003a84 <HAL_TIM_IRQHandler+0x274>
  }
 8003a84:	e7ff      	b.n	8003a86 <HAL_TIM_IRQHandler+0x276>
}
 8003a86:	b002      	add	sp, #8
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <HAL_TIM_MspPostInit>:

  /* USER CODE END TIM4_MspInit 1 */
  }
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	9005      	str	r0, [sp, #20]
 8003a92:	2000      	movs	r0, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	9004      	str	r0, [sp, #16]
 8003a96:	9003      	str	r0, [sp, #12]
 8003a98:	9002      	str	r0, [sp, #8]
 8003a9a:	9001      	str	r0, [sp, #4]
  if(timHandle->Instance==TIM4)
 8003a9c:	9805      	ldr	r0, [sp, #20]
 8003a9e:	6800      	ldr	r0, [r0, #0]
 8003aa0:	f640 0100 	movw	r1, #2048	@ 0x800
 8003aa4:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 8003aa8:	4288      	cmp	r0, r1
 8003aaa:	d11c      	bne.n	8003ae6 <HAL_TIM_MspPostInit+0x5a>
 8003aac:	e7ff      	b.n	8003aae <HAL_TIM_MspPostInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aae:	e7ff      	b.n	8003ab0 <HAL_TIM_MspPostInit+0x24>
 8003ab0:	f241 0018 	movw	r0, #4120	@ 0x1018
 8003ab4:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8003ab8:	6801      	ldr	r1, [r0, #0]
 8003aba:	f041 0108 	orr.w	r1, r1, #8
 8003abe:	6001      	str	r1, [r0, #0]
 8003ac0:	6800      	ldr	r0, [r0, #0]
 8003ac2:	f000 0008 	and.w	r0, r0, #8
 8003ac6:	9000      	str	r0, [sp, #0]
 8003ac8:	9800      	ldr	r0, [sp, #0]
 8003aca:	e7ff      	b.n	8003acc <HAL_TIM_MspPostInit+0x40>
 8003acc:	2040      	movs	r0, #64	@ 0x40
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ace:	9001      	str	r0, [sp, #4]
 8003ad0:	2002      	movs	r0, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	9002      	str	r0, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad4:	9004      	str	r0, [sp, #16]
 8003ad6:	f640 4000 	movw	r0, #3072	@ 0xc00
 8003ada:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003ade:	a901      	add	r1, sp, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae0:	f7fd fd6c 	bl	80015bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
 8003ae4:	e7ff      	b.n	8003ae6 <HAL_TIM_MspPostInit+0x5a>

}
 8003ae6:	b006      	add	sp, #24
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <HAL_TIM_OC_DelayElapsedCallback>:
{
 8003aec:	b081      	sub	sp, #4
 8003aee:	9000      	str	r0, [sp, #0]
}
 8003af0:	b001      	add	sp, #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_PWM_ConfigChannel>:
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	9004      	str	r0, [sp, #16]
 8003afa:	9103      	str	r1, [sp, #12]
 8003afc:	9202      	str	r2, [sp, #8]
 8003afe:	2000      	movs	r0, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	f88d 0007 	strb.w	r0, [sp, #7]
  __HAL_LOCK(htim);
 8003b04:	e7ff      	b.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0x12>
 8003b06:	9804      	ldr	r0, [sp, #16]
 8003b08:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003b0c:	2801      	cmp	r0, #1
 8003b0e:	d104      	bne.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x26>
 8003b10:	e7ff      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b12:	2002      	movs	r0, #2
 8003b14:	f88d 0017 	strb.w	r0, [sp, #23]
 8003b18:	e089      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8003b1a:	9904      	ldr	r1, [sp, #16]
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8003b22:	e7ff      	b.n	8003b24 <HAL_TIM_PWM_ConfigChannel+0x30>
 8003b24:	e7ff      	b.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0x32>
  switch (Channel)
 8003b26:	9802      	ldr	r0, [sp, #8]
 8003b28:	9000      	str	r0, [sp, #0]
 8003b2a:	280c      	cmp	r0, #12
 8003b2c:	f200 8070 	bhi.w	8003c10 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8003b30:	9900      	ldr	r1, [sp, #0]
 8003b32:	e8df f001 	tbb	[pc, r1]
 8003b36:	6d07      	.short	0x6d07
 8003b38:	6d206d6d 	.word	0x6d206d6d
 8003b3c:	6d3a6d6d 	.word	0x6d3a6d6d
 8003b40:	00536d6d 	.word	0x00536d6d
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b44:	9804      	ldr	r0, [sp, #16]
 8003b46:	6800      	ldr	r0, [r0, #0]
 8003b48:	9903      	ldr	r1, [sp, #12]
 8003b4a:	f001 fb55 	bl	80051f8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b4e:	9804      	ldr	r0, [sp, #16]
 8003b50:	6801      	ldr	r1, [r0, #0]
 8003b52:	6988      	ldr	r0, [r1, #24]
 8003b54:	f040 0008 	orr.w	r0, r0, #8
 8003b58:	6188      	str	r0, [r1, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b5a:	9804      	ldr	r0, [sp, #16]
 8003b5c:	6801      	ldr	r1, [r0, #0]
 8003b5e:	6988      	ldr	r0, [r1, #24]
 8003b60:	f020 0004 	bic.w	r0, r0, #4
 8003b64:	6188      	str	r0, [r1, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b66:	9803      	ldr	r0, [sp, #12]
 8003b68:	6902      	ldr	r2, [r0, #16]
 8003b6a:	9804      	ldr	r0, [sp, #16]
 8003b6c:	6801      	ldr	r1, [r0, #0]
 8003b6e:	6988      	ldr	r0, [r1, #24]
 8003b70:	4310      	orrs	r0, r2
 8003b72:	6188      	str	r0, [r1, #24]
      break;
 8003b74:	e050      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x124>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b76:	9804      	ldr	r0, [sp, #16]
 8003b78:	6800      	ldr	r0, [r0, #0]
 8003b7a:	9903      	ldr	r1, [sp, #12]
 8003b7c:	f001 fba4 	bl	80052c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b80:	9804      	ldr	r0, [sp, #16]
 8003b82:	6801      	ldr	r1, [r0, #0]
 8003b84:	6988      	ldr	r0, [r1, #24]
 8003b86:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8003b8a:	6188      	str	r0, [r1, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b8c:	9804      	ldr	r0, [sp, #16]
 8003b8e:	6801      	ldr	r1, [r0, #0]
 8003b90:	6988      	ldr	r0, [r1, #24]
 8003b92:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 8003b96:	6188      	str	r0, [r1, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b98:	9803      	ldr	r0, [sp, #12]
 8003b9a:	6902      	ldr	r2, [r0, #16]
 8003b9c:	9804      	ldr	r0, [sp, #16]
 8003b9e:	6801      	ldr	r1, [r0, #0]
 8003ba0:	6988      	ldr	r0, [r1, #24]
 8003ba2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8003ba6:	6188      	str	r0, [r1, #24]
      break;
 8003ba8:	e036      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x124>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003baa:	9804      	ldr	r0, [sp, #16]
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	9903      	ldr	r1, [sp, #12]
 8003bb0:	f001 fbf6 	bl	80053a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bb4:	9804      	ldr	r0, [sp, #16]
 8003bb6:	6801      	ldr	r1, [r0, #0]
 8003bb8:	69c8      	ldr	r0, [r1, #28]
 8003bba:	f040 0008 	orr.w	r0, r0, #8
 8003bbe:	61c8      	str	r0, [r1, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bc0:	9804      	ldr	r0, [sp, #16]
 8003bc2:	6801      	ldr	r1, [r0, #0]
 8003bc4:	69c8      	ldr	r0, [r1, #28]
 8003bc6:	f020 0004 	bic.w	r0, r0, #4
 8003bca:	61c8      	str	r0, [r1, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bcc:	9803      	ldr	r0, [sp, #12]
 8003bce:	6902      	ldr	r2, [r0, #16]
 8003bd0:	9804      	ldr	r0, [sp, #16]
 8003bd2:	6801      	ldr	r1, [r0, #0]
 8003bd4:	69c8      	ldr	r0, [r1, #28]
 8003bd6:	4310      	orrs	r0, r2
 8003bd8:	61c8      	str	r0, [r1, #28]
      break;
 8003bda:	e01d      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x124>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bdc:	9804      	ldr	r0, [sp, #16]
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	9903      	ldr	r1, [sp, #12]
 8003be2:	f001 fc49 	bl	8005478 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003be6:	9804      	ldr	r0, [sp, #16]
 8003be8:	6801      	ldr	r1, [r0, #0]
 8003bea:	69c8      	ldr	r0, [r1, #28]
 8003bec:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8003bf0:	61c8      	str	r0, [r1, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bf2:	9804      	ldr	r0, [sp, #16]
 8003bf4:	6801      	ldr	r1, [r0, #0]
 8003bf6:	69c8      	ldr	r0, [r1, #28]
 8003bf8:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 8003bfc:	61c8      	str	r0, [r1, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bfe:	9803      	ldr	r0, [sp, #12]
 8003c00:	6902      	ldr	r2, [r0, #16]
 8003c02:	9804      	ldr	r0, [sp, #16]
 8003c04:	6801      	ldr	r1, [r0, #0]
 8003c06:	69c8      	ldr	r0, [r1, #28]
 8003c08:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8003c0c:	61c8      	str	r0, [r1, #28]
      break;
 8003c0e:	e003      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003c10:	2001      	movs	r0, #1
      status = HAL_ERROR;
 8003c12:	f88d 0007 	strb.w	r0, [sp, #7]
      break;
 8003c16:	e7ff      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x124>
  __HAL_UNLOCK(htim);
 8003c18:	e7ff      	b.n	8003c1a <HAL_TIM_PWM_ConfigChannel+0x126>
 8003c1a:	9904      	ldr	r1, [sp, #16]
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8003c22:	e7ff      	b.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x130>
  return status;
 8003c24:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003c28:	f88d 0017 	strb.w	r0, [sp, #23]
 8003c2c:	e7ff      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x13a>
}
 8003c2e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003c32:	b006      	add	sp, #24
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_TIM_PWM_Init>:
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	9000      	str	r0, [sp, #0]
  if (htim == NULL)
 8003c3e:	9800      	ldr	r0, [sp, #0]
 8003c40:	b920      	cbnz	r0, 8003c4c <HAL_TIM_PWM_Init+0x14>
 8003c42:	e7ff      	b.n	8003c44 <HAL_TIM_PWM_Init+0xc>
 8003c44:	2001      	movs	r0, #1
    return HAL_ERROR;
 8003c46:	f88d 0007 	strb.w	r0, [sp, #7]
 8003c4a:	e03f      	b.n	8003ccc <HAL_TIM_PWM_Init+0x94>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4c:	9800      	ldr	r0, [sp, #0]
 8003c4e:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
 8003c52:	b940      	cbnz	r0, 8003c66 <HAL_TIM_PWM_Init+0x2e>
 8003c54:	e7ff      	b.n	8003c56 <HAL_TIM_PWM_Init+0x1e>
    htim->Lock = HAL_UNLOCKED;
 8003c56:	9900      	ldr	r1, [sp, #0]
 8003c58:	2000      	movs	r0, #0
 8003c5a:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003c5e:	9800      	ldr	r0, [sp, #0]
 8003c60:	f000 f838 	bl	8003cd4 <HAL_TIM_PWM_MspInit>
  }
 8003c64:	e7ff      	b.n	8003c66 <HAL_TIM_PWM_Init+0x2e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c66:	9900      	ldr	r1, [sp, #0]
 8003c68:	2002      	movs	r0, #2
 8003c6a:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6e:	9900      	ldr	r1, [sp, #0]
 8003c70:	f851 0b04 	ldr.w	r0, [r1], #4
 8003c74:	f001 f9fc 	bl	8005070 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c78:	9900      	ldr	r1, [sp, #0]
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	f881 0046 	strb.w	r0, [r1, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	e7ff      	b.n	8003c82 <HAL_TIM_PWM_Init+0x4a>
 8003c82:	9900      	ldr	r1, [sp, #0]
 8003c84:	2001      	movs	r0, #1
 8003c86:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
 8003c8a:	9900      	ldr	r1, [sp, #0]
 8003c8c:	f881 003f 	strb.w	r0, [r1, #63]	@ 0x3f
 8003c90:	9900      	ldr	r1, [sp, #0]
 8003c92:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8003c96:	9900      	ldr	r1, [sp, #0]
 8003c98:	f881 0041 	strb.w	r0, [r1, #65]	@ 0x41
 8003c9c:	e7ff      	b.n	8003c9e <HAL_TIM_PWM_Init+0x66>
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9e:	e7ff      	b.n	8003ca0 <HAL_TIM_PWM_Init+0x68>
 8003ca0:	9900      	ldr	r1, [sp, #0]
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f881 0042 	strb.w	r0, [r1, #66]	@ 0x42
 8003ca8:	9900      	ldr	r1, [sp, #0]
 8003caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cae:	9900      	ldr	r1, [sp, #0]
 8003cb0:	f881 0044 	strb.w	r0, [r1, #68]	@ 0x44
 8003cb4:	9900      	ldr	r1, [sp, #0]
 8003cb6:	f881 0045 	strb.w	r0, [r1, #69]	@ 0x45
 8003cba:	e7ff      	b.n	8003cbc <HAL_TIM_PWM_Init+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	9900      	ldr	r1, [sp, #0]
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 8003cc4:	2000      	movs	r0, #0
  return HAL_OK;
 8003cc6:	f88d 0007 	strb.w	r0, [sp, #7]
 8003cca:	e7ff      	b.n	8003ccc <HAL_TIM_PWM_Init+0x94>
}
 8003ccc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_PWM_MspInit>:
{
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	9001      	str	r0, [sp, #4]
  if(tim_pwmHandle->Instance==TIM4)
 8003cd8:	9801      	ldr	r0, [sp, #4]
 8003cda:	6800      	ldr	r0, [r0, #0]
 8003cdc:	f640 0100 	movw	r1, #2048	@ 0x800
 8003ce0:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 8003ce4:	4288      	cmp	r0, r1
 8003ce6:	d110      	bne.n	8003d0a <HAL_TIM_PWM_MspInit+0x36>
 8003ce8:	e7ff      	b.n	8003cea <HAL_TIM_PWM_MspInit+0x16>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cea:	e7ff      	b.n	8003cec <HAL_TIM_PWM_MspInit+0x18>
 8003cec:	f241 001c 	movw	r0, #4124	@ 0x101c
 8003cf0:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8003cf4:	6801      	ldr	r1, [r0, #0]
 8003cf6:	f041 0104 	orr.w	r1, r1, #4
 8003cfa:	6001      	str	r1, [r0, #0]
 8003cfc:	6800      	ldr	r0, [r0, #0]
 8003cfe:	f000 0004 	and.w	r0, r0, #4
 8003d02:	9000      	str	r0, [sp, #0]
 8003d04:	9800      	ldr	r0, [sp, #0]
 8003d06:	e7ff      	b.n	8003d08 <HAL_TIM_PWM_MspInit+0x34>
  }
 8003d08:	e7ff      	b.n	8003d0a <HAL_TIM_PWM_MspInit+0x36>
}
 8003d0a:	b002      	add	sp, #8
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b081      	sub	sp, #4
 8003d12:	9000      	str	r0, [sp, #0]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d14:	b001      	add	sp, #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIM_PWM_Start>:
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	@ 0x28
 8003d1c:	9008      	str	r0, [sp, #32]
 8003d1e:	9107      	str	r1, [sp, #28]
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d20:	9807      	ldr	r0, [sp, #28]
 8003d22:	b928      	cbnz	r0, 8003d30 <HAL_TIM_PWM_Start+0x18>
 8003d24:	e7ff      	b.n	8003d26 <HAL_TIM_PWM_Start+0xe>
 8003d26:	9808      	ldr	r0, [sp, #32]
 8003d28:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8003d2c:	9005      	str	r0, [sp, #20]
 8003d2e:	e01c      	b.n	8003d6a <HAL_TIM_PWM_Start+0x52>
 8003d30:	9807      	ldr	r0, [sp, #28]
 8003d32:	2804      	cmp	r0, #4
 8003d34:	d105      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x2a>
 8003d36:	e7ff      	b.n	8003d38 <HAL_TIM_PWM_Start+0x20>
 8003d38:	9808      	ldr	r0, [sp, #32]
 8003d3a:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8003d3e:	9004      	str	r0, [sp, #16]
 8003d40:	e010      	b.n	8003d64 <HAL_TIM_PWM_Start+0x4c>
 8003d42:	9807      	ldr	r0, [sp, #28]
 8003d44:	2808      	cmp	r0, #8
 8003d46:	d105      	bne.n	8003d54 <HAL_TIM_PWM_Start+0x3c>
 8003d48:	e7ff      	b.n	8003d4a <HAL_TIM_PWM_Start+0x32>
 8003d4a:	9808      	ldr	r0, [sp, #32]
 8003d4c:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8003d50:	9003      	str	r0, [sp, #12]
 8003d52:	e004      	b.n	8003d5e <HAL_TIM_PWM_Start+0x46>
 8003d54:	9808      	ldr	r0, [sp, #32]
 8003d56:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8003d5a:	9003      	str	r0, [sp, #12]
 8003d5c:	e7ff      	b.n	8003d5e <HAL_TIM_PWM_Start+0x46>
 8003d5e:	9803      	ldr	r0, [sp, #12]
 8003d60:	9004      	str	r0, [sp, #16]
 8003d62:	e7ff      	b.n	8003d64 <HAL_TIM_PWM_Start+0x4c>
 8003d64:	9804      	ldr	r0, [sp, #16]
 8003d66:	9005      	str	r0, [sp, #20]
 8003d68:	e7ff      	b.n	8003d6a <HAL_TIM_PWM_Start+0x52>
 8003d6a:	9805      	ldr	r0, [sp, #20]
 8003d6c:	2801      	cmp	r0, #1
 8003d6e:	d004      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x62>
 8003d70:	e7ff      	b.n	8003d72 <HAL_TIM_PWM_Start+0x5a>
 8003d72:	2001      	movs	r0, #1
    return HAL_ERROR;
 8003d74:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
 8003d78:	e07a      	b.n	8003e70 <HAL_TIM_PWM_Start+0x158>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d7a:	9807      	ldr	r0, [sp, #28]
 8003d7c:	b928      	cbnz	r0, 8003d8a <HAL_TIM_PWM_Start+0x72>
 8003d7e:	e7ff      	b.n	8003d80 <HAL_TIM_PWM_Start+0x68>
 8003d80:	9908      	ldr	r1, [sp, #32]
 8003d82:	2002      	movs	r0, #2
 8003d84:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
 8003d88:	e01e      	b.n	8003dc8 <HAL_TIM_PWM_Start+0xb0>
 8003d8a:	9807      	ldr	r0, [sp, #28]
 8003d8c:	2804      	cmp	r0, #4
 8003d8e:	d106      	bne.n	8003d9e <HAL_TIM_PWM_Start+0x86>
 8003d90:	e7ff      	b.n	8003d92 <HAL_TIM_PWM_Start+0x7a>
 8003d92:	9908      	ldr	r1, [sp, #32]
 8003d94:	2002      	movs	r0, #2
 8003d96:	f881 003f 	strb.w	r0, [r1, #63]	@ 0x3f
 8003d9a:	9002      	str	r0, [sp, #8]
 8003d9c:	e012      	b.n	8003dc4 <HAL_TIM_PWM_Start+0xac>
 8003d9e:	9807      	ldr	r0, [sp, #28]
 8003da0:	2808      	cmp	r0, #8
 8003da2:	d106      	bne.n	8003db2 <HAL_TIM_PWM_Start+0x9a>
 8003da4:	e7ff      	b.n	8003da6 <HAL_TIM_PWM_Start+0x8e>
 8003da6:	9908      	ldr	r1, [sp, #32]
 8003da8:	2002      	movs	r0, #2
 8003daa:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8003dae:	9001      	str	r0, [sp, #4]
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_PWM_Start+0xa6>
 8003db2:	9908      	ldr	r1, [sp, #32]
 8003db4:	2002      	movs	r0, #2
 8003db6:	f881 0041 	strb.w	r0, [r1, #65]	@ 0x41
 8003dba:	9001      	str	r0, [sp, #4]
 8003dbc:	e7ff      	b.n	8003dbe <HAL_TIM_PWM_Start+0xa6>
 8003dbe:	9801      	ldr	r0, [sp, #4]
 8003dc0:	9002      	str	r0, [sp, #8]
 8003dc2:	e7ff      	b.n	8003dc4 <HAL_TIM_PWM_Start+0xac>
 8003dc4:	9802      	ldr	r0, [sp, #8]
 8003dc6:	e7ff      	b.n	8003dc8 <HAL_TIM_PWM_Start+0xb0>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dc8:	9808      	ldr	r0, [sp, #32]
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	9907      	ldr	r1, [sp, #28]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f001 f9c6 	bl	8005160 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dd4:	9808      	ldr	r0, [sp, #32]
 8003dd6:	6800      	ldr	r0, [r0, #0]
 8003dd8:	f642 4100 	movw	r1, #11264	@ 0x2c00
 8003ddc:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8003de0:	4288      	cmp	r0, r1
 8003de2:	d107      	bne.n	8003df4 <HAL_TIM_PWM_Start+0xdc>
 8003de4:	e7ff      	b.n	8003de6 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 8003de6:	9808      	ldr	r0, [sp, #32]
 8003de8:	6801      	ldr	r1, [r0, #0]
 8003dea:	6c48      	ldr	r0, [r1, #68]	@ 0x44
 8003dec:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8003df0:	6448      	str	r0, [r1, #68]	@ 0x44
  }
 8003df2:	e7ff      	b.n	8003df4 <HAL_TIM_PWM_Start+0xdc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df4:	9808      	ldr	r0, [sp, #32]
 8003df6:	6800      	ldr	r0, [r0, #0]
 8003df8:	f642 4100 	movw	r1, #11264	@ 0x2c00
 8003dfc:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8003e00:	4288      	cmp	r0, r1
 8003e02:	d018      	beq.n	8003e36 <HAL_TIM_PWM_Start+0x11e>
 8003e04:	e7ff      	b.n	8003e06 <HAL_TIM_PWM_Start+0xee>
 8003e06:	9808      	ldr	r0, [sp, #32]
 8003e08:	6800      	ldr	r0, [r0, #0]
 8003e0a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003e0e:	d012      	beq.n	8003e36 <HAL_TIM_PWM_Start+0x11e>
 8003e10:	e7ff      	b.n	8003e12 <HAL_TIM_PWM_Start+0xfa>
 8003e12:	9808      	ldr	r0, [sp, #32]
 8003e14:	6800      	ldr	r0, [r0, #0]
 8003e16:	f240 4100 	movw	r1, #1024	@ 0x400
 8003e1a:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 8003e1e:	4288      	cmp	r0, r1
 8003e20:	d009      	beq.n	8003e36 <HAL_TIM_PWM_Start+0x11e>
 8003e22:	e7ff      	b.n	8003e24 <HAL_TIM_PWM_Start+0x10c>
 8003e24:	9808      	ldr	r0, [sp, #32]
 8003e26:	6800      	ldr	r0, [r0, #0]
 8003e28:	f640 0100 	movw	r1, #2048	@ 0x800
 8003e2c:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 8003e30:	4288      	cmp	r0, r1
 8003e32:	d112      	bne.n	8003e5a <HAL_TIM_PWM_Start+0x142>
 8003e34:	e7ff      	b.n	8003e36 <HAL_TIM_PWM_Start+0x11e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e36:	9808      	ldr	r0, [sp, #32]
 8003e38:	6800      	ldr	r0, [r0, #0]
 8003e3a:	6880      	ldr	r0, [r0, #8]
 8003e3c:	f000 0007 	and.w	r0, r0, #7
 8003e40:	9006      	str	r0, [sp, #24]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e42:	9806      	ldr	r0, [sp, #24]
 8003e44:	2806      	cmp	r0, #6
 8003e46:	d007      	beq.n	8003e58 <HAL_TIM_PWM_Start+0x140>
 8003e48:	e7ff      	b.n	8003e4a <HAL_TIM_PWM_Start+0x132>
      __HAL_TIM_ENABLE(htim);
 8003e4a:	9808      	ldr	r0, [sp, #32]
 8003e4c:	6801      	ldr	r1, [r0, #0]
 8003e4e:	6808      	ldr	r0, [r1, #0]
 8003e50:	f040 0001 	orr.w	r0, r0, #1
 8003e54:	6008      	str	r0, [r1, #0]
    }
 8003e56:	e7ff      	b.n	8003e58 <HAL_TIM_PWM_Start+0x140>
  }
 8003e58:	e006      	b.n	8003e68 <HAL_TIM_PWM_Start+0x150>
    __HAL_TIM_ENABLE(htim);
 8003e5a:	9808      	ldr	r0, [sp, #32]
 8003e5c:	6801      	ldr	r1, [r0, #0]
 8003e5e:	6808      	ldr	r0, [r1, #0]
 8003e60:	f040 0001 	orr.w	r0, r0, #1
 8003e64:	6008      	str	r0, [r1, #0]
 8003e66:	e7ff      	b.n	8003e68 <HAL_TIM_PWM_Start+0x150>
 8003e68:	2000      	movs	r0, #0
  return HAL_OK;
 8003e6a:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
 8003e6e:	e7ff      	b.n	8003e70 <HAL_TIM_PWM_Start+0x158>
}
 8003e70:	f89d 0027 	ldrb.w	r0, [sp, #39]	@ 0x27
 8003e74:	b00a      	add	sp, #40	@ 0x28
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_TIM_PeriodElapsedCallback>:
{
 8003e78:	b081      	sub	sp, #4
 8003e7a:	9000      	str	r0, [sp, #0]
    if(htim->Instance == TIM2){
 8003e7c:	9800      	ldr	r0, [sp, #0]
 8003e7e:	6800      	ldr	r0, [r0, #0]
 8003e80:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003e84:	d10b      	bne.n	8003e9e <HAL_TIM_PeriodElapsedCallback+0x26>
 8003e86:	e7ff      	b.n	8003e88 <HAL_TIM_PeriodElapsedCallback+0x10>
			MAIN_SET_FLAG(MAIN_FLAG_TIM2_30HZ)
 8003e88:	e7ff      	b.n	8003e8a <HAL_TIM_PeriodElapsedCallback+0x12>
 8003e8a:	f240 714c 	movw	r1, #1868	@ 0x74c
 8003e8e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003e92:	7808      	ldrb	r0, [r1, #0]
 8003e94:	f040 0001 	orr.w	r0, r0, #1
 8003e98:	7008      	strb	r0, [r1, #0]
 8003e9a:	e7ff      	b.n	8003e9c <HAL_TIM_PeriodElapsedCallback+0x24>
    }
 8003e9c:	e7ff      	b.n	8003e9e <HAL_TIM_PeriodElapsedCallback+0x26>
}
 8003e9e:	b001      	add	sp, #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b081      	sub	sp, #4
 8003ea6:	9000      	str	r0, [sp, #0]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ea8:	b001      	add	sp, #4
 8003eaa:	4770      	bx	lr

08003eac <HardFault_Handler>:
  while (1)
 8003eac:	e7ff      	b.n	8003eae <HardFault_Handler+0x2>
 8003eae:	e7fe      	b.n	8003eae <HardFault_Handler+0x2>

08003eb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	9000      	str	r0, [sp, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb4:	9800      	ldr	r0, [sp, #0]
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	6940      	ldr	r0, [r0, #20]
 8003eba:	f400 6180 	and.w	r1, r0, #1024	@ 0x400
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	ebb0 2f91 	cmp.w	r0, r1, lsr #10
 8003ec4:	d11e      	bne.n	8003f04 <I2C_IsAcknowledgeFailed+0x54>
 8003ec6:	e7ff      	b.n	8003ec8 <I2C_IsAcknowledgeFailed+0x18>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	9800      	ldr	r0, [sp, #0]
 8003eca:	6801      	ldr	r1, [r0, #0]
 8003ecc:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
 8003ed0:	6148      	str	r0, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed2:	9900      	ldr	r1, [sp, #0]
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	6308      	str	r0, [r1, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ed8:	9a00      	ldr	r2, [sp, #0]
 8003eda:	2120      	movs	r1, #32
 8003edc:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee0:	9900      	ldr	r1, [sp, #0]
 8003ee2:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ee6:	9900      	ldr	r1, [sp, #0]
 8003ee8:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 8003eea:	f040 0004 	orr.w	r0, r0, #4
 8003eee:	6408      	str	r0, [r1, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef0:	e7ff      	b.n	8003ef2 <I2C_IsAcknowledgeFailed+0x42>
 8003ef2:	9900      	ldr	r1, [sp, #0]
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8003efa:	e7ff      	b.n	8003efc <I2C_IsAcknowledgeFailed+0x4c>
 8003efc:	2001      	movs	r0, #1

    return HAL_ERROR;
 8003efe:	f88d 0007 	strb.w	r0, [sp, #7]
 8003f02:	e003      	b.n	8003f0c <I2C_IsAcknowledgeFailed+0x5c>
 8003f04:	2000      	movs	r0, #0
  }
  return HAL_OK;
 8003f06:	f88d 0007 	strb.w	r0, [sp, #7]
 8003f0a:	e7ff      	b.n	8003f0c <I2C_IsAcknowledgeFailed+0x5c>
}
 8003f0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003f10:	b002      	add	sp, #8
 8003f12:	4770      	bx	lr

08003f14 <I2C_RequestMemoryWrite>:
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8003f1c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003f20:	9004      	str	r0, [sp, #16]
 8003f22:	f8ad 100e 	strh.w	r1, [sp, #14]
 8003f26:	f8ad 200c 	strh.w	r2, [sp, #12]
 8003f2a:	f8ad 300a 	strh.w	r3, [sp, #10]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2e:	9804      	ldr	r0, [sp, #16]
 8003f30:	6801      	ldr	r1, [r0, #0]
 8003f32:	6808      	ldr	r0, [r1, #0]
 8003f34:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8003f38:	6008      	str	r0, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3a:	9804      	ldr	r0, [sp, #16]
 8003f3c:	9b08      	ldr	r3, [sp, #32]
 8003f3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003f40:	466a      	mov	r2, sp
 8003f42:	6011      	str	r1, [r2, #0]
 8003f44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f000 f8d7 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003f4e:	b180      	cbz	r0, 8003f72 <I2C_RequestMemoryWrite+0x5e>
 8003f50:	e7ff      	b.n	8003f52 <I2C_RequestMemoryWrite+0x3e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f52:	9804      	ldr	r0, [sp, #16]
 8003f54:	6800      	ldr	r0, [r0, #0]
 8003f56:	6800      	ldr	r0, [r0, #0]
 8003f58:	05c0      	lsls	r0, r0, #23
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d505      	bpl.n	8003f6a <I2C_RequestMemoryWrite+0x56>
 8003f5e:	e7ff      	b.n	8003f60 <I2C_RequestMemoryWrite+0x4c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f60:	9904      	ldr	r1, [sp, #16]
 8003f62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003f66:	6408      	str	r0, [r1, #64]	@ 0x40
    }
 8003f68:	e7ff      	b.n	8003f6a <I2C_RequestMemoryWrite+0x56>
 8003f6a:	2003      	movs	r0, #3
    return HAL_TIMEOUT;
 8003f6c:	f88d 0017 	strb.w	r0, [sp, #23]
 8003f70:	e069      	b.n	8004046 <I2C_RequestMemoryWrite+0x132>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f72:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003f76:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8003f7a:	9904      	ldr	r1, [sp, #16]
 8003f7c:	6809      	ldr	r1, [r1, #0]
 8003f7e:	6108      	str	r0, [r1, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f80:	9804      	ldr	r0, [sp, #16]
 8003f82:	9a08      	ldr	r2, [sp, #32]
 8003f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f86:	2102      	movs	r1, #2
 8003f88:	f2c0 0101 	movt	r1, #1
 8003f8c:	f000 f93a 	bl	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f90:	b120      	cbz	r0, 8003f9c <I2C_RequestMemoryWrite+0x88>
 8003f92:	e7ff      	b.n	8003f94 <I2C_RequestMemoryWrite+0x80>
 8003f94:	2001      	movs	r0, #1
    return HAL_ERROR;
 8003f96:	f88d 0017 	strb.w	r0, [sp, #23]
 8003f9a:	e054      	b.n	8004046 <I2C_RequestMemoryWrite+0x132>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9c:	e7ff      	b.n	8003f9e <I2C_RequestMemoryWrite+0x8a>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	9001      	str	r0, [sp, #4]
 8003fa2:	9804      	ldr	r0, [sp, #16]
 8003fa4:	6800      	ldr	r0, [r0, #0]
 8003fa6:	6940      	ldr	r0, [r0, #20]
 8003fa8:	9001      	str	r0, [sp, #4]
 8003faa:	9804      	ldr	r0, [sp, #16]
 8003fac:	6800      	ldr	r0, [r0, #0]
 8003fae:	6980      	ldr	r0, [r0, #24]
 8003fb0:	9001      	str	r0, [sp, #4]
 8003fb2:	9801      	ldr	r0, [sp, #4]
 8003fb4:	e7ff      	b.n	8003fb6 <I2C_RequestMemoryWrite+0xa2>
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb6:	9804      	ldr	r0, [sp, #16]
 8003fb8:	9908      	ldr	r1, [sp, #32]
 8003fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fbc:	f000 f9cc 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc0:	b180      	cbz	r0, 8003fe4 <I2C_RequestMemoryWrite+0xd0>
 8003fc2:	e7ff      	b.n	8003fc4 <I2C_RequestMemoryWrite+0xb0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc4:	9804      	ldr	r0, [sp, #16]
 8003fc6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003fc8:	2804      	cmp	r0, #4
 8003fca:	d107      	bne.n	8003fdc <I2C_RequestMemoryWrite+0xc8>
 8003fcc:	e7ff      	b.n	8003fce <I2C_RequestMemoryWrite+0xba>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fce:	9804      	ldr	r0, [sp, #16]
 8003fd0:	6801      	ldr	r1, [r0, #0]
 8003fd2:	6808      	ldr	r0, [r1, #0]
 8003fd4:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8003fd8:	6008      	str	r0, [r1, #0]
    }
 8003fda:	e7ff      	b.n	8003fdc <I2C_RequestMemoryWrite+0xc8>
 8003fdc:	2001      	movs	r0, #1
    return HAL_ERROR;
 8003fde:	f88d 0017 	strb.w	r0, [sp, #23]
 8003fe2:	e030      	b.n	8004046 <I2C_RequestMemoryWrite+0x132>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8003fe8:	2801      	cmp	r0, #1
 8003fea:	d106      	bne.n	8003ffa <I2C_RequestMemoryWrite+0xe6>
 8003fec:	e7ff      	b.n	8003fee <I2C_RequestMemoryWrite+0xda>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fee:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003ff2:	9904      	ldr	r1, [sp, #16]
 8003ff4:	6809      	ldr	r1, [r1, #0]
 8003ff6:	6108      	str	r0, [r1, #16]
  }
 8003ff8:	e021      	b.n	800403e <I2C_RequestMemoryWrite+0x12a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ffa:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8003ffe:	9904      	ldr	r1, [sp, #16]
 8004000:	6809      	ldr	r1, [r1, #0]
 8004002:	6108      	str	r0, [r1, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004004:	9804      	ldr	r0, [sp, #16]
 8004006:	9908      	ldr	r1, [sp, #32]
 8004008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800400a:	f000 f9a5 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 800400e:	b180      	cbz	r0, 8004032 <I2C_RequestMemoryWrite+0x11e>
 8004010:	e7ff      	b.n	8004012 <I2C_RequestMemoryWrite+0xfe>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004012:	9804      	ldr	r0, [sp, #16]
 8004014:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8004016:	2804      	cmp	r0, #4
 8004018:	d107      	bne.n	800402a <I2C_RequestMemoryWrite+0x116>
 800401a:	e7ff      	b.n	800401c <I2C_RequestMemoryWrite+0x108>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401c:	9804      	ldr	r0, [sp, #16]
 800401e:	6801      	ldr	r1, [r0, #0]
 8004020:	6808      	ldr	r0, [r1, #0]
 8004022:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8004026:	6008      	str	r0, [r1, #0]
      }
 8004028:	e7ff      	b.n	800402a <I2C_RequestMemoryWrite+0x116>
 800402a:	2001      	movs	r0, #1
      return HAL_ERROR;
 800402c:	f88d 0017 	strb.w	r0, [sp, #23]
 8004030:	e009      	b.n	8004046 <I2C_RequestMemoryWrite+0x132>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004032:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004036:	9904      	ldr	r1, [sp, #16]
 8004038:	6809      	ldr	r1, [r1, #0]
 800403a:	6108      	str	r0, [r1, #16]
 800403c:	e7ff      	b.n	800403e <I2C_RequestMemoryWrite+0x12a>
 800403e:	2000      	movs	r0, #0
  return HAL_OK;
 8004040:	f88d 0017 	strb.w	r0, [sp, #23]
 8004044:	e7ff      	b.n	8004046 <I2C_RequestMemoryWrite+0x132>
}
 8004046:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800404a:	b006      	add	sp, #24
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	9002      	str	r0, [sp, #8]
 8004056:	9101      	str	r1, [sp, #4]
 8004058:	9200      	str	r2, [sp, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800405a:	e7ff      	b.n	800405c <I2C_WaitOnBTFFlagUntilTimeout+0xc>
 800405c:	9802      	ldr	r0, [sp, #8]
 800405e:	6800      	ldr	r0, [r0, #0]
 8004060:	6940      	ldr	r0, [r0, #20]
 8004062:	f000 0104 	and.w	r1, r0, #4
 8004066:	2000      	movs	r0, #0
 8004068:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 800406c:	d13e      	bne.n	80040ec <I2C_WaitOnBTFFlagUntilTimeout+0x9c>
 800406e:	e7ff      	b.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x20>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004070:	9802      	ldr	r0, [sp, #8]
 8004072:	f7ff ff1d 	bl	8003eb0 <I2C_IsAcknowledgeFailed>
 8004076:	b120      	cbz	r0, 8004082 <I2C_WaitOnBTFFlagUntilTimeout+0x32>
 8004078:	e7ff      	b.n	800407a <I2C_WaitOnBTFFlagUntilTimeout+0x2a>
 800407a:	2001      	movs	r0, #1
      return HAL_ERROR;
 800407c:	f88d 000f 	strb.w	r0, [sp, #15]
 8004080:	e038      	b.n	80040f4 <I2C_WaitOnBTFFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8004082:	9801      	ldr	r0, [sp, #4]
 8004084:	3001      	adds	r0, #1
 8004086:	b380      	cbz	r0, 80040ea <I2C_WaitOnBTFFlagUntilTimeout+0x9a>
 8004088:	e7ff      	b.n	800408a <I2C_WaitOnBTFFlagUntilTimeout+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7fd fc3f 	bl	800190c <HAL_GetTick>
 800408e:	9900      	ldr	r1, [sp, #0]
 8004090:	1a40      	subs	r0, r0, r1
 8004092:	9901      	ldr	r1, [sp, #4]
 8004094:	4288      	cmp	r0, r1
 8004096:	d803      	bhi.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
 8004098:	e7ff      	b.n	800409a <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
 800409a:	9801      	ldr	r0, [sp, #4]
 800409c:	bb20      	cbnz	r0, 80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x98>
 800409e:	e7ff      	b.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040a0:	9802      	ldr	r0, [sp, #8]
 80040a2:	6800      	ldr	r0, [r0, #0]
 80040a4:	6940      	ldr	r0, [r0, #20]
 80040a6:	f000 0104 	and.w	r1, r0, #4
 80040aa:	2000      	movs	r0, #0
 80040ac:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 80040b0:	d119      	bne.n	80040e6 <I2C_WaitOnBTFFlagUntilTimeout+0x96>
 80040b2:	e7ff      	b.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0x64>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040b4:	9902      	ldr	r1, [sp, #8]
 80040b6:	2000      	movs	r0, #0
 80040b8:	6308      	str	r0, [r1, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040ba:	9a02      	ldr	r2, [sp, #8]
 80040bc:	2120      	movs	r1, #32
 80040be:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c2:	9902      	ldr	r1, [sp, #8]
 80040c4:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	9902      	ldr	r1, [sp, #8]
 80040ca:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 80040cc:	f040 0020 	orr.w	r0, r0, #32
 80040d0:	6408      	str	r0, [r1, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80040d2:	e7ff      	b.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x84>
 80040d4:	9902      	ldr	r1, [sp, #8]
 80040d6:	2000      	movs	r0, #0
 80040d8:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80040dc:	e7ff      	b.n	80040de <I2C_WaitOnBTFFlagUntilTimeout+0x8e>
 80040de:	2001      	movs	r0, #1
          return HAL_ERROR;
 80040e0:	f88d 000f 	strb.w	r0, [sp, #15]
 80040e4:	e006      	b.n	80040f4 <I2C_WaitOnBTFFlagUntilTimeout+0xa4>
      }
 80040e6:	e7ff      	b.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x98>
    }
 80040e8:	e7ff      	b.n	80040ea <I2C_WaitOnBTFFlagUntilTimeout+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ea:	e7b7      	b.n	800405c <I2C_WaitOnBTFFlagUntilTimeout+0xc>
 80040ec:	2000      	movs	r0, #0
  return HAL_OK;
 80040ee:	f88d 000f 	strb.w	r0, [sp, #15]
 80040f2:	e7ff      	b.n	80040f4 <I2C_WaitOnBTFFlagUntilTimeout+0xa4>
}
 80040f4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}

080040fc <I2C_WaitOnFlagUntilTimeout>:
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8004104:	9006      	str	r0, [sp, #24]
 8004106:	9105      	str	r1, [sp, #20]
 8004108:	f88d 2013 	strb.w	r2, [sp, #19]
 800410c:	9303      	str	r3, [sp, #12]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800410e:	e7ff      	b.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x14>
 8004110:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8004114:	2801      	cmp	r0, #1
 8004116:	d10c      	bne.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x36>
 8004118:	e7ff      	b.n	800411a <I2C_WaitOnFlagUntilTimeout+0x1e>
 800411a:	9806      	ldr	r0, [sp, #24]
 800411c:	6800      	ldr	r0, [r0, #0]
 800411e:	6940      	ldr	r0, [r0, #20]
 8004120:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8004124:	4008      	ands	r0, r1
 8004126:	1a40      	subs	r0, r0, r1
 8004128:	fab0 f080 	clz	r0, r0
 800412c:	0940      	lsrs	r0, r0, #5
 800412e:	9002      	str	r0, [sp, #8]
 8004130:	e00b      	b.n	800414a <I2C_WaitOnFlagUntilTimeout+0x4e>
 8004132:	9806      	ldr	r0, [sp, #24]
 8004134:	6800      	ldr	r0, [r0, #0]
 8004136:	6980      	ldr	r0, [r0, #24]
 8004138:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800413c:	4008      	ands	r0, r1
 800413e:	1a40      	subs	r0, r0, r1
 8004140:	fab0 f080 	clz	r0, r0
 8004144:	0940      	lsrs	r0, r0, #5
 8004146:	9002      	str	r0, [sp, #8]
 8004148:	e7ff      	b.n	800414a <I2C_WaitOnFlagUntilTimeout+0x4e>
 800414a:	9802      	ldr	r0, [sp, #8]
 800414c:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8004150:	4288      	cmp	r0, r1
 8004152:	d14f      	bne.n	80041f4 <I2C_WaitOnFlagUntilTimeout+0xf8>
 8004154:	e7ff      	b.n	8004156 <I2C_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8004156:	9803      	ldr	r0, [sp, #12]
 8004158:	3001      	adds	r0, #1
 800415a:	2800      	cmp	r0, #0
 800415c:	d049      	beq.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0xf6>
 800415e:	e7ff      	b.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004160:	f7fd fbd4 	bl	800190c <HAL_GetTick>
 8004164:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004166:	1a40      	subs	r0, r0, r1
 8004168:	9903      	ldr	r1, [sp, #12]
 800416a:	4288      	cmp	r0, r1
 800416c:	d803      	bhi.n	8004176 <I2C_WaitOnFlagUntilTimeout+0x7a>
 800416e:	e7ff      	b.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x74>
 8004170:	9803      	ldr	r0, [sp, #12]
 8004172:	bbe8      	cbnz	r0, 80041f0 <I2C_WaitOnFlagUntilTimeout+0xf4>
 8004174:	e7ff      	b.n	8004176 <I2C_WaitOnFlagUntilTimeout+0x7a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004176:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800417a:	2801      	cmp	r0, #1
 800417c:	d10c      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0x9c>
 800417e:	e7ff      	b.n	8004180 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004180:	9806      	ldr	r0, [sp, #24]
 8004182:	6800      	ldr	r0, [r0, #0]
 8004184:	6940      	ldr	r0, [r0, #20]
 8004186:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800418a:	4008      	ands	r0, r1
 800418c:	1a40      	subs	r0, r0, r1
 800418e:	fab0 f080 	clz	r0, r0
 8004192:	0940      	lsrs	r0, r0, #5
 8004194:	9001      	str	r0, [sp, #4]
 8004196:	e00b      	b.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xb4>
 8004198:	9806      	ldr	r0, [sp, #24]
 800419a:	6800      	ldr	r0, [r0, #0]
 800419c:	6980      	ldr	r0, [r0, #24]
 800419e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80041a2:	4008      	ands	r0, r1
 80041a4:	1a40      	subs	r0, r0, r1
 80041a6:	fab0 f080 	clz	r0, r0
 80041aa:	0940      	lsrs	r0, r0, #5
 80041ac:	9001      	str	r0, [sp, #4]
 80041ae:	e7ff      	b.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xb4>
 80041b0:	9801      	ldr	r0, [sp, #4]
 80041b2:	f89d 1013 	ldrb.w	r1, [sp, #19]
 80041b6:	4288      	cmp	r0, r1
 80041b8:	d119      	bne.n	80041ee <I2C_WaitOnFlagUntilTimeout+0xf2>
 80041ba:	e7ff      	b.n	80041bc <I2C_WaitOnFlagUntilTimeout+0xc0>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041bc:	9906      	ldr	r1, [sp, #24]
 80041be:	2000      	movs	r0, #0
 80041c0:	6308      	str	r0, [r1, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041c2:	9a06      	ldr	r2, [sp, #24]
 80041c4:	2120      	movs	r1, #32
 80041c6:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041ca:	9906      	ldr	r1, [sp, #24]
 80041cc:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	9906      	ldr	r1, [sp, #24]
 80041d2:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 80041d4:	f040 0020 	orr.w	r0, r0, #32
 80041d8:	6408      	str	r0, [r1, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80041da:	e7ff      	b.n	80041dc <I2C_WaitOnFlagUntilTimeout+0xe0>
 80041dc:	9906      	ldr	r1, [sp, #24]
 80041de:	2000      	movs	r0, #0
 80041e0:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80041e4:	e7ff      	b.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0xea>
 80041e6:	2001      	movs	r0, #1
          return HAL_ERROR;
 80041e8:	f88d 001f 	strb.w	r0, [sp, #31]
 80041ec:	e006      	b.n	80041fc <I2C_WaitOnFlagUntilTimeout+0x100>
      }
 80041ee:	e7ff      	b.n	80041f0 <I2C_WaitOnFlagUntilTimeout+0xf4>
    }
 80041f0:	e7ff      	b.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f2:	e78d      	b.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x14>
 80041f4:	2000      	movs	r0, #0
  return HAL_OK;
 80041f6:	f88d 001f 	strb.w	r0, [sp, #31]
 80041fa:	e7ff      	b.n	80041fc <I2C_WaitOnFlagUntilTimeout+0x100>
}
 80041fc:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8004200:	b008      	add	sp, #32
 8004202:	bd80      	pop	{r7, pc}

08004204 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	9006      	str	r0, [sp, #24]
 800420a:	9105      	str	r1, [sp, #20]
 800420c:	9204      	str	r2, [sp, #16]
 800420e:	9303      	str	r3, [sp, #12]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004210:	e7ff      	b.n	8004212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
 8004212:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8004216:	2801      	cmp	r0, #1
 8004218:	d10c      	bne.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x30>
 800421a:	e7ff      	b.n	800421c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x18>
 800421c:	9806      	ldr	r0, [sp, #24]
 800421e:	6800      	ldr	r0, [r0, #0]
 8004220:	6940      	ldr	r0, [r0, #20]
 8004222:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8004226:	4008      	ands	r0, r1
 8004228:	1a40      	subs	r0, r0, r1
 800422a:	fab0 f080 	clz	r0, r0
 800422e:	0940      	lsrs	r0, r0, #5
 8004230:	9002      	str	r0, [sp, #8]
 8004232:	e00b      	b.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
 8004234:	9806      	ldr	r0, [sp, #24]
 8004236:	6800      	ldr	r0, [r0, #0]
 8004238:	6980      	ldr	r0, [r0, #24]
 800423a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800423e:	4008      	ands	r0, r1
 8004240:	1a40      	subs	r0, r0, r1
 8004242:	fab0 f080 	clz	r0, r0
 8004246:	0940      	lsrs	r0, r0, #5
 8004248:	9002      	str	r0, [sp, #8]
 800424a:	e7ff      	b.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
 800424c:	9802      	ldr	r0, [sp, #8]
 800424e:	2800      	cmp	r0, #0
 8004250:	d17a      	bne.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x144>
 8004252:	e7ff      	b.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x50>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004254:	9806      	ldr	r0, [sp, #24]
 8004256:	6800      	ldr	r0, [r0, #0]
 8004258:	6940      	ldr	r0, [r0, #20]
 800425a:	f400 6180 	and.w	r1, r0, #1024	@ 0x400
 800425e:	2001      	movs	r0, #1
 8004260:	ebb0 2f91 	cmp.w	r0, r1, lsr #10
 8004264:	d124      	bne.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xac>
 8004266:	e7ff      	b.n	8004268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	9806      	ldr	r0, [sp, #24]
 800426a:	6801      	ldr	r1, [r0, #0]
 800426c:	6808      	ldr	r0, [r1, #0]
 800426e:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8004272:	6008      	str	r0, [r1, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004274:	9806      	ldr	r0, [sp, #24]
 8004276:	6801      	ldr	r1, [r0, #0]
 8004278:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
 800427c:	6148      	str	r0, [r1, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800427e:	9906      	ldr	r1, [sp, #24]
 8004280:	2000      	movs	r0, #0
 8004282:	6308      	str	r0, [r1, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004284:	9a06      	ldr	r2, [sp, #24]
 8004286:	2120      	movs	r1, #32
 8004288:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428c:	9906      	ldr	r1, [sp, #24]
 800428e:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004292:	9906      	ldr	r1, [sp, #24]
 8004294:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 8004296:	f040 0004 	orr.w	r0, r0, #4
 800429a:	6408      	str	r0, [r1, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800429c:	e7ff      	b.n	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x9a>
 800429e:	9906      	ldr	r1, [sp, #24]
 80042a0:	2000      	movs	r0, #0
 80042a2:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80042a6:	e7ff      	b.n	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
 80042a8:	2001      	movs	r0, #1
      return HAL_ERROR;
 80042aa:	f88d 001f 	strb.w	r0, [sp, #31]
 80042ae:	e04f      	b.n	8004350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x14c>
    if (Timeout != HAL_MAX_DELAY)
 80042b0:	9804      	ldr	r0, [sp, #16]
 80042b2:	3001      	adds	r0, #1
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d046      	beq.n	8004346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x142>
 80042b8:	e7ff      	b.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ba:	f7fd fb27 	bl	800190c <HAL_GetTick>
 80042be:	9903      	ldr	r1, [sp, #12]
 80042c0:	1a40      	subs	r0, r0, r1
 80042c2:	9904      	ldr	r1, [sp, #16]
 80042c4:	4288      	cmp	r0, r1
 80042c6:	d803      	bhi.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xcc>
 80042c8:	e7ff      	b.n	80042ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc6>
 80042ca:	9804      	ldr	r0, [sp, #16]
 80042cc:	bbd0      	cbnz	r0, 8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x140>
 80042ce:	e7ff      	b.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xcc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042d0:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80042d4:	2801      	cmp	r0, #1
 80042d6:	d10c      	bne.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xee>
 80042d8:	e7ff      	b.n	80042da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd6>
 80042da:	9806      	ldr	r0, [sp, #24]
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	6940      	ldr	r0, [r0, #20]
 80042e0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80042e4:	4008      	ands	r0, r1
 80042e6:	1a40      	subs	r0, r0, r1
 80042e8:	fab0 f080 	clz	r0, r0
 80042ec:	0940      	lsrs	r0, r0, #5
 80042ee:	9001      	str	r0, [sp, #4]
 80042f0:	e00b      	b.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x106>
 80042f2:	9806      	ldr	r0, [sp, #24]
 80042f4:	6800      	ldr	r0, [r0, #0]
 80042f6:	6980      	ldr	r0, [r0, #24]
 80042f8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80042fc:	4008      	ands	r0, r1
 80042fe:	1a40      	subs	r0, r0, r1
 8004300:	fab0 f080 	clz	r0, r0
 8004304:	0940      	lsrs	r0, r0, #5
 8004306:	9001      	str	r0, [sp, #4]
 8004308:	e7ff      	b.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x106>
 800430a:	9801      	ldr	r0, [sp, #4]
 800430c:	b9c8      	cbnz	r0, 8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x13e>
 800430e:	e7ff      	b.n	8004310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10c>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004310:	9906      	ldr	r1, [sp, #24]
 8004312:	2000      	movs	r0, #0
 8004314:	6308      	str	r0, [r1, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004316:	9a06      	ldr	r2, [sp, #24]
 8004318:	2120      	movs	r1, #32
 800431a:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431e:	9906      	ldr	r1, [sp, #24]
 8004320:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004324:	9906      	ldr	r1, [sp, #24]
 8004326:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 8004328:	f040 0020 	orr.w	r0, r0, #32
 800432c:	6408      	str	r0, [r1, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800432e:	e7ff      	b.n	8004330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12c>
 8004330:	9906      	ldr	r1, [sp, #24]
 8004332:	2000      	movs	r0, #0
 8004334:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8004338:	e7ff      	b.n	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x136>
 800433a:	2001      	movs	r0, #1
          return HAL_ERROR;
 800433c:	f88d 001f 	strb.w	r0, [sp, #31]
 8004340:	e006      	b.n	8004350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x14c>
      }
 8004342:	e7ff      	b.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x140>
    }
 8004344:	e7ff      	b.n	8004346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004346:	e764      	b.n	8004212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
 8004348:	2000      	movs	r0, #0
  return HAL_OK;
 800434a:	f88d 001f 	strb.w	r0, [sp, #31]
 800434e:	e7ff      	b.n	8004350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x14c>
}
 8004350:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8004354:	b008      	add	sp, #32
 8004356:	bd80      	pop	{r7, pc}

08004358 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	9002      	str	r0, [sp, #8]
 800435e:	9101      	str	r1, [sp, #4]
 8004360:	9200      	str	r2, [sp, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004362:	e7ff      	b.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
 8004364:	9802      	ldr	r0, [sp, #8]
 8004366:	6800      	ldr	r0, [r0, #0]
 8004368:	6940      	ldr	r0, [r0, #20]
 800436a:	b2c1      	uxtb	r1, r0
 800436c:	2000      	movs	r0, #0
 800436e:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
 8004372:	d13d      	bne.n	80043f0 <I2C_WaitOnTXEFlagUntilTimeout+0x98>
 8004374:	e7ff      	b.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004376:	9802      	ldr	r0, [sp, #8]
 8004378:	f7ff fd9a 	bl	8003eb0 <I2C_IsAcknowledgeFailed>
 800437c:	b120      	cbz	r0, 8004388 <I2C_WaitOnTXEFlagUntilTimeout+0x30>
 800437e:	e7ff      	b.n	8004380 <I2C_WaitOnTXEFlagUntilTimeout+0x28>
 8004380:	2001      	movs	r0, #1
      return HAL_ERROR;
 8004382:	f88d 000f 	strb.w	r0, [sp, #15]
 8004386:	e037      	b.n	80043f8 <I2C_WaitOnTXEFlagUntilTimeout+0xa0>
    if (Timeout != HAL_MAX_DELAY)
 8004388:	9801      	ldr	r0, [sp, #4]
 800438a:	3001      	adds	r0, #1
 800438c:	b378      	cbz	r0, 80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x96>
 800438e:	e7ff      	b.n	8004390 <I2C_WaitOnTXEFlagUntilTimeout+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004390:	f7fd fabc 	bl	800190c <HAL_GetTick>
 8004394:	9900      	ldr	r1, [sp, #0]
 8004396:	1a40      	subs	r0, r0, r1
 8004398:	9901      	ldr	r1, [sp, #4]
 800439a:	4288      	cmp	r0, r1
 800439c:	d803      	bhi.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
 800439e:	e7ff      	b.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
 80043a0:	9801      	ldr	r0, [sp, #4]
 80043a2:	bb18      	cbnz	r0, 80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x94>
 80043a4:	e7ff      	b.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043a6:	9802      	ldr	r0, [sp, #8]
 80043a8:	6800      	ldr	r0, [r0, #0]
 80043aa:	6940      	ldr	r0, [r0, #20]
 80043ac:	b2c1      	uxtb	r1, r0
 80043ae:	2000      	movs	r0, #0
 80043b0:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
 80043b4:	d119      	bne.n	80043ea <I2C_WaitOnTXEFlagUntilTimeout+0x92>
 80043b6:	e7ff      	b.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x60>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043b8:	9902      	ldr	r1, [sp, #8]
 80043ba:	2000      	movs	r0, #0
 80043bc:	6308      	str	r0, [r1, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043be:	9a02      	ldr	r2, [sp, #8]
 80043c0:	2120      	movs	r1, #32
 80043c2:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c6:	9902      	ldr	r1, [sp, #8]
 80043c8:	f881 003e 	strb.w	r0, [r1, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043cc:	9902      	ldr	r1, [sp, #8]
 80043ce:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 80043d0:	f040 0020 	orr.w	r0, r0, #32
 80043d4:	6408      	str	r0, [r1, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80043d6:	e7ff      	b.n	80043d8 <I2C_WaitOnTXEFlagUntilTimeout+0x80>
 80043d8:	9902      	ldr	r1, [sp, #8]
 80043da:	2000      	movs	r0, #0
 80043dc:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80043e0:	e7ff      	b.n	80043e2 <I2C_WaitOnTXEFlagUntilTimeout+0x8a>
 80043e2:	2001      	movs	r0, #1
          return HAL_ERROR;
 80043e4:	f88d 000f 	strb.w	r0, [sp, #15]
 80043e8:	e006      	b.n	80043f8 <I2C_WaitOnTXEFlagUntilTimeout+0xa0>
      }
 80043ea:	e7ff      	b.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x94>
    }
 80043ec:	e7ff      	b.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ee:	e7b9      	b.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
 80043f0:	2000      	movs	r0, #0
  return HAL_OK;
 80043f2:	f88d 000f 	strb.w	r0, [sp, #15]
 80043f6:	e7ff      	b.n	80043f8 <I2C_WaitOnTXEFlagUntilTimeout+0xa0>
}
 80043f8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80043fc:	b004      	add	sp, #16
 80043fe:	bd80      	pop	{r7, pc}

08004400 <LP5860_x4_Init>:
	return ret;
}


HAL_StatusTypeDef LP5860_x4_Init(SPI_HandleTypeDef *hspi)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	9007      	str	r0, [sp, #28]
 8004406:	f640 0000 	movw	r0, #2048	@ 0x800
 800440a:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 800440e:	9002      	str	r0, [sp, #8]
 8004410:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004414:	9103      	str	r1, [sp, #12]
 8004416:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(VIO_EN_GPIO_Port,VIO_EN_Pin,0);
 8004418:	9205      	str	r2, [sp, #20]
 800441a:	f7fd fa5f 	bl	80018dc <HAL_GPIO_WritePin>
 800441e:	2001      	movs	r0, #1
	HAL_Delay(1);
 8004420:	9004      	str	r0, [sp, #16]
 8004422:	f7fd f8a9 	bl	8001578 <HAL_Delay>
 8004426:	9802      	ldr	r0, [sp, #8]
 8004428:	9903      	ldr	r1, [sp, #12]
 800442a:	9a04      	ldr	r2, [sp, #16]
	HAL_GPIO_WritePin(VIO_EN_GPIO_Port,VIO_EN_Pin,1);
 800442c:	f7fd fa56 	bl	80018dc <HAL_GPIO_WritePin>
 8004430:	9804      	ldr	r0, [sp, #16]
	HAL_Delay(1);
 8004432:	f7fd f8a1 	bl	8001578 <HAL_Delay>
 8004436:	9805      	ldr	r0, [sp, #20]
	for(uint8_t i = 0;i < 4;i++){
 8004438:	f88d 001b 	strb.w	r0, [sp, #27]
 800443c:	e7ff      	b.n	800443e <LP5860_x4_Init+0x3e>
 800443e:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8004442:	2803      	cmp	r0, #3
 8004444:	dc39      	bgt.n	80044ba <LP5860_x4_Init+0xba>
 8004446:	e7ff      	b.n	8004448 <LP5860_x4_Init+0x48>
		// disable
		Lp5860_Write(hspi,i,LP5860_x4_REG_CFG_CHIP_EN,LP5860_x4_DEV_DISABLE);
 8004448:	9807      	ldr	r0, [sp, #28]
 800444a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800444e:	2300      	movs	r3, #0
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	461a      	mov	r2, r3
 8004454:	f000 f834 	bl	80044c0 <Lp5860_Write>
		// reset
		Lp5860_Write(hspi,i,LP5860_x4_REG_CFG_RESET,LP5860_x4_DEV_RESET);
 8004458:	9807      	ldr	r0, [sp, #28]
 800445a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800445e:	22a9      	movs	r2, #169	@ 0xa9
 8004460:	23ff      	movs	r3, #255	@ 0xff
 8004462:	f000 f82d 	bl	80044c0 <Lp5860_Write>
 8004466:	2001      	movs	r0, #1
		HAL_Delay(1);
 8004468:	9000      	str	r0, [sp, #0]
 800446a:	f7fd f885 	bl	8001578 <HAL_Delay>
 800446e:	9b00      	ldr	r3, [sp, #0]
 8004470:	9a01      	ldr	r2, [sp, #4]
		// enable
		Lp5860_Write(hspi,i,LP5860_x4_REG_CFG_CHIP_EN,LP5860_x4_DEV_ENABLE);
 8004472:	9807      	ldr	r0, [sp, #28]
 8004474:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8004478:	f000 f822 	bl	80044c0 <Lp5860_Write>
		HAL_Delay(1);
 800447c:	9800      	ldr	r0, [sp, #0]
 800447e:	f7fd f87b 	bl	8001578 <HAL_Delay>
 8004482:	9a00      	ldr	r2, [sp, #0]
		// mode 1 125kHz
		Lp5860_Write(hspi,i,LP5860_x4_REG_CFG_DEV_INITIAL,LP5860_x4_DEV_11L_MODE2_125K);
 8004484:	9807      	ldr	r0, [sp, #28]
 8004486:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800448a:	235a      	movs	r3, #90	@ 0x5a
 800448c:	f000 f818 	bl	80044c0 <Lp5860_Write>
 8004490:	9b01      	ldr	r3, [sp, #4]
		// config1
		Lp5860_Write(hspi,i,LP5860_x4_REG_CFG_DEV_CONFIG1,LP5860_x4_DEV_LINEAR_CURVE);
 8004492:	9807      	ldr	r0, [sp, #28]
 8004494:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8004498:	2202      	movs	r2, #2
 800449a:	f000 f811 	bl	80044c0 <Lp5860_Write>
		// config2
		// config3
		Lp5860_Write(hspi,i,LP5860_x4_REG_CFG_DEV_CONFIG3,LP5860_x4_DEV_CURR_3mA);
 800449e:	9807      	ldr	r0, [sp, #28]
 80044a0:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80044a4:	2204      	movs	r2, #4
 80044a6:	2351      	movs	r3, #81	@ 0x51
 80044a8:	f000 f80a 	bl	80044c0 <Lp5860_Write>
	}
 80044ac:	e7ff      	b.n	80044ae <LP5860_x4_Init+0xae>
	for(uint8_t i = 0;i < 4;i++){
 80044ae:	f89d 001b 	ldrb.w	r0, [sp, #27]
 80044b2:	3001      	adds	r0, #1
 80044b4:	f88d 001b 	strb.w	r0, [sp, #27]
 80044b8:	e7c1      	b.n	800443e <LP5860_x4_Init+0x3e>
 80044ba:	2000      	movs	r0, #0
	
	return HAL_OK;
 80044bc:	b008      	add	sp, #32
 80044be:	bd80      	pop	{r7, pc}

080044c0 <Lp5860_Write>:
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	9005      	str	r0, [sp, #20]
 80044c6:	f88d 1013 	strb.w	r1, [sp, #19]
 80044ca:	f8ad 2010 	strh.w	r2, [sp, #16]
 80044ce:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_GPIO_WritePin(SS1_GPIO_Port,SS1_Pin,(pos & 0x1)?1:0);
 80044d2:	f89d 0013 	ldrb.w	r0, [sp, #19]
 80044d6:	f000 0201 	and.w	r2, r0, #1
 80044da:	f640 0000 	movw	r0, #2048	@ 0x800
 80044de:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80044e2:	9002      	str	r0, [sp, #8]
 80044e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044e8:	f7fd f9f8 	bl	80018dc <HAL_GPIO_WritePin>
 80044ec:	9802      	ldr	r0, [sp, #8]
	HAL_GPIO_WritePin(SS2_GPIO_Port,SS2_Pin,(pos & 0x2)?1:0);
 80044ee:	f89d 1013 	ldrb.w	r1, [sp, #19]
 80044f2:	f3c1 0240 	ubfx	r2, r1, #1, #1
 80044f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044fa:	f7fd f9ef 	bl	80018dc <HAL_GPIO_WritePin>
 80044fe:	9802      	ldr	r0, [sp, #8]
 8004500:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004504:	9101      	str	r1, [sp, #4]
 8004506:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(SS_EN_GPIO_Port,SS_EN_Pin,0);
 8004508:	f7fd f9e8 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = Lp5860_x4_Write(hspi,reg,data);
 800450c:	9805      	ldr	r0, [sp, #20]
 800450e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8004512:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8004516:	f000 f84b 	bl	80045b0 <Lp5860_x4_Write>
 800451a:	9901      	ldr	r1, [sp, #4]
 800451c:	4602      	mov	r2, r0
 800451e:	9802      	ldr	r0, [sp, #8]
 8004520:	f88d 200e 	strb.w	r2, [sp, #14]
 8004524:	2201      	movs	r2, #1
	HAL_GPIO_WritePin(SS_EN_GPIO_Port,SS_EN_Pin,1);
 8004526:	f7fd f9d9 	bl	80018dc <HAL_GPIO_WritePin>
	return ret;
 800452a:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800452e:	b006      	add	sp, #24
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <Lp5860_Writes>:
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	4684      	mov	ip, r0
 800453a:	9808      	ldr	r0, [sp, #32]
 800453c:	f8cd c014 	str.w	ip, [sp, #20]
 8004540:	f88d 1013 	strb.w	r1, [sp, #19]
 8004544:	f8ad 2010 	strh.w	r2, [sp, #16]
 8004548:	9303      	str	r3, [sp, #12]
 800454a:	f8ad 000a 	strh.w	r0, [sp, #10]
	HAL_GPIO_WritePin(SS1_GPIO_Port,SS1_Pin,(pos & 0x1)?1:0);
 800454e:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8004552:	f000 0201 	and.w	r2, r0, #1
 8004556:	f640 0000 	movw	r0, #2048	@ 0x800
 800455a:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 800455e:	9001      	str	r0, [sp, #4]
 8004560:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004564:	f7fd f9ba 	bl	80018dc <HAL_GPIO_WritePin>
 8004568:	9801      	ldr	r0, [sp, #4]
	HAL_GPIO_WritePin(SS2_GPIO_Port,SS2_Pin,(pos & 0x2)?1:0);
 800456a:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800456e:	f3c1 0240 	ubfx	r2, r1, #1, #1
 8004572:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004576:	f7fd f9b1 	bl	80018dc <HAL_GPIO_WritePin>
 800457a:	9801      	ldr	r0, [sp, #4]
 800457c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004580:	9100      	str	r1, [sp, #0]
 8004582:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(SS_EN_GPIO_Port,SS_EN_Pin,0);
 8004584:	f7fd f9aa 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = Lp5860_x4_Writes(hspi,reg,data,size);
 8004588:	9805      	ldr	r0, [sp, #20]
 800458a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800458e:	9a03      	ldr	r2, [sp, #12]
 8004590:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8004594:	f000 f834 	bl	8004600 <Lp5860_x4_Writes>
 8004598:	9900      	ldr	r1, [sp, #0]
 800459a:	4602      	mov	r2, r0
 800459c:	9801      	ldr	r0, [sp, #4]
 800459e:	f88d 2009 	strb.w	r2, [sp, #9]
 80045a2:	2201      	movs	r2, #1
	HAL_GPIO_WritePin(SS_EN_GPIO_Port,SS_EN_Pin,1);
 80045a4:	f7fd f99a 	bl	80018dc <HAL_GPIO_WritePin>
	return ret;
 80045a8:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80045ac:	b006      	add	sp, #24
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <Lp5860_x4_Write>:
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	9003      	str	r0, [sp, #12]
 80045b6:	f8ad 100a 	strh.w	r1, [sp, #10]
 80045ba:	f88d 2009 	strb.w	r2, [sp, #9]
	reg <<= 6;
 80045be:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80045c2:	0180      	lsls	r0, r0, #6
 80045c4:	f8ad 000a 	strh.w	r0, [sp, #10]
	reg |= 1 << 5;// write
 80045c8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80045cc:	f040 0020 	orr.w	r0, r0, #32
 80045d0:	f8ad 000a 	strh.w	r0, [sp, #10]
	uint8_t tx[3] = { reg>>8,reg&0xFF,data};
 80045d4:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80045d8:	f88d 0006 	strb.w	r0, [sp, #6]
 80045dc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80045e0:	f88d 0007 	strb.w	r0, [sp, #7]
 80045e4:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80045e8:	f88d 0008 	strb.w	r0, [sp, #8]
	return HAL_SPI_Transmit(hspi,tx,3,100);
 80045ec:	9803      	ldr	r0, [sp, #12]
 80045ee:	f10d 0106 	add.w	r1, sp, #6
 80045f2:	2203      	movs	r2, #3
 80045f4:	2364      	movs	r3, #100	@ 0x64
 80045f6:	f7fe fbed 	bl	8002dd4 <HAL_SPI_Transmit>
 80045fa:	b004      	add	sp, #16
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <Lp5860_x4_Writes>:
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	9007      	str	r0, [sp, #28]
 8004606:	f8ad 101a 	strh.w	r1, [sp, #26]
 800460a:	9205      	str	r2, [sp, #20]
 800460c:	f8ad 3012 	strh.w	r3, [sp, #18]
	reg <<= 6;
 8004610:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8004614:	0180      	lsls	r0, r0, #6
 8004616:	f8ad 001a 	strh.w	r0, [sp, #26]
	reg |= 1 << 5;// write
 800461a:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800461e:	f040 0020 	orr.w	r0, r0, #32
 8004622:	f8ad 001a 	strh.w	r0, [sp, #26]
	uint8_t tx[3] = { reg>>8,reg&0xFF};
 8004626:	f89d 001b 	ldrb.w	r0, [sp, #27]
 800462a:	f88d 000f 	strb.w	r0, [sp, #15]
 800462e:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8004632:	f88d 0010 	strb.w	r0, [sp, #16]
 8004636:	f10d 010f 	add.w	r1, sp, #15
 800463a:	1c88      	adds	r0, r1, #2
 800463c:	3103      	adds	r1, #3
 800463e:	9101      	str	r1, [sp, #4]
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	e7ff      	b.n	8004644 <Lp5860_x4_Writes+0x44>
 8004644:	9902      	ldr	r1, [sp, #8]
 8004646:	9a01      	ldr	r2, [sp, #4]
 8004648:	2000      	movs	r0, #0
 800464a:	f801 0b01 	strb.w	r0, [r1], #1
 800464e:	4608      	mov	r0, r1
 8004650:	4291      	cmp	r1, r2
 8004652:	9002      	str	r0, [sp, #8]
 8004654:	d1f6      	bne.n	8004644 <Lp5860_x4_Writes+0x44>
 8004656:	e7ff      	b.n	8004658 <Lp5860_x4_Writes+0x58>
	HAL_SPI_Transmit(hspi,tx,2,100);
 8004658:	9807      	ldr	r0, [sp, #28]
 800465a:	f10d 010f 	add.w	r1, sp, #15
 800465e:	2202      	movs	r2, #2
 8004660:	2364      	movs	r3, #100	@ 0x64
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	f7fe fbb6 	bl	8002dd4 <HAL_SPI_Transmit>
 8004668:	9b00      	ldr	r3, [sp, #0]
	return HAL_SPI_Transmit(hspi,data,size,100);
 800466a:	9807      	ldr	r0, [sp, #28]
 800466c:	9905      	ldr	r1, [sp, #20]
 800466e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8004672:	f7fe fbaf 	bl	8002dd4 <HAL_SPI_Transmit>
 8004676:	b008      	add	sp, #32
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	@ 0x28
 8004680:	2000      	movs	r0, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004682:	9009      	str	r0, [sp, #36]	@ 0x24
 8004684:	9008      	str	r0, [sp, #32]
 8004686:	9007      	str	r0, [sp, #28]
 8004688:	9006      	str	r0, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800468a:	e7ff      	b.n	800468c <MX_GPIO_Init+0x10>
 800468c:	f241 0018 	movw	r0, #4120	@ 0x1018
 8004690:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8004694:	6801      	ldr	r1, [r0, #0]
 8004696:	f041 0120 	orr.w	r1, r1, #32
 800469a:	6001      	str	r1, [r0, #0]
 800469c:	6800      	ldr	r0, [r0, #0]
 800469e:	f000 0020 	and.w	r0, r0, #32
 80046a2:	9005      	str	r0, [sp, #20]
 80046a4:	9805      	ldr	r0, [sp, #20]
 80046a6:	e7ff      	b.n	80046a8 <MX_GPIO_Init+0x2c>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a8:	e7ff      	b.n	80046aa <MX_GPIO_Init+0x2e>
 80046aa:	f241 0018 	movw	r0, #4120	@ 0x1018
 80046ae:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80046b2:	6801      	ldr	r1, [r0, #0]
 80046b4:	f041 0104 	orr.w	r1, r1, #4
 80046b8:	6001      	str	r1, [r0, #0]
 80046ba:	6800      	ldr	r0, [r0, #0]
 80046bc:	f000 0004 	and.w	r0, r0, #4
 80046c0:	9004      	str	r0, [sp, #16]
 80046c2:	9804      	ldr	r0, [sp, #16]
 80046c4:	e7ff      	b.n	80046c6 <MX_GPIO_Init+0x4a>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c6:	e7ff      	b.n	80046c8 <MX_GPIO_Init+0x4c>
 80046c8:	f241 0018 	movw	r0, #4120	@ 0x1018
 80046cc:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80046d0:	6801      	ldr	r1, [r0, #0]
 80046d2:	f041 0108 	orr.w	r1, r1, #8
 80046d6:	6001      	str	r1, [r0, #0]
 80046d8:	6800      	ldr	r0, [r0, #0]
 80046da:	f000 0008 	and.w	r0, r0, #8
 80046de:	9003      	str	r0, [sp, #12]
 80046e0:	9803      	ldr	r0, [sp, #12]
 80046e2:	e7ff      	b.n	80046e4 <MX_GPIO_Init+0x68>
 80046e4:	f640 0000 	movw	r0, #2048	@ 0x800
 80046e8:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80046ec:	9002      	str	r0, [sp, #8]
 80046ee:	f44f 6131 	mov.w	r1, #2832	@ 0xb10
 80046f2:	2200      	movs	r2, #0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Q64_NSS_Pin|SS2_Pin|SS1_Pin|VIO_EN_Pin, GPIO_PIN_RESET);
 80046f4:	9201      	str	r2, [sp, #4]
 80046f6:	f7fd f8f1 	bl	80018dc <HAL_GPIO_WritePin>
 80046fa:	9802      	ldr	r0, [sp, #8]
 80046fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004700:	2201      	movs	r2, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_EN_GPIO_Port, SS_EN_Pin, GPIO_PIN_SET);
 8004702:	9200      	str	r2, [sp, #0]
 8004704:	f7fd f8ea 	bl	80018dc <HAL_GPIO_WritePin>
 8004708:	9a00      	ldr	r2, [sp, #0]
 800470a:	9901      	ldr	r1, [sp, #4]
 800470c:	9802      	ldr	r0, [sp, #8]
 800470e:	f44f 6371 	mov.w	r3, #3856	@ 0xf10

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Q64_NSS_Pin|SS2_Pin|SS1_Pin|SS_EN_Pin
 8004712:	9306      	str	r3, [sp, #24]
                          |VIO_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004714:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	9108      	str	r1, [sp, #32]
 8004718:	2102      	movs	r1, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471a:	9109      	str	r1, [sp, #36]	@ 0x24
 800471c:	a906      	add	r1, sp, #24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471e:	f7fc ff4d 	bl	80015bc <HAL_GPIO_Init>

}
 8004722:	b00a      	add	sp, #40	@ 0x28
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <MX_I2C2_Init>:
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
  hi2c2.Instance = I2C2;
 800472c:	f240 50b0 	movw	r0, #1456	@ 0x5b0
 8004730:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004734:	9001      	str	r0, [sp, #4]
 8004736:	f645 0100 	movw	r1, #22528	@ 0x5800
 800473a:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 800473e:	6001      	str	r1, [r0, #0]
 8004740:	f248 61a0 	movw	r1, #34464	@ 0x86a0
 8004744:	f2c0 0101 	movt	r1, #1
  hi2c2.Init.ClockSpeed = 100000;
 8004748:	6041      	str	r1, [r0, #4]
 800474a:	2100      	movs	r1, #0
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800474c:	6081      	str	r1, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800474e:	60c1      	str	r1, [r0, #12]
 8004750:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004754:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004756:	6141      	str	r1, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004758:	6181      	str	r1, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800475a:	61c1      	str	r1, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800475c:	6201      	str	r1, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800475e:	f7fd f8db 	bl	8001918 <HAL_I2C_Init>
 8004762:	b118      	cbz	r0, 800476c <MX_I2C2_Init+0x44>
 8004764:	e7ff      	b.n	8004766 <MX_I2C2_Init+0x3e>
    Error_Handler();
 8004766:	f7fc feff 	bl	8001568 <Error_Handler>
  }
 800476a:	e7ff      	b.n	800476c <MX_I2C2_Init+0x44>
}
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}

08004770 <MX_SPI1_Init>:
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
  hspi1.Instance = SPI1;
 8004774:	f240 6004 	movw	r0, #1540	@ 0x604
 8004778:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800477c:	9001      	str	r0, [sp, #4]
 800477e:	f243 0100 	movw	r1, #12288	@ 0x3000
 8004782:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8004786:	6001      	str	r1, [r0, #0]
 8004788:	f44f 7182 	mov.w	r1, #260	@ 0x104
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800478c:	6041      	str	r1, [r0, #4]
 800478e:	2100      	movs	r1, #0
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004790:	6081      	str	r1, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004792:	60c1      	str	r1, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004794:	6101      	str	r1, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004796:	6141      	str	r1, [r0, #20]
 8004798:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800479c:	6182      	str	r2, [r0, #24]
 800479e:	2210      	movs	r2, #16
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80047a0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047a2:	6201      	str	r1, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047a4:	6241      	str	r1, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a6:	6281      	str	r1, [r0, #40]	@ 0x28
 80047a8:	210a      	movs	r1, #10
  hspi1.Init.CRCPolynomial = 10;
 80047aa:	62c1      	str	r1, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047ac:	f7fe f8e6 	bl	800297c <HAL_SPI_Init>
 80047b0:	b118      	cbz	r0, 80047ba <MX_SPI1_Init+0x4a>
 80047b2:	e7ff      	b.n	80047b4 <MX_SPI1_Init+0x44>
    Error_Handler();
 80047b4:	f7fc fed8 	bl	8001568 <Error_Handler>
  }
 80047b8:	e7ff      	b.n	80047ba <MX_SPI1_Init+0x4a>
}
 80047ba:	b002      	add	sp, #8
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <MX_SPI2_Init>:
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
  hspi2.Instance = SPI2;
 80047c4:	f240 605c 	movw	r0, #1628	@ 0x65c
 80047c8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80047cc:	9001      	str	r0, [sp, #4]
 80047ce:	f643 0100 	movw	r1, #14336	@ 0x3800
 80047d2:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 80047d6:	6001      	str	r1, [r0, #0]
 80047d8:	f44f 7182 	mov.w	r1, #260	@ 0x104
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80047dc:	6041      	str	r1, [r0, #4]
 80047de:	2100      	movs	r1, #0
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80047e0:	6081      	str	r1, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80047e2:	60c1      	str	r1, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047e4:	6101      	str	r1, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047e6:	6141      	str	r1, [r0, #20]
 80047e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80047ec:	6182      	str	r2, [r0, #24]
 80047ee:	2220      	movs	r2, #32
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80047f0:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047f2:	6201      	str	r1, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80047f4:	6241      	str	r1, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f6:	6281      	str	r1, [r0, #40]	@ 0x28
 80047f8:	210a      	movs	r1, #10
  hspi2.Init.CRCPolynomial = 10;
 80047fa:	62c1      	str	r1, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80047fc:	f7fe f8be 	bl	800297c <HAL_SPI_Init>
 8004800:	b118      	cbz	r0, 800480a <MX_SPI2_Init+0x4a>
 8004802:	e7ff      	b.n	8004804 <MX_SPI2_Init+0x44>
    Error_Handler();
 8004804:	f7fc feb0 	bl	8001568 <Error_Handler>
  }
 8004808:	e7ff      	b.n	800480a <MX_SPI2_Init+0x4a>
}
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <MX_TIM2_Init>:
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	2100      	movs	r1, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004816:	9105      	str	r1, [sp, #20]
 8004818:	9104      	str	r1, [sp, #16]
 800481a:	9103      	str	r1, [sp, #12]
 800481c:	9102      	str	r1, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800481e:	9101      	str	r1, [sp, #4]
 8004820:	9100      	str	r1, [sp, #0]
  htim2.Instance = TIM2;
 8004822:	f240 60b4 	movw	r0, #1716	@ 0x6b4
 8004826:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800482a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800482e:	6002      	str	r2, [r0, #0]
 8004830:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
  htim2.Init.Prescaler = 1000;
 8004834:	6042      	str	r2, [r0, #4]
 8004836:	2210      	movs	r2, #16
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004838:	6082      	str	r2, [r0, #8]
 800483a:	f640 125f 	movw	r2, #2399	@ 0x95f
  htim2.Init.Period = 2400-1;
 800483e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004840:	6101      	str	r1, [r0, #16]
 8004842:	2180      	movs	r1, #128	@ 0x80
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004844:	6181      	str	r1, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004846:	f7fe fe53 	bl	80034f0 <HAL_TIM_Base_Init>
 800484a:	b118      	cbz	r0, 8004854 <MX_TIM2_Init+0x44>
 800484c:	e7ff      	b.n	800484e <MX_TIM2_Init+0x3e>
    Error_Handler();
 800484e:	f7fc fe8b 	bl	8001568 <Error_Handler>
  }
 8004852:	e7ff      	b.n	8004854 <MX_TIM2_Init+0x44>
 8004854:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004858:	9002      	str	r0, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800485a:	f240 60b4 	movw	r0, #1716	@ 0x6b4
 800485e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004862:	a902      	add	r1, sp, #8
 8004864:	f7fe ff0e 	bl	8003684 <HAL_TIM_ConfigClockSource>
 8004868:	b118      	cbz	r0, 8004872 <MX_TIM2_Init+0x62>
 800486a:	e7ff      	b.n	800486c <MX_TIM2_Init+0x5c>
    Error_Handler();
 800486c:	f7fc fe7c 	bl	8001568 <Error_Handler>
  }
 8004870:	e7ff      	b.n	8004872 <MX_TIM2_Init+0x62>
 8004872:	2000      	movs	r0, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004874:	9000      	str	r0, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004876:	9001      	str	r0, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004878:	f240 60b4 	movw	r0, #1716	@ 0x6b4
 800487c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004880:	4669      	mov	r1, sp
 8004882:	f7fe fdc7 	bl	8003414 <HAL_TIMEx_MasterConfigSynchronization>
 8004886:	b118      	cbz	r0, 8004890 <MX_TIM2_Init+0x80>
 8004888:	e7ff      	b.n	800488a <MX_TIM2_Init+0x7a>
    Error_Handler();
 800488a:	f7fc fe6d 	bl	8001568 <Error_Handler>
  }
 800488e:	e7ff      	b.n	8004890 <MX_TIM2_Init+0x80>
}
 8004890:	b006      	add	sp, #24
 8004892:	bd80      	pop	{r7, pc}

08004894 <MX_TIM4_Init>:
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	@ 0x28
 8004898:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800489a:	9100      	str	r1, [sp, #0]
 800489c:	9109      	str	r1, [sp, #36]	@ 0x24
 800489e:	9108      	str	r1, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048a0:	9107      	str	r1, [sp, #28]
 80048a2:	9106      	str	r1, [sp, #24]
 80048a4:	9105      	str	r1, [sp, #20]
 80048a6:	9104      	str	r1, [sp, #16]
 80048a8:	9103      	str	r1, [sp, #12]
 80048aa:	9102      	str	r1, [sp, #8]
 80048ac:	9101      	str	r1, [sp, #4]
  htim4.Instance = TIM4;
 80048ae:	f240 60fc 	movw	r0, #1788	@ 0x6fc
 80048b2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80048b6:	f640 0200 	movw	r2, #2048	@ 0x800
 80048ba:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80048be:	6002      	str	r2, [r0, #0]
 80048c0:	2247      	movs	r2, #71	@ 0x47
  htim4.Init.Prescaler = 72-1;
 80048c2:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048c4:	6081      	str	r1, [r0, #8]
 80048c6:	22f9      	movs	r2, #249	@ 0xf9
  htim4.Init.Period = 250-1;
 80048c8:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048ca:	6101      	str	r1, [r0, #16]
 80048cc:	2180      	movs	r1, #128	@ 0x80
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048ce:	6181      	str	r1, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80048d0:	f7ff f9b2 	bl	8003c38 <HAL_TIM_PWM_Init>
 80048d4:	b118      	cbz	r0, 80048de <MX_TIM4_Init+0x4a>
 80048d6:	e7ff      	b.n	80048d8 <MX_TIM4_Init+0x44>
    Error_Handler();
 80048d8:	f7fc fe46 	bl	8001568 <Error_Handler>
  }
 80048dc:	e7ff      	b.n	80048de <MX_TIM4_Init+0x4a>
 80048de:	2000      	movs	r0, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048e0:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048e2:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80048e4:	f240 60fc 	movw	r0, #1788	@ 0x6fc
 80048e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80048ec:	a908      	add	r1, sp, #32
 80048ee:	f7fe fd91 	bl	8003414 <HAL_TIMEx_MasterConfigSynchronization>
 80048f2:	b118      	cbz	r0, 80048fc <MX_TIM4_Init+0x68>
 80048f4:	e7ff      	b.n	80048f6 <MX_TIM4_Init+0x62>
    Error_Handler();
 80048f6:	f7fc fe37 	bl	8001568 <Error_Handler>
  }
 80048fa:	e7ff      	b.n	80048fc <MX_TIM4_Init+0x68>
 80048fc:	2060      	movs	r0, #96	@ 0x60
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048fe:	9001      	str	r0, [sp, #4]
 8004900:	2200      	movs	r2, #0
  sConfigOC.Pulse = 0;
 8004902:	9202      	str	r2, [sp, #8]
 8004904:	2002      	movs	r0, #2
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004906:	9003      	str	r0, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004908:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800490a:	f240 60fc 	movw	r0, #1788	@ 0x6fc
 800490e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004912:	a901      	add	r1, sp, #4
 8004914:	f7ff f8ee 	bl	8003af4 <HAL_TIM_PWM_ConfigChannel>
 8004918:	b118      	cbz	r0, 8004922 <MX_TIM4_Init+0x8e>
 800491a:	e7ff      	b.n	800491c <MX_TIM4_Init+0x88>
    Error_Handler();
 800491c:	f7fc fe24 	bl	8001568 <Error_Handler>
  }
 8004920:	e7ff      	b.n	8004922 <MX_TIM4_Init+0x8e>
  HAL_TIM_MspPostInit(&htim4);
 8004922:	f240 60fc 	movw	r0, #1788	@ 0x6fc
 8004926:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800492a:	f7ff f8af 	bl	8003a8c <HAL_TIM_MspPostInit>
}
 800492e:	b00a      	add	sp, #40	@ 0x28
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <MemManage_Handler>:
  while (1)
 8004934:	e7ff      	b.n	8004936 <MemManage_Handler+0x2>
 8004936:	e7fe      	b.n	8004936 <MemManage_Handler+0x2>

08004938 <NMI_Handler>:
   while (1)
 8004938:	e7ff      	b.n	800493a <NMI_Handler+0x2>
 800493a:	e7fe      	b.n	800493a <NMI_Handler+0x2>

0800493c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800493c:	b088      	sub	sp, #32
 800493e:	9007      	str	r0, [sp, #28]
 8004940:	9106      	str	r1, [sp, #24]
 8004942:	9205      	str	r2, [sp, #20]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004944:	9807      	ldr	r0, [sp, #28]
 8004946:	f000 0007 	and.w	r0, r0, #7
 800494a:	9004      	str	r0, [sp, #16]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800494c:	9804      	ldr	r0, [sp, #16]
 800494e:	f1c0 0007 	rsb	r0, r0, #7
 8004952:	2805      	cmp	r0, #5
 8004954:	d303      	bcc.n	800495e <NVIC_EncodePriority+0x22>
 8004956:	e7ff      	b.n	8004958 <NVIC_EncodePriority+0x1c>
 8004958:	2004      	movs	r0, #4
 800495a:	9001      	str	r0, [sp, #4]
 800495c:	e004      	b.n	8004968 <NVIC_EncodePriority+0x2c>
 800495e:	9804      	ldr	r0, [sp, #16]
 8004960:	f1c0 0007 	rsb	r0, r0, #7
 8004964:	9001      	str	r0, [sp, #4]
 8004966:	e7ff      	b.n	8004968 <NVIC_EncodePriority+0x2c>
 8004968:	9801      	ldr	r0, [sp, #4]
 800496a:	9003      	str	r0, [sp, #12]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800496c:	9804      	ldr	r0, [sp, #16]
 800496e:	3004      	adds	r0, #4
 8004970:	2806      	cmp	r0, #6
 8004972:	d803      	bhi.n	800497c <NVIC_EncodePriority+0x40>
 8004974:	e7ff      	b.n	8004976 <NVIC_EncodePriority+0x3a>
 8004976:	2000      	movs	r0, #0
 8004978:	9000      	str	r0, [sp, #0]
 800497a:	e003      	b.n	8004984 <NVIC_EncodePriority+0x48>
 800497c:	9804      	ldr	r0, [sp, #16]
 800497e:	3803      	subs	r0, #3
 8004980:	9000      	str	r0, [sp, #0]
 8004982:	e7ff      	b.n	8004984 <NVIC_EncodePriority+0x48>
 8004984:	9800      	ldr	r0, [sp, #0]
 8004986:	9002      	str	r0, [sp, #8]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004988:	9806      	ldr	r0, [sp, #24]
 800498a:	9903      	ldr	r1, [sp, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	fa02 f101 	lsl.w	r1, r2, r1
 8004992:	3901      	subs	r1, #1
 8004994:	4008      	ands	r0, r1
 8004996:	9b02      	ldr	r3, [sp, #8]
 8004998:	4098      	lsls	r0, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800499a:	9905      	ldr	r1, [sp, #20]
 800499c:	409a      	lsls	r2, r3
 800499e:	3a01      	subs	r2, #1
 80049a0:	4011      	ands	r1, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a2:	4308      	orrs	r0, r1
  return (
 80049a4:	b008      	add	sp, #32
 80049a6:	4770      	bx	lr

080049a8 <OLED_Display_Off>:
{
	return HAL_I2C_Mem_Write(&hi2c2,0x78,0x40,I2C_MEMADD_SIZE_8BIT,data,size,100);
}

HAL_StatusTypeDef OLED_Display_Off(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	20ae      	movs	r0, #174	@ 0xae
	uint8_t Off_Cmd[] = {0X8D,0X10,0xAE};
 80049ae:	f88d 0006 	strb.w	r0, [sp, #6]
 80049b2:	f241 008d 	movw	r0, #4237	@ 0x108d
 80049b6:	f8ad 0004 	strh.w	r0, [sp, #4]
 80049ba:	a801      	add	r0, sp, #4
 80049bc:	2103      	movs	r1, #3
	st = OLED_Write_Cmd(Off_Cmd,sizeof(Off_Cmd));
 80049be:	f000 f983 	bl	8004cc8 <OLED_Write_Cmd>
 80049c2:	4601      	mov	r1, r0
 80049c4:	f240 7044 	movw	r0, #1860	@ 0x744
 80049c8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80049cc:	7001      	strb	r1, [r0, #0]
  return st;
 80049ce:	7800      	ldrb	r0, [r0, #0]
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <OLED_Display_On>:
}

HAL_StatusTypeDef OLED_Display_On(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	20af      	movs	r0, #175	@ 0xaf
	uint8_t On_Cmd[] = {0X8D,0X14,0XAF};
 80049da:	f88d 0006 	strb.w	r0, [sp, #6]
 80049de:	f241 408d 	movw	r0, #5261	@ 0x148d
 80049e2:	f8ad 0004 	strh.w	r0, [sp, #4]
 80049e6:	a801      	add	r0, sp, #4
 80049e8:	2103      	movs	r1, #3
  return OLED_Write_Cmd(On_Cmd,sizeof(On_Cmd));
 80049ea:	f000 f96d 	bl	8004cc8 <OLED_Write_Cmd>
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <OLED_Fill>:
{
	return OLED_Raw_Fill(0);
}

HAL_StatusTypeDef OLED_Fill(uint8_t map[4][128])
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	9002      	str	r0, [sp, #8]
 80049fa:	2000      	movs	r0, #0
	for(uint8_t i = 0;i < 4;i++)
 80049fc:	f88d 0007 	strb.w	r0, [sp, #7]
 8004a00:	e7ff      	b.n	8004a02 <OLED_Fill+0xe>
 8004a02:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004a06:	2803      	cmp	r0, #3
 8004a08:	dc32      	bgt.n	8004a70 <OLED_Fill+0x7c>
 8004a0a:	e7ff      	b.n	8004a0c <OLED_Fill+0x18>
	{
		if((st = OLED_Raw_SetPos(i,0)) != HAL_OK) return st;
 8004a0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004a10:	2100      	movs	r1, #0
 8004a12:	f000 f93b 	bl	8004c8c <OLED_Raw_SetPos>
 8004a16:	f240 7144 	movw	r1, #1860	@ 0x744
 8004a1a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004a1e:	7008      	strb	r0, [r1, #0]
 8004a20:	b140      	cbz	r0, 8004a34 <OLED_Fill+0x40>
 8004a22:	e7ff      	b.n	8004a24 <OLED_Fill+0x30>
 8004a24:	f240 7044 	movw	r0, #1860	@ 0x744
 8004a28:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004a2c:	7800      	ldrb	r0, [r0, #0]
 8004a2e:	f88d 000f 	strb.w	r0, [sp, #15]
 8004a32:	e021      	b.n	8004a78 <OLED_Fill+0x84>
		if((st = OLED_Write_Data(map[i],sizeof(map[i]))) != HAL_OK) return st;
 8004a34:	9802      	ldr	r0, [sp, #8]
 8004a36:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004a3a:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 8004a3e:	2180      	movs	r1, #128	@ 0x80
 8004a40:	f000 f95a 	bl	8004cf8 <OLED_Write_Data>
 8004a44:	f240 7144 	movw	r1, #1860	@ 0x744
 8004a48:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004a4c:	7008      	strb	r0, [r1, #0]
 8004a4e:	b140      	cbz	r0, 8004a62 <OLED_Fill+0x6e>
 8004a50:	e7ff      	b.n	8004a52 <OLED_Fill+0x5e>
 8004a52:	f240 7044 	movw	r0, #1860	@ 0x744
 8004a56:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004a5a:	7800      	ldrb	r0, [r0, #0]
 8004a5c:	f88d 000f 	strb.w	r0, [sp, #15]
 8004a60:	e00a      	b.n	8004a78 <OLED_Fill+0x84>
	}
 8004a62:	e7ff      	b.n	8004a64 <OLED_Fill+0x70>
	for(uint8_t i = 0;i < 4;i++)
 8004a64:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f88d 0007 	strb.w	r0, [sp, #7]
 8004a6e:	e7c8      	b.n	8004a02 <OLED_Fill+0xe>
 8004a70:	2000      	movs	r0, #0
	return HAL_OK;
 8004a72:	f88d 000f 	strb.w	r0, [sp, #15]
 8004a76:	e7ff      	b.n	8004a78 <OLED_Fill+0x84>
}
 8004a78:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004a7c:	b004      	add	sp, #16
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <OLED_Init>:


HAL_StatusTypeDef OLED_Init(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004a86:	a80a      	add	r0, sp, #40	@ 0x28
 8004a88:	9002      	str	r0, [sp, #8]
 8004a8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
	uint8_t gmap[4][128] = {0};
 8004a8e:	f7fb fc82 	bl	8000396 <__aeabi_memclr>
 8004a92:	f640 4000 	movw	r0, #3072	@ 0xc00
 8004a96:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8004a9a:	2120      	movs	r1, #32
 8004a9c:	2200      	movs	r2, #0
	
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);// enable
 8004a9e:	9204      	str	r2, [sp, #16]
 8004aa0:	f7fc ff1c 	bl	80018dc <HAL_GPIO_WritePin>
	
	OLED_Display_Off();
 8004aa4:	f7ff ff80 	bl	80049a8 <OLED_Display_Off>
 8004aa8:	200a      	movs	r0, #10
	HAL_Delay(10);
 8004aaa:	9003      	str	r0, [sp, #12]
 8004aac:	f7fc fd64 	bl	8001578 <HAL_Delay>
	
	uint8_t cmd[] = 
 8004ab0:	f246 1174 	movw	r1, #24948	@ 0x6174
 8004ab4:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8004ab8:	a805      	add	r0, sp, #20
 8004aba:	9001      	str	r0, [sp, #4]
 8004abc:	2214      	movs	r2, #20
 8004abe:	9200      	str	r2, [sp, #0]
 8004ac0:	f7fb fc24 	bl	800030c <__rt_memcpy>
 8004ac4:	9900      	ldr	r1, [sp, #0]
	{
		0x00,0x10,0x00,0xB0,0x81,0x8F,0xA1,0xA8,
		0x1F,0xC8,0xD3,0x00,0xD5,0x80,0xD9,
		0x1F,0xDA,0x00,0xDB,0x40
	};
	OLED_Write_Cmd(cmd,sizeof(cmd));
 8004ac6:	9801      	ldr	r0, [sp, #4]
 8004ac8:	f000 f8fe 	bl	8004cc8 <OLED_Write_Cmd>
	
	HAL_Delay(10);
 8004acc:	9803      	ldr	r0, [sp, #12]
 8004ace:	f7fc fd53 	bl	8001578 <HAL_Delay>
 8004ad2:	9802      	ldr	r0, [sp, #8]
	OLED_Fill(gmap);
 8004ad4:	f7ff ff8e 	bl	80049f4 <OLED_Fill>
	
	HAL_Delay(10);
 8004ad8:	9803      	ldr	r0, [sp, #12]
 8004ada:	f7fc fd4d 	bl	8001578 <HAL_Delay>
	OLED_Display_On();
 8004ade:	f7ff ff79 	bl	80049d4 <OLED_Display_On>
	return HAL_OK;
 8004ae2:	9804      	ldr	r0, [sp, #16]
 8004ae4:	f50d 7d0a 	add.w	sp, sp, #552	@ 0x228
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <OLED_Raw_Draw_Char>:
	if((st = OLED_Write_Data(F6x8[i],6)) != HAL_OK) return st;
	return HAL_OK;
}

HAL_StatusTypeDef OLED_Raw_Draw_Char(uint8_t p,uint8_t c,uint8_t ch)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	f88d 0007 	strb.w	r0, [sp, #7]
 8004af4:	f88d 1006 	strb.w	r1, [sp, #6]
 8004af8:	f88d 2005 	strb.w	r2, [sp, #5]
	if(ch < ' ' || ch > 'z'){
 8004afc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b00:	2820      	cmp	r0, #32
 8004b02:	db05      	blt.n	8004b10 <OLED_Raw_Draw_Char+0x24>
 8004b04:	e7ff      	b.n	8004b06 <OLED_Raw_Draw_Char+0x1a>
 8004b06:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b0a:	287b      	cmp	r0, #123	@ 0x7b
 8004b0c:	db04      	blt.n	8004b18 <OLED_Raw_Draw_Char+0x2c>
 8004b0e:	e7ff      	b.n	8004b10 <OLED_Raw_Draw_Char+0x24>
 8004b10:	2000      	movs	r0, #0
		ch = 0;
 8004b12:	f88d 0005 	strb.w	r0, [sp, #5]
	}else if(ch < 'A'){
 8004b16:	e01d      	b.n	8004b54 <OLED_Raw_Draw_Char+0x68>
 8004b18:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b1c:	2840      	cmp	r0, #64	@ 0x40
 8004b1e:	dc06      	bgt.n	8004b2e <OLED_Raw_Draw_Char+0x42>
 8004b20:	e7ff      	b.n	8004b22 <OLED_Raw_Draw_Char+0x36>
		ch = ch - ' ';
 8004b22:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b26:	3820      	subs	r0, #32
 8004b28:	f88d 0005 	strb.w	r0, [sp, #5]
	}else if(ch < 'a'){
 8004b2c:	e011      	b.n	8004b52 <OLED_Raw_Draw_Char+0x66>
 8004b2e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b32:	2860      	cmp	r0, #96	@ 0x60
 8004b34:	dc06      	bgt.n	8004b44 <OLED_Raw_Draw_Char+0x58>
 8004b36:	e7ff      	b.n	8004b38 <OLED_Raw_Draw_Char+0x4c>
		ch = ch - 'A' + 33;
 8004b38:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b3c:	3820      	subs	r0, #32
 8004b3e:	f88d 0005 	strb.w	r0, [sp, #5]
	}else ch = ch - 'a' + 65;
 8004b42:	e005      	b.n	8004b50 <OLED_Raw_Draw_Char+0x64>
 8004b44:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b48:	3820      	subs	r0, #32
 8004b4a:	f88d 0005 	strb.w	r0, [sp, #5]
 8004b4e:	e7ff      	b.n	8004b50 <OLED_Raw_Draw_Char+0x64>
 8004b50:	e7ff      	b.n	8004b52 <OLED_Raw_Draw_Char+0x66>
 8004b52:	e7ff      	b.n	8004b54 <OLED_Raw_Draw_Char+0x68>
	
	return OLED_Raw_Draw_F(p,c,ch);
 8004b54:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004b58:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004b5c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004b60:	f000 f802 	bl	8004b68 <OLED_Raw_Draw_F>
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <OLED_Raw_Draw_F>:
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	f88d 0006 	strb.w	r0, [sp, #6]
 8004b70:	f88d 1005 	strb.w	r1, [sp, #5]
 8004b74:	f88d 2004 	strb.w	r2, [sp, #4]
	if((st = OLED_Raw_SetPos(p,c)) != HAL_OK) return st;
 8004b78:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004b7c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004b80:	f000 f884 	bl	8004c8c <OLED_Raw_SetPos>
 8004b84:	f240 7144 	movw	r1, #1860	@ 0x744
 8004b88:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004b8c:	7008      	strb	r0, [r1, #0]
 8004b8e:	b140      	cbz	r0, 8004ba2 <OLED_Raw_Draw_F+0x3a>
 8004b90:	e7ff      	b.n	8004b92 <OLED_Raw_Draw_F+0x2a>
 8004b92:	f240 7044 	movw	r0, #1860	@ 0x744
 8004b96:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004b9a:	7800      	ldrb	r0, [r0, #0]
 8004b9c:	f88d 0007 	strb.w	r0, [sp, #7]
 8004ba0:	e01f      	b.n	8004be2 <OLED_Raw_Draw_F+0x7a>
	if((st = OLED_Write_Data(F6x8[i],6)) != HAL_OK) return st;
 8004ba2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004ba6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8004baa:	f240 0000 	movw	r0, #0
 8004bae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004bb2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8004bb6:	2106      	movs	r1, #6
 8004bb8:	f000 f89e 	bl	8004cf8 <OLED_Write_Data>
 8004bbc:	f240 7144 	movw	r1, #1860	@ 0x744
 8004bc0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004bc4:	7008      	strb	r0, [r1, #0]
 8004bc6:	b140      	cbz	r0, 8004bda <OLED_Raw_Draw_F+0x72>
 8004bc8:	e7ff      	b.n	8004bca <OLED_Raw_Draw_F+0x62>
 8004bca:	f240 7044 	movw	r0, #1860	@ 0x744
 8004bce:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004bd2:	7800      	ldrb	r0, [r0, #0]
 8004bd4:	f88d 0007 	strb.w	r0, [sp, #7]
 8004bd8:	e003      	b.n	8004be2 <OLED_Raw_Draw_F+0x7a>
 8004bda:	2000      	movs	r0, #0
	return HAL_OK;
 8004bdc:	f88d 0007 	strb.w	r0, [sp, #7]
 8004be0:	e7ff      	b.n	8004be2 <OLED_Raw_Draw_F+0x7a>
}
 8004be2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <OLED_Raw_Draw_String>:
}

// ascii only
HAL_StatusTypeDef OLED_Raw_Draw_String(uint8_t p,uint8_t c,const char *str,uint8_t s)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	f88d 000e 	strb.w	r0, [sp, #14]
 8004bf4:	f88d 100d 	strb.w	r1, [sp, #13]
 8004bf8:	9202      	str	r2, [sp, #8]
 8004bfa:	f88d 3007 	strb.w	r3, [sp, #7]
 8004bfe:	2000      	movs	r0, #0
	for(uint8_t i = 0;i < s;i++,c+=6) {
 8004c00:	f88d 0006 	strb.w	r0, [sp, #6]
 8004c04:	e7ff      	b.n	8004c06 <OLED_Raw_Draw_String+0x1a>
 8004c06:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004c0a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004c0e:	4288      	cmp	r0, r1
 8004c10:	da33      	bge.n	8004c7a <OLED_Raw_Draw_String+0x8e>
 8004c12:	e7ff      	b.n	8004c14 <OLED_Raw_Draw_String+0x28>
		if(c > 128 - 6) {
 8004c14:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8004c18:	287b      	cmp	r0, #123	@ 0x7b
 8004c1a:	db09      	blt.n	8004c30 <OLED_Raw_Draw_String+0x44>
 8004c1c:	e7ff      	b.n	8004c1e <OLED_Raw_Draw_String+0x32>
 8004c1e:	2000      	movs	r0, #0
			c = 0;
 8004c20:	f88d 000d 	strb.w	r0, [sp, #13]
			p++;
 8004c24:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f88d 000e 	strb.w	r0, [sp, #14]
		}
 8004c2e:	e7ff      	b.n	8004c30 <OLED_Raw_Draw_String+0x44>
		
		if((st = OLED_Raw_Draw_Char(p,c,str[i])) != HAL_OK) return st;
 8004c30:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8004c34:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8004c38:	9a02      	ldr	r2, [sp, #8]
 8004c3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004c3e:	5cd2      	ldrb	r2, [r2, r3]
 8004c40:	f7ff ff54 	bl	8004aec <OLED_Raw_Draw_Char>
 8004c44:	f240 7144 	movw	r1, #1860	@ 0x744
 8004c48:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004c4c:	7008      	strb	r0, [r1, #0]
 8004c4e:	b140      	cbz	r0, 8004c62 <OLED_Raw_Draw_String+0x76>
 8004c50:	e7ff      	b.n	8004c52 <OLED_Raw_Draw_String+0x66>
 8004c52:	f240 7044 	movw	r0, #1860	@ 0x744
 8004c56:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004c5a:	7800      	ldrb	r0, [r0, #0]
 8004c5c:	f88d 000f 	strb.w	r0, [sp, #15]
 8004c60:	e00f      	b.n	8004c82 <OLED_Raw_Draw_String+0x96>
	}
 8004c62:	e7ff      	b.n	8004c64 <OLED_Raw_Draw_String+0x78>
	for(uint8_t i = 0;i < s;i++,c+=6) {
 8004c64:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f88d 0006 	strb.w	r0, [sp, #6]
 8004c6e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8004c72:	3006      	adds	r0, #6
 8004c74:	f88d 000d 	strb.w	r0, [sp, #13]
 8004c78:	e7c5      	b.n	8004c06 <OLED_Raw_Draw_String+0x1a>
 8004c7a:	2000      	movs	r0, #0
	
	return HAL_OK;
 8004c7c:	f88d 000f 	strb.w	r0, [sp, #15]
 8004c80:	e7ff      	b.n	8004c82 <OLED_Raw_Draw_String+0x96>
}
 8004c82:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004c86:	b004      	add	sp, #16
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <OLED_Raw_SetPos>:
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	f88d 0007 	strb.w	r0, [sp, #7]
 8004c94:	f88d 1006 	strb.w	r1, [sp, #6]
	uint8_t SP_Cmd[] = {c & 0xF,0x10 | ((c & 0xF0) >> 4),0xB0 + p};
 8004c98:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004c9c:	f000 000f 	and.w	r0, r0, #15
 8004ca0:	f88d 0003 	strb.w	r0, [sp, #3]
 8004ca4:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004ca8:	0900      	lsrs	r0, r0, #4
 8004caa:	3010      	adds	r0, #16
 8004cac:	f88d 0004 	strb.w	r0, [sp, #4]
 8004cb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004cb4:	30b0      	adds	r0, #176	@ 0xb0
 8004cb6:	f88d 0005 	strb.w	r0, [sp, #5]
 8004cba:	f10d 0003 	add.w	r0, sp, #3
 8004cbe:	2103      	movs	r1, #3
  return OLED_Write_Cmd(SP_Cmd,sizeof(SP_Cmd));
 8004cc0:	f000 f802 	bl	8004cc8 <OLED_Write_Cmd>
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <OLED_Write_Cmd>:
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	9005      	str	r0, [sp, #20]
 8004cce:	f8ad 1012 	strh.w	r1, [sp, #18]
	return HAL_I2C_Mem_Write(&hi2c2,0x78,0x0,I2C_MEMADD_SIZE_8BIT,cmd,size,100);
 8004cd2:	9805      	ldr	r0, [sp, #20]
 8004cd4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8004cd8:	4669      	mov	r1, sp
 8004cda:	2364      	movs	r3, #100	@ 0x64
 8004cdc:	608b      	str	r3, [r1, #8]
 8004cde:	604a      	str	r2, [r1, #4]
 8004ce0:	6008      	str	r0, [r1, #0]
 8004ce2:	f240 50b0 	movw	r0, #1456	@ 0x5b0
 8004ce6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004cea:	2178      	movs	r1, #120	@ 0x78
 8004cec:	2200      	movs	r2, #0
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f7fc ff64 	bl	8001bbc <HAL_I2C_Mem_Write>
 8004cf4:	b006      	add	sp, #24
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <OLED_Write_Data>:
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	9005      	str	r0, [sp, #20]
 8004cfe:	f8ad 1012 	strh.w	r1, [sp, #18]
	return HAL_I2C_Mem_Write(&hi2c2,0x78,0x40,I2C_MEMADD_SIZE_8BIT,data,size,100);
 8004d02:	9805      	ldr	r0, [sp, #20]
 8004d04:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8004d08:	4669      	mov	r1, sp
 8004d0a:	2364      	movs	r3, #100	@ 0x64
 8004d0c:	608b      	str	r3, [r1, #8]
 8004d0e:	604a      	str	r2, [r1, #4]
 8004d10:	6008      	str	r0, [r1, #0]
 8004d12:	f240 50b0 	movw	r0, #1456	@ 0x5b0
 8004d16:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004d1a:	2178      	movs	r1, #120	@ 0x78
 8004d1c:	2240      	movs	r2, #64	@ 0x40
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f7fc ff4c 	bl	8001bbc <HAL_I2C_Mem_Write>
 8004d24:	b006      	add	sp, #24
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d28:	4770      	bx	lr
	...

08004d2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	9001      	str	r0, [sp, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d30:	9801      	ldr	r0, [sp, #4]
 8004d32:	f240 2128 	movw	r1, #552	@ 0x228
 8004d36:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004d3a:	6809      	ldr	r1, [r1, #0]
 8004d3c:	08c9      	lsrs	r1, r1, #3
 8004d3e:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8004d42:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8004d46:	fba1 2102 	umull	r2, r1, r1, r2
 8004d4a:	0989      	lsrs	r1, r1, #6
 8004d4c:	4348      	muls	r0, r1
 8004d4e:	9000      	str	r0, [sp, #0]
  do
 8004d50:	e7ff      	b.n	8004d52 <RCC_Delay+0x26>
  {
    __NOP();
 8004d52:	bf00      	nop
  }
 8004d54:	e7ff      	b.n	8004d56 <RCC_Delay+0x2a>
  while (Delay --);
 8004d56:	9800      	ldr	r0, [sp, #0]
 8004d58:	1e41      	subs	r1, r0, #1
 8004d5a:	9100      	str	r1, [sp, #0]
  }
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d1f8      	bne.n	8004d52 <RCC_Delay+0x26>
 8004d60:	e7ff      	b.n	8004d62 <RCC_Delay+0x36>
}
 8004d62:	b002      	add	sp, #8
 8004d64:	4770      	bx	lr
	...

08004d68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	9004      	str	r0, [sp, #16]
 8004d6e:	9103      	str	r1, [sp, #12]
 8004d70:	9202      	str	r2, [sp, #8]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d72:	9804      	ldr	r0, [sp, #16]
 8004d74:	6840      	ldr	r0, [r0, #4]
 8004d76:	f5b0 7f82 	cmp.w	r0, #260	@ 0x104
 8004d7a:	d113      	bne.n	8004da4 <SPI_EndRxTransaction+0x3c>
 8004d7c:	e7ff      	b.n	8004d7e <SPI_EndRxTransaction+0x16>
 8004d7e:	9804      	ldr	r0, [sp, #16]
 8004d80:	6880      	ldr	r0, [r0, #8]
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d82:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004d86:	d006      	beq.n	8004d96 <SPI_EndRxTransaction+0x2e>
 8004d88:	e7ff      	b.n	8004d8a <SPI_EndRxTransaction+0x22>
 8004d8a:	9804      	ldr	r0, [sp, #16]
 8004d8c:	6880      	ldr	r0, [r0, #8]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8e:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8004d92:	d107      	bne.n	8004da4 <SPI_EndRxTransaction+0x3c>
 8004d94:	e7ff      	b.n	8004d96 <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d96:	9804      	ldr	r0, [sp, #16]
 8004d98:	6801      	ldr	r1, [r0, #0]
 8004d9a:	6808      	ldr	r0, [r1, #0]
 8004d9c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8004da0:	6008      	str	r0, [r1, #0]
  }
 8004da2:	e7ff      	b.n	8004da4 <SPI_EndRxTransaction+0x3c>

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004da4:	9804      	ldr	r0, [sp, #16]
 8004da6:	6840      	ldr	r0, [r0, #4]
 8004da8:	f5b0 7f82 	cmp.w	r0, #260	@ 0x104
 8004dac:	d11b      	bne.n	8004de6 <SPI_EndRxTransaction+0x7e>
 8004dae:	e7ff      	b.n	8004db0 <SPI_EndRxTransaction+0x48>
 8004db0:	9804      	ldr	r0, [sp, #16]
 8004db2:	6880      	ldr	r0, [r0, #8]
 8004db4:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8004db8:	d115      	bne.n	8004de6 <SPI_EndRxTransaction+0x7e>
 8004dba:	e7ff      	b.n	8004dbc <SPI_EndRxTransaction+0x54>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbc:	9804      	ldr	r0, [sp, #16]
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	9902      	ldr	r1, [sp, #8]
 8004dc2:	466a      	mov	r2, sp
 8004dc4:	6011      	str	r1, [r2, #0]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f000 f84b 	bl	8004e64 <SPI_WaitFlagStateUntilTimeout>
 8004dce:	b148      	cbz	r0, 8004de4 <SPI_EndRxTransaction+0x7c>
 8004dd0:	e7ff      	b.n	8004dd2 <SPI_EndRxTransaction+0x6a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd2:	9904      	ldr	r1, [sp, #16]
 8004dd4:	6d48      	ldr	r0, [r1, #84]	@ 0x54
 8004dd6:	f040 0020 	orr.w	r0, r0, #32
 8004dda:	6548      	str	r0, [r1, #84]	@ 0x54
 8004ddc:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
 8004dde:	f88d 0017 	strb.w	r0, [sp, #23]
 8004de2:	e019      	b.n	8004e18 <SPI_EndRxTransaction+0xb0>
    }
  }
 8004de4:	e014      	b.n	8004e10 <SPI_EndRxTransaction+0xa8>
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004de6:	9804      	ldr	r0, [sp, #16]
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	9902      	ldr	r1, [sp, #8]
 8004dec:	466a      	mov	r2, sp
 8004dee:	6011      	str	r1, [r2, #0]
 8004df0:	2180      	movs	r1, #128	@ 0x80
 8004df2:	2200      	movs	r2, #0
 8004df4:	f000 f836 	bl	8004e64 <SPI_WaitFlagStateUntilTimeout>
 8004df8:	b148      	cbz	r0, 8004e0e <SPI_EndRxTransaction+0xa6>
 8004dfa:	e7ff      	b.n	8004dfc <SPI_EndRxTransaction+0x94>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfc:	9904      	ldr	r1, [sp, #16]
 8004dfe:	6d48      	ldr	r0, [r1, #84]	@ 0x54
 8004e00:	f040 0020 	orr.w	r0, r0, #32
 8004e04:	6548      	str	r0, [r1, #84]	@ 0x54
 8004e06:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
 8004e08:	f88d 0017 	strb.w	r0, [sp, #23]
 8004e0c:	e004      	b.n	8004e18 <SPI_EndRxTransaction+0xb0>
 8004e0e:	e7ff      	b.n	8004e10 <SPI_EndRxTransaction+0xa8>
 8004e10:	2000      	movs	r0, #0
    }
  }
  return HAL_OK;
 8004e12:	f88d 0017 	strb.w	r0, [sp, #23]
 8004e16:	e7ff      	b.n	8004e18 <SPI_EndRxTransaction+0xb0>
}
 8004e18:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004e1c:	b006      	add	sp, #24
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	9004      	str	r0, [sp, #16]
 8004e26:	9103      	str	r1, [sp, #12]
 8004e28:	9202      	str	r2, [sp, #8]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2a:	9804      	ldr	r0, [sp, #16]
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	9902      	ldr	r1, [sp, #8]
 8004e30:	466a      	mov	r2, sp
 8004e32:	6011      	str	r1, [r2, #0]
 8004e34:	2180      	movs	r1, #128	@ 0x80
 8004e36:	2200      	movs	r2, #0
 8004e38:	f000 f814 	bl	8004e64 <SPI_WaitFlagStateUntilTimeout>
 8004e3c:	b148      	cbz	r0, 8004e52 <SPI_EndRxTxTransaction+0x32>
 8004e3e:	e7ff      	b.n	8004e40 <SPI_EndRxTxTransaction+0x20>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e40:	9904      	ldr	r1, [sp, #16]
 8004e42:	6d48      	ldr	r0, [r1, #84]	@ 0x54
 8004e44:	f040 0020 	orr.w	r0, r0, #32
 8004e48:	6548      	str	r0, [r1, #84]	@ 0x54
 8004e4a:	2003      	movs	r0, #3
    return HAL_TIMEOUT;
 8004e4c:	f88d 0017 	strb.w	r0, [sp, #23]
 8004e50:	e003      	b.n	8004e5a <SPI_EndRxTxTransaction+0x3a>
 8004e52:	2000      	movs	r0, #0
  }
  return HAL_OK;
 8004e54:	f88d 0017 	strb.w	r0, [sp, #23]
 8004e58:	e7ff      	b.n	8004e5a <SPI_EndRxTxTransaction+0x3a>
}
 8004e5a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004e5e:	b006      	add	sp, #24
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <SPI_WaitFlagStateUntilTimeout>:
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	@ 0x28
 8004e68:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
 8004e6c:	9008      	str	r0, [sp, #32]
 8004e6e:	9107      	str	r1, [sp, #28]
 8004e70:	f88d 201b 	strb.w	r2, [sp, #27]
 8004e74:	9305      	str	r3, [sp, #20]
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e76:	9805      	ldr	r0, [sp, #20]
 8004e78:	9001      	str	r0, [sp, #4]
 8004e7a:	f7fc fd47 	bl	800190c <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	9801      	ldr	r0, [sp, #4]
 8004e82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004e84:	1a89      	subs	r1, r1, r2
 8004e86:	4408      	add	r0, r1
 8004e88:	9003      	str	r0, [sp, #12]
  tmp_tickstart = HAL_GetTick();
 8004e8a:	f7fc fd3f 	bl	800190c <HAL_GetTick>
 8004e8e:	9002      	str	r0, [sp, #8]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e90:	9803      	ldr	r0, [sp, #12]
 8004e92:	f240 2128 	movw	r1, #552	@ 0x228
 8004e96:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004e9a:	6809      	ldr	r1, [r1, #0]
 8004e9c:	f3c1 31cb 	ubfx	r1, r1, #15, #12
 8004ea0:	4348      	muls	r0, r1
 8004ea2:	9004      	str	r0, [sp, #16]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea4:	e7ff      	b.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0x42>
 8004ea6:	9808      	ldr	r0, [sp, #32]
 8004ea8:	6800      	ldr	r0, [r0, #0]
 8004eaa:	6880      	ldr	r0, [r0, #8]
 8004eac:	9907      	ldr	r1, [sp, #28]
 8004eae:	4008      	ands	r0, r1
 8004eb0:	1a40      	subs	r0, r0, r1
 8004eb2:	fab0 f080 	clz	r0, r0
 8004eb6:	0940      	lsrs	r0, r0, #5
 8004eb8:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8004ebc:	4288      	cmp	r0, r1
 8004ebe:	d05e      	beq.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0x11a>
 8004ec0:	e7ff      	b.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	9805      	ldr	r0, [sp, #20]
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d058      	beq.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x118>
 8004eca:	e7ff      	b.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0x68>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ecc:	f7fc fd1e 	bl	800190c <HAL_GetTick>
 8004ed0:	9902      	ldr	r1, [sp, #8]
 8004ed2:	1a40      	subs	r0, r0, r1
 8004ed4:	9903      	ldr	r1, [sp, #12]
 8004ed6:	4288      	cmp	r0, r1
 8004ed8:	d204      	bcs.n	8004ee4 <SPI_WaitFlagStateUntilTimeout+0x80>
 8004eda:	e7ff      	b.n	8004edc <SPI_WaitFlagStateUntilTimeout+0x78>
 8004edc:	9803      	ldr	r0, [sp, #12]
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d142      	bne.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x104>
 8004ee2:	e7ff      	b.n	8004ee4 <SPI_WaitFlagStateUntilTimeout+0x80>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ee4:	9808      	ldr	r0, [sp, #32]
 8004ee6:	6801      	ldr	r1, [r0, #0]
 8004ee8:	6848      	ldr	r0, [r1, #4]
 8004eea:	f020 00e0 	bic.w	r0, r0, #224	@ 0xe0
 8004eee:	6048      	str	r0, [r1, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef0:	9808      	ldr	r0, [sp, #32]
 8004ef2:	6840      	ldr	r0, [r0, #4]
 8004ef4:	f5b0 7f82 	cmp.w	r0, #260	@ 0x104
 8004ef8:	d113      	bne.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004efa:	e7ff      	b.n	8004efc <SPI_WaitFlagStateUntilTimeout+0x98>
 8004efc:	9808      	ldr	r0, [sp, #32]
 8004efe:	6880      	ldr	r0, [r0, #8]
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f00:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004f04:	d006      	beq.n	8004f14 <SPI_WaitFlagStateUntilTimeout+0xb0>
 8004f06:	e7ff      	b.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0xa4>
 8004f08:	9808      	ldr	r0, [sp, #32]
 8004f0a:	6880      	ldr	r0, [r0, #8]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0c:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8004f10:	d107      	bne.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004f12:	e7ff      	b.n	8004f14 <SPI_WaitFlagStateUntilTimeout+0xb0>
          __HAL_SPI_DISABLE(hspi);
 8004f14:	9808      	ldr	r0, [sp, #32]
 8004f16:	6801      	ldr	r1, [r0, #0]
 8004f18:	6808      	ldr	r0, [r1, #0]
 8004f1a:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8004f1e:	6008      	str	r0, [r1, #0]
        }
 8004f20:	e7ff      	b.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f22:	9808      	ldr	r0, [sp, #32]
 8004f24:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004f26:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8004f2a:	d10f      	bne.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0xe8>
 8004f2c:	e7ff      	b.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0xca>
          SPI_RESET_CRC(hspi);
 8004f2e:	e7ff      	b.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0xcc>
 8004f30:	9808      	ldr	r0, [sp, #32]
 8004f32:	6801      	ldr	r1, [r0, #0]
 8004f34:	6808      	ldr	r0, [r1, #0]
 8004f36:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 8004f3a:	6008      	str	r0, [r1, #0]
 8004f3c:	9808      	ldr	r0, [sp, #32]
 8004f3e:	6801      	ldr	r1, [r0, #0]
 8004f40:	6808      	ldr	r0, [r1, #0]
 8004f42:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8004f46:	6008      	str	r0, [r1, #0]
 8004f48:	e7ff      	b.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0xe6>
        }
 8004f4a:	e7ff      	b.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8004f4c:	9908      	ldr	r1, [sp, #32]
 8004f4e:	2001      	movs	r0, #1
 8004f50:	f881 0051 	strb.w	r0, [r1, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f54:	e7ff      	b.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0xf2>
 8004f56:	9908      	ldr	r1, [sp, #32]
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f881 0050 	strb.w	r0, [r1, #80]	@ 0x50
 8004f5e:	e7ff      	b.n	8004f60 <SPI_WaitFlagStateUntilTimeout+0xfc>
 8004f60:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
 8004f62:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
 8004f66:	e00e      	b.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0x122>
      if (count == 0U)
 8004f68:	9804      	ldr	r0, [sp, #16]
 8004f6a:	b918      	cbnz	r0, 8004f74 <SPI_WaitFlagStateUntilTimeout+0x110>
 8004f6c:	e7ff      	b.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0x10a>
 8004f6e:	2000      	movs	r0, #0
        tmp_timeout = 0U;
 8004f70:	9003      	str	r0, [sp, #12]
      }
 8004f72:	e7ff      	b.n	8004f74 <SPI_WaitFlagStateUntilTimeout+0x110>
      count--;
 8004f74:	9804      	ldr	r0, [sp, #16]
 8004f76:	3801      	subs	r0, #1
 8004f78:	9004      	str	r0, [sp, #16]
    }
 8004f7a:	e7ff      	b.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x118>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f7c:	e793      	b.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0x42>
 8004f7e:	2000      	movs	r0, #0
  return HAL_OK;
 8004f80:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
 8004f84:	e7ff      	b.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0x122>
}
 8004f86:	f89d 0027 	ldrb.w	r0, [sp, #39]	@ 0x27
 8004f8a:	b00a      	add	sp, #40	@ 0x28
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <SVC_Handler>:
}
 8004f90:	4770      	bx	lr
	...

08004f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	9000      	str	r0, [sp, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f9a:	9800      	ldr	r0, [sp, #0]
 8004f9c:	3801      	subs	r0, #1
 8004f9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004fa2:	d303      	bcc.n	8004fac <SysTick_Config+0x18>
 8004fa4:	e7ff      	b.n	8004fa6 <SysTick_Config+0x12>
 8004fa6:	2001      	movs	r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fa8:	9001      	str	r0, [sp, #4]
 8004faa:	e019      	b.n	8004fe0 <SysTick_Config+0x4c>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fac:	9800      	ldr	r0, [sp, #0]
 8004fae:	3801      	subs	r0, #1
 8004fb0:	f24e 0114 	movw	r1, #57364	@ 0xe014
 8004fb4:	f2ce 0100 	movt	r1, #57344	@ 0xe000
 8004fb8:	6008      	str	r0, [r1, #0]
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbe:	210f      	movs	r1, #15
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fc0:	f000 fb54 	bl	800566c <__NVIC_SetPriority>
 8004fc4:	f24e 0118 	movw	r1, #57368	@ 0xe018
 8004fc8:	f2ce 0100 	movt	r1, #57344	@ 0xe000
 8004fcc:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fce:	6008      	str	r0, [r1, #0]
 8004fd0:	f24e 0210 	movw	r2, #57360	@ 0xe010
 8004fd4:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8004fd8:	2107      	movs	r1, #7
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fda:	6011      	str	r1, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fdc:	9001      	str	r0, [sp, #4]
 8004fde:	e7ff      	b.n	8004fe0 <SysTick_Config+0x4c>
}
 8004fe0:	9801      	ldr	r0, [sp, #4]
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fe8:	b580      	push	{r7, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fea:	f7fc ff2f 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <SystemClock_Config>:
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b090      	sub	sp, #64	@ 0x40
 8004ff4:	a806      	add	r0, sp, #24
 8004ff6:	9000      	str	r0, [sp, #0]
 8004ff8:	2128      	movs	r1, #40	@ 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ffa:	f7fb f9ee 	bl	80003da <__aeabi_memclr4>
 8004ffe:	9800      	ldr	r0, [sp, #0]
 8005000:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005002:	9305      	str	r3, [sp, #20]
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	9303      	str	r3, [sp, #12]
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800500e:	9206      	str	r2, [sp, #24]
 8005010:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005014:	9107      	str	r1, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005016:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005018:	920a      	str	r2, [sp, #40]	@ 0x28
 800501a:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800501c:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800501e:	910e      	str	r1, [sp, #56]	@ 0x38
 8005020:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005024:	910f      	str	r1, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005026:	f7fd f96b 	bl	8002300 <HAL_RCC_OscConfig>
 800502a:	b118      	cbz	r0, 8005034 <SystemClock_Config+0x44>
 800502c:	e7ff      	b.n	800502e <SystemClock_Config+0x3e>
    Error_Handler();
 800502e:	f7fc fa9b 	bl	8001568 <Error_Handler>
  }
 8005032:	e7ff      	b.n	8005034 <SystemClock_Config+0x44>
 8005034:	200f      	movs	r0, #15
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005036:	9001      	str	r0, [sp, #4]
 8005038:	2102      	movs	r1, #2
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800503a:	9102      	str	r1, [sp, #8]
 800503c:	2000      	movs	r0, #0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800503e:	9003      	str	r0, [sp, #12]
 8005040:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005044:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005046:	9005      	str	r0, [sp, #20]
 8005048:	a801      	add	r0, sp, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800504a:	f7fc ffb7 	bl	8001fbc <HAL_RCC_ClockConfig>
 800504e:	b118      	cbz	r0, 8005058 <SystemClock_Config+0x68>
 8005050:	e7ff      	b.n	8005052 <SystemClock_Config+0x62>
    Error_Handler();
 8005052:	f7fc fa89 	bl	8001568 <Error_Handler>
  }
 8005056:	e7ff      	b.n	8005058 <SystemClock_Config+0x68>
}
 8005058:	b010      	add	sp, #64	@ 0x40
 800505a:	bd80      	pop	{r7, pc}

0800505c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800505c:	4770      	bx	lr
	...

08005060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005062:	f240 60b4 	movw	r0, #1716	@ 0x6b4
 8005066:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800506a:	f7fe fbd1 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800506e:	bd80      	pop	{r7, pc}

08005070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005070:	b083      	sub	sp, #12
 8005072:	9002      	str	r0, [sp, #8]
 8005074:	9101      	str	r1, [sp, #4]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005076:	9802      	ldr	r0, [sp, #8]
 8005078:	6800      	ldr	r0, [r0, #0]
 800507a:	9000      	str	r0, [sp, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800507c:	9802      	ldr	r0, [sp, #8]
 800507e:	f642 4100 	movw	r1, #11264	@ 0x2c00
 8005082:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8005086:	4288      	cmp	r0, r1
 8005088:	d015      	beq.n	80050b6 <TIM_Base_SetConfig+0x46>
 800508a:	e7ff      	b.n	800508c <TIM_Base_SetConfig+0x1c>
 800508c:	9802      	ldr	r0, [sp, #8]
 800508e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005092:	d010      	beq.n	80050b6 <TIM_Base_SetConfig+0x46>
 8005094:	e7ff      	b.n	8005096 <TIM_Base_SetConfig+0x26>
 8005096:	9802      	ldr	r0, [sp, #8]
 8005098:	f240 4100 	movw	r1, #1024	@ 0x400
 800509c:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 80050a0:	4288      	cmp	r0, r1
 80050a2:	d008      	beq.n	80050b6 <TIM_Base_SetConfig+0x46>
 80050a4:	e7ff      	b.n	80050a6 <TIM_Base_SetConfig+0x36>
 80050a6:	9802      	ldr	r0, [sp, #8]
 80050a8:	f640 0100 	movw	r1, #2048	@ 0x800
 80050ac:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 80050b0:	4288      	cmp	r0, r1
 80050b2:	d10a      	bne.n	80050ca <TIM_Base_SetConfig+0x5a>
 80050b4:	e7ff      	b.n	80050b6 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b6:	9800      	ldr	r0, [sp, #0]
 80050b8:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 80050bc:	9000      	str	r0, [sp, #0]
    tmpcr1 |= Structure->CounterMode;
 80050be:	9801      	ldr	r0, [sp, #4]
 80050c0:	6841      	ldr	r1, [r0, #4]
 80050c2:	9800      	ldr	r0, [sp, #0]
 80050c4:	4308      	orrs	r0, r1
 80050c6:	9000      	str	r0, [sp, #0]
  }
 80050c8:	e7ff      	b.n	80050ca <TIM_Base_SetConfig+0x5a>

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	9802      	ldr	r0, [sp, #8]
 80050cc:	f642 4100 	movw	r1, #11264	@ 0x2c00
 80050d0:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 80050d4:	4288      	cmp	r0, r1
 80050d6:	d015      	beq.n	8005104 <TIM_Base_SetConfig+0x94>
 80050d8:	e7ff      	b.n	80050da <TIM_Base_SetConfig+0x6a>
 80050da:	9802      	ldr	r0, [sp, #8]
 80050dc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80050e0:	d010      	beq.n	8005104 <TIM_Base_SetConfig+0x94>
 80050e2:	e7ff      	b.n	80050e4 <TIM_Base_SetConfig+0x74>
 80050e4:	9802      	ldr	r0, [sp, #8]
 80050e6:	f240 4100 	movw	r1, #1024	@ 0x400
 80050ea:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 80050ee:	4288      	cmp	r0, r1
 80050f0:	d008      	beq.n	8005104 <TIM_Base_SetConfig+0x94>
 80050f2:	e7ff      	b.n	80050f4 <TIM_Base_SetConfig+0x84>
 80050f4:	9802      	ldr	r0, [sp, #8]
 80050f6:	f640 0100 	movw	r1, #2048	@ 0x800
 80050fa:	f2c4 0100 	movt	r1, #16384	@ 0x4000
 80050fe:	4288      	cmp	r0, r1
 8005100:	d10a      	bne.n	8005118 <TIM_Base_SetConfig+0xa8>
 8005102:	e7ff      	b.n	8005104 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005104:	9800      	ldr	r0, [sp, #0]
 8005106:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800510a:	9000      	str	r0, [sp, #0]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800510c:	9801      	ldr	r0, [sp, #4]
 800510e:	68c1      	ldr	r1, [r0, #12]
 8005110:	9800      	ldr	r0, [sp, #0]
 8005112:	4308      	orrs	r0, r1
 8005114:	9000      	str	r0, [sp, #0]
  }
 8005116:	e7ff      	b.n	8005118 <TIM_Base_SetConfig+0xa8>

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005118:	9800      	ldr	r0, [sp, #0]
 800511a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 800511e:	9901      	ldr	r1, [sp, #4]
 8005120:	6949      	ldr	r1, [r1, #20]
 8005122:	4308      	orrs	r0, r1
 8005124:	9000      	str	r0, [sp, #0]

  TIMx->CR1 = tmpcr1;
 8005126:	9800      	ldr	r0, [sp, #0]
 8005128:	9902      	ldr	r1, [sp, #8]
 800512a:	6008      	str	r0, [r1, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800512c:	9801      	ldr	r0, [sp, #4]
 800512e:	6880      	ldr	r0, [r0, #8]
 8005130:	9902      	ldr	r1, [sp, #8]
 8005132:	62c8      	str	r0, [r1, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005134:	9801      	ldr	r0, [sp, #4]
 8005136:	6800      	ldr	r0, [r0, #0]
 8005138:	9902      	ldr	r1, [sp, #8]
 800513a:	6288      	str	r0, [r1, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800513c:	9802      	ldr	r0, [sp, #8]
 800513e:	f642 4100 	movw	r1, #11264	@ 0x2c00
 8005142:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8005146:	4288      	cmp	r0, r1
 8005148:	d105      	bne.n	8005156 <TIM_Base_SetConfig+0xe6>
 800514a:	e7ff      	b.n	800514c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800514c:	9801      	ldr	r0, [sp, #4]
 800514e:	6900      	ldr	r0, [r0, #16]
 8005150:	9902      	ldr	r1, [sp, #8]
 8005152:	6308      	str	r0, [r1, #48]	@ 0x30
  }
 8005154:	e7ff      	b.n	8005156 <TIM_Base_SetConfig+0xe6>

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005156:	9902      	ldr	r1, [sp, #8]
 8005158:	2001      	movs	r0, #1
 800515a:	6148      	str	r0, [r1, #20]
}
 800515c:	b003      	add	sp, #12
 800515e:	4770      	bx	lr

08005160 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005160:	b084      	sub	sp, #16
 8005162:	9003      	str	r0, [sp, #12]
 8005164:	9102      	str	r1, [sp, #8]
 8005166:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005168:	9802      	ldr	r0, [sp, #8]
 800516a:	f000 011f 	and.w	r1, r0, #31
 800516e:	2001      	movs	r0, #1
 8005170:	4088      	lsls	r0, r1
 8005172:	9000      	str	r0, [sp, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005174:	9a00      	ldr	r2, [sp, #0]
 8005176:	9903      	ldr	r1, [sp, #12]
 8005178:	6a08      	ldr	r0, [r1, #32]
 800517a:	4390      	bics	r0, r2
 800517c:	6208      	str	r0, [r1, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800517e:	9801      	ldr	r0, [sp, #4]
 8005180:	9902      	ldr	r1, [sp, #8]
 8005182:	f001 011f 	and.w	r1, r1, #31
 8005186:	fa00 f201 	lsl.w	r2, r0, r1
 800518a:	9903      	ldr	r1, [sp, #12]
 800518c:	6a08      	ldr	r0, [r1, #32]
 800518e:	4310      	orrs	r0, r2
 8005190:	6208      	str	r0, [r1, #32]
}
 8005192:	b004      	add	sp, #16
 8005194:	4770      	bx	lr
	...

08005198 <TIM_ETR_SetConfig>:
{
 8005198:	b085      	sub	sp, #20
 800519a:	9004      	str	r0, [sp, #16]
 800519c:	9103      	str	r1, [sp, #12]
 800519e:	9202      	str	r2, [sp, #8]
 80051a0:	9301      	str	r3, [sp, #4]
  tmpsmcr = TIMx->SMCR;
 80051a2:	9804      	ldr	r0, [sp, #16]
 80051a4:	6880      	ldr	r0, [r0, #8]
 80051a6:	9000      	str	r0, [sp, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a8:	9800      	ldr	r0, [sp, #0]
 80051aa:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 80051ae:	9000      	str	r0, [sp, #0]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051b0:	9803      	ldr	r0, [sp, #12]
 80051b2:	9902      	ldr	r1, [sp, #8]
 80051b4:	9a01      	ldr	r2, [sp, #4]
 80051b6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80051ba:	4301      	orrs	r1, r0
 80051bc:	9800      	ldr	r0, [sp, #0]
 80051be:	4308      	orrs	r0, r1
 80051c0:	9000      	str	r0, [sp, #0]
  TIMx->SMCR = tmpsmcr;
 80051c2:	9800      	ldr	r0, [sp, #0]
 80051c4:	9904      	ldr	r1, [sp, #16]
 80051c6:	6088      	str	r0, [r1, #8]
}
 80051c8:	b005      	add	sp, #20
 80051ca:	4770      	bx	lr

080051cc <TIM_ITRx_SetConfig>:
{
 80051cc:	b083      	sub	sp, #12
 80051ce:	9002      	str	r0, [sp, #8]
 80051d0:	9101      	str	r1, [sp, #4]
  tmpsmcr = TIMx->SMCR;
 80051d2:	9802      	ldr	r0, [sp, #8]
 80051d4:	6880      	ldr	r0, [r0, #8]
 80051d6:	9000      	str	r0, [sp, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d8:	9800      	ldr	r0, [sp, #0]
 80051da:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 80051de:	9000      	str	r0, [sp, #0]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051e0:	9801      	ldr	r0, [sp, #4]
 80051e2:	9900      	ldr	r1, [sp, #0]
 80051e4:	4308      	orrs	r0, r1
 80051e6:	f040 0007 	orr.w	r0, r0, #7
 80051ea:	9000      	str	r0, [sp, #0]
  TIMx->SMCR = tmpsmcr;
 80051ec:	9800      	ldr	r0, [sp, #0]
 80051ee:	9902      	ldr	r1, [sp, #8]
 80051f0:	6088      	str	r0, [r1, #8]
}
 80051f2:	b003      	add	sp, #12
 80051f4:	4770      	bx	lr
	...

080051f8 <TIM_OC1_SetConfig>:
{
 80051f8:	b085      	sub	sp, #20
 80051fa:	9004      	str	r0, [sp, #16]
 80051fc:	9103      	str	r1, [sp, #12]
  tmpccer = TIMx->CCER;
 80051fe:	9804      	ldr	r0, [sp, #16]
 8005200:	6a00      	ldr	r0, [r0, #32]
 8005202:	9001      	str	r0, [sp, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005204:	9904      	ldr	r1, [sp, #16]
 8005206:	6a08      	ldr	r0, [r1, #32]
 8005208:	f020 0001 	bic.w	r0, r0, #1
 800520c:	6208      	str	r0, [r1, #32]
  tmpcr2 =  TIMx->CR2;
 800520e:	9804      	ldr	r0, [sp, #16]
 8005210:	6840      	ldr	r0, [r0, #4]
 8005212:	9000      	str	r0, [sp, #0]
  tmpccmrx = TIMx->CCMR1;
 8005214:	9804      	ldr	r0, [sp, #16]
 8005216:	6980      	ldr	r0, [r0, #24]
 8005218:	9002      	str	r0, [sp, #8]
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800521a:	9802      	ldr	r0, [sp, #8]
 800521c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 8005220:	9002      	str	r0, [sp, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005222:	9802      	ldr	r0, [sp, #8]
 8005224:	f020 0003 	bic.w	r0, r0, #3
 8005228:	9002      	str	r0, [sp, #8]
  tmpccmrx |= OC_Config->OCMode;
 800522a:	9803      	ldr	r0, [sp, #12]
 800522c:	6801      	ldr	r1, [r0, #0]
 800522e:	9802      	ldr	r0, [sp, #8]
 8005230:	4308      	orrs	r0, r1
 8005232:	9002      	str	r0, [sp, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005234:	9801      	ldr	r0, [sp, #4]
 8005236:	f020 0002 	bic.w	r0, r0, #2
 800523a:	9001      	str	r0, [sp, #4]
  tmpccer |= OC_Config->OCPolarity;
 800523c:	9803      	ldr	r0, [sp, #12]
 800523e:	6881      	ldr	r1, [r0, #8]
 8005240:	9801      	ldr	r0, [sp, #4]
 8005242:	4308      	orrs	r0, r1
 8005244:	9001      	str	r0, [sp, #4]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005246:	9804      	ldr	r0, [sp, #16]
 8005248:	f642 4100 	movw	r1, #11264	@ 0x2c00
 800524c:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8005250:	4288      	cmp	r0, r1
 8005252:	d10e      	bne.n	8005272 <TIM_OC1_SetConfig+0x7a>
 8005254:	e7ff      	b.n	8005256 <TIM_OC1_SetConfig+0x5e>
    tmpccer &= ~TIM_CCER_CC1NP;
 8005256:	9801      	ldr	r0, [sp, #4]
 8005258:	f020 0008 	bic.w	r0, r0, #8
 800525c:	9001      	str	r0, [sp, #4]
    tmpccer |= OC_Config->OCNPolarity;
 800525e:	9803      	ldr	r0, [sp, #12]
 8005260:	68c1      	ldr	r1, [r0, #12]
 8005262:	9801      	ldr	r0, [sp, #4]
 8005264:	4308      	orrs	r0, r1
 8005266:	9001      	str	r0, [sp, #4]
    tmpccer &= ~TIM_CCER_CC1NE;
 8005268:	9801      	ldr	r0, [sp, #4]
 800526a:	f020 0004 	bic.w	r0, r0, #4
 800526e:	9001      	str	r0, [sp, #4]
  }
 8005270:	e7ff      	b.n	8005272 <TIM_OC1_SetConfig+0x7a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	9804      	ldr	r0, [sp, #16]
 8005274:	f642 4100 	movw	r1, #11264	@ 0x2c00
 8005278:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 800527c:	4288      	cmp	r0, r1
 800527e:	d113      	bne.n	80052a8 <TIM_OC1_SetConfig+0xb0>
 8005280:	e7ff      	b.n	8005282 <TIM_OC1_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005282:	9800      	ldr	r0, [sp, #0]
 8005284:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8005288:	9000      	str	r0, [sp, #0]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800528a:	9800      	ldr	r0, [sp, #0]
 800528c:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
 8005290:	9000      	str	r0, [sp, #0]
    tmpcr2 |= OC_Config->OCIdleState;
 8005292:	9803      	ldr	r0, [sp, #12]
 8005294:	6941      	ldr	r1, [r0, #20]
 8005296:	9800      	ldr	r0, [sp, #0]
 8005298:	4308      	orrs	r0, r1
 800529a:	9000      	str	r0, [sp, #0]
    tmpcr2 |= OC_Config->OCNIdleState;
 800529c:	9803      	ldr	r0, [sp, #12]
 800529e:	6981      	ldr	r1, [r0, #24]
 80052a0:	9800      	ldr	r0, [sp, #0]
 80052a2:	4308      	orrs	r0, r1
 80052a4:	9000      	str	r0, [sp, #0]
  }
 80052a6:	e7ff      	b.n	80052a8 <TIM_OC1_SetConfig+0xb0>
  TIMx->CR2 = tmpcr2;
 80052a8:	9800      	ldr	r0, [sp, #0]
 80052aa:	9904      	ldr	r1, [sp, #16]
 80052ac:	6048      	str	r0, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80052ae:	9802      	ldr	r0, [sp, #8]
 80052b0:	9904      	ldr	r1, [sp, #16]
 80052b2:	6188      	str	r0, [r1, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80052b4:	9803      	ldr	r0, [sp, #12]
 80052b6:	6840      	ldr	r0, [r0, #4]
 80052b8:	9904      	ldr	r1, [sp, #16]
 80052ba:	6348      	str	r0, [r1, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80052bc:	9801      	ldr	r0, [sp, #4]
 80052be:	9904      	ldr	r1, [sp, #16]
 80052c0:	6208      	str	r0, [r1, #32]
}
 80052c2:	b005      	add	sp, #20
 80052c4:	4770      	bx	lr
	...

080052c8 <TIM_OC2_SetConfig>:
{
 80052c8:	b085      	sub	sp, #20
 80052ca:	9004      	str	r0, [sp, #16]
 80052cc:	9103      	str	r1, [sp, #12]
  tmpccer = TIMx->CCER;
 80052ce:	9804      	ldr	r0, [sp, #16]
 80052d0:	6a00      	ldr	r0, [r0, #32]
 80052d2:	9001      	str	r0, [sp, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d4:	9904      	ldr	r1, [sp, #16]
 80052d6:	6a08      	ldr	r0, [r1, #32]
 80052d8:	f020 0010 	bic.w	r0, r0, #16
 80052dc:	6208      	str	r0, [r1, #32]
  tmpcr2 =  TIMx->CR2;
 80052de:	9804      	ldr	r0, [sp, #16]
 80052e0:	6840      	ldr	r0, [r0, #4]
 80052e2:	9000      	str	r0, [sp, #0]
  tmpccmrx = TIMx->CCMR1;
 80052e4:	9804      	ldr	r0, [sp, #16]
 80052e6:	6980      	ldr	r0, [r0, #24]
 80052e8:	9002      	str	r0, [sp, #8]
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052ea:	9802      	ldr	r0, [sp, #8]
 80052ec:	f420 40e0 	bic.w	r0, r0, #28672	@ 0x7000
 80052f0:	9002      	str	r0, [sp, #8]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052f2:	9802      	ldr	r0, [sp, #8]
 80052f4:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 80052f8:	9002      	str	r0, [sp, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052fa:	9803      	ldr	r0, [sp, #12]
 80052fc:	6801      	ldr	r1, [r0, #0]
 80052fe:	9802      	ldr	r0, [sp, #8]
 8005300:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8005304:	9002      	str	r0, [sp, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005306:	9801      	ldr	r0, [sp, #4]
 8005308:	f020 0020 	bic.w	r0, r0, #32
 800530c:	9001      	str	r0, [sp, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800530e:	9803      	ldr	r0, [sp, #12]
 8005310:	6881      	ldr	r1, [r0, #8]
 8005312:	9801      	ldr	r0, [sp, #4]
 8005314:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8005318:	9001      	str	r0, [sp, #4]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800531a:	9804      	ldr	r0, [sp, #16]
 800531c:	f642 4100 	movw	r1, #11264	@ 0x2c00
 8005320:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8005324:	4288      	cmp	r0, r1
 8005326:	d10f      	bne.n	8005348 <TIM_OC2_SetConfig+0x80>
 8005328:	e7ff      	b.n	800532a <TIM_OC2_SetConfig+0x62>
    tmpccer &= ~TIM_CCER_CC2NP;
 800532a:	9801      	ldr	r0, [sp, #4]
 800532c:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8005330:	9001      	str	r0, [sp, #4]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005332:	9803      	ldr	r0, [sp, #12]
 8005334:	68c1      	ldr	r1, [r0, #12]
 8005336:	9801      	ldr	r0, [sp, #4]
 8005338:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800533c:	9001      	str	r0, [sp, #4]
    tmpccer &= ~TIM_CCER_CC2NE;
 800533e:	9801      	ldr	r0, [sp, #4]
 8005340:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8005344:	9001      	str	r0, [sp, #4]
  }
 8005346:	e7ff      	b.n	8005348 <TIM_OC2_SetConfig+0x80>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005348:	9804      	ldr	r0, [sp, #16]
 800534a:	f642 4100 	movw	r1, #11264	@ 0x2c00
 800534e:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8005352:	4288      	cmp	r0, r1
 8005354:	d115      	bne.n	8005382 <TIM_OC2_SetConfig+0xba>
 8005356:	e7ff      	b.n	8005358 <TIM_OC2_SetConfig+0x90>
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005358:	9800      	ldr	r0, [sp, #0]
 800535a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 800535e:	9000      	str	r0, [sp, #0]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005360:	9800      	ldr	r0, [sp, #0]
 8005362:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 8005366:	9000      	str	r0, [sp, #0]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005368:	9803      	ldr	r0, [sp, #12]
 800536a:	6941      	ldr	r1, [r0, #20]
 800536c:	9800      	ldr	r0, [sp, #0]
 800536e:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 8005372:	9000      	str	r0, [sp, #0]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005374:	9803      	ldr	r0, [sp, #12]
 8005376:	6981      	ldr	r1, [r0, #24]
 8005378:	9800      	ldr	r0, [sp, #0]
 800537a:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 800537e:	9000      	str	r0, [sp, #0]
  }
 8005380:	e7ff      	b.n	8005382 <TIM_OC2_SetConfig+0xba>
  TIMx->CR2 = tmpcr2;
 8005382:	9800      	ldr	r0, [sp, #0]
 8005384:	9904      	ldr	r1, [sp, #16]
 8005386:	6048      	str	r0, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005388:	9802      	ldr	r0, [sp, #8]
 800538a:	9904      	ldr	r1, [sp, #16]
 800538c:	6188      	str	r0, [r1, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800538e:	9803      	ldr	r0, [sp, #12]
 8005390:	6840      	ldr	r0, [r0, #4]
 8005392:	9904      	ldr	r1, [sp, #16]
 8005394:	6388      	str	r0, [r1, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005396:	9801      	ldr	r0, [sp, #4]
 8005398:	9904      	ldr	r1, [sp, #16]
 800539a:	6208      	str	r0, [r1, #32]
}
 800539c:	b005      	add	sp, #20
 800539e:	4770      	bx	lr

080053a0 <TIM_OC3_SetConfig>:
{
 80053a0:	b085      	sub	sp, #20
 80053a2:	9004      	str	r0, [sp, #16]
 80053a4:	9103      	str	r1, [sp, #12]
  tmpccer = TIMx->CCER;
 80053a6:	9804      	ldr	r0, [sp, #16]
 80053a8:	6a00      	ldr	r0, [r0, #32]
 80053aa:	9001      	str	r0, [sp, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ac:	9904      	ldr	r1, [sp, #16]
 80053ae:	6a08      	ldr	r0, [r1, #32]
 80053b0:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 80053b4:	6208      	str	r0, [r1, #32]
  tmpcr2 =  TIMx->CR2;
 80053b6:	9804      	ldr	r0, [sp, #16]
 80053b8:	6840      	ldr	r0, [r0, #4]
 80053ba:	9000      	str	r0, [sp, #0]
  tmpccmrx = TIMx->CCMR2;
 80053bc:	9804      	ldr	r0, [sp, #16]
 80053be:	69c0      	ldr	r0, [r0, #28]
 80053c0:	9002      	str	r0, [sp, #8]
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c2:	9802      	ldr	r0, [sp, #8]
 80053c4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 80053c8:	9002      	str	r0, [sp, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053ca:	9802      	ldr	r0, [sp, #8]
 80053cc:	f020 0003 	bic.w	r0, r0, #3
 80053d0:	9002      	str	r0, [sp, #8]
  tmpccmrx |= OC_Config->OCMode;
 80053d2:	9803      	ldr	r0, [sp, #12]
 80053d4:	6801      	ldr	r1, [r0, #0]
 80053d6:	9802      	ldr	r0, [sp, #8]
 80053d8:	4308      	orrs	r0, r1
 80053da:	9002      	str	r0, [sp, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80053dc:	9801      	ldr	r0, [sp, #4]
 80053de:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
 80053e2:	9001      	str	r0, [sp, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053e4:	9803      	ldr	r0, [sp, #12]
 80053e6:	6881      	ldr	r1, [r0, #8]
 80053e8:	9801      	ldr	r0, [sp, #4]
 80053ea:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80053ee:	9001      	str	r0, [sp, #4]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053f0:	9804      	ldr	r0, [sp, #16]
 80053f2:	f642 4100 	movw	r1, #11264	@ 0x2c00
 80053f6:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 80053fa:	4288      	cmp	r0, r1
 80053fc:	d10f      	bne.n	800541e <TIM_OC3_SetConfig+0x7e>
 80053fe:	e7ff      	b.n	8005400 <TIM_OC3_SetConfig+0x60>
    tmpccer &= ~TIM_CCER_CC3NP;
 8005400:	9801      	ldr	r0, [sp, #4]
 8005402:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 8005406:	9001      	str	r0, [sp, #4]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005408:	9803      	ldr	r0, [sp, #12]
 800540a:	68c1      	ldr	r1, [r0, #12]
 800540c:	9801      	ldr	r0, [sp, #4]
 800540e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8005412:	9001      	str	r0, [sp, #4]
    tmpccer &= ~TIM_CCER_CC3NE;
 8005414:	9801      	ldr	r0, [sp, #4]
 8005416:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 800541a:	9001      	str	r0, [sp, #4]
  }
 800541c:	e7ff      	b.n	800541e <TIM_OC3_SetConfig+0x7e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541e:	9804      	ldr	r0, [sp, #16]
 8005420:	f642 4100 	movw	r1, #11264	@ 0x2c00
 8005424:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 8005428:	4288      	cmp	r0, r1
 800542a:	d115      	bne.n	8005458 <TIM_OC3_SetConfig+0xb8>
 800542c:	e7ff      	b.n	800542e <TIM_OC3_SetConfig+0x8e>
    tmpcr2 &= ~TIM_CR2_OIS3;
 800542e:	9800      	ldr	r0, [sp, #0]
 8005430:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8005434:	9000      	str	r0, [sp, #0]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005436:	9800      	ldr	r0, [sp, #0]
 8005438:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 800543c:	9000      	str	r0, [sp, #0]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800543e:	9803      	ldr	r0, [sp, #12]
 8005440:	6941      	ldr	r1, [r0, #20]
 8005442:	9800      	ldr	r0, [sp, #0]
 8005444:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8005448:	9000      	str	r0, [sp, #0]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800544a:	9803      	ldr	r0, [sp, #12]
 800544c:	6981      	ldr	r1, [r0, #24]
 800544e:	9800      	ldr	r0, [sp, #0]
 8005450:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8005454:	9000      	str	r0, [sp, #0]
  }
 8005456:	e7ff      	b.n	8005458 <TIM_OC3_SetConfig+0xb8>
  TIMx->CR2 = tmpcr2;
 8005458:	9800      	ldr	r0, [sp, #0]
 800545a:	9904      	ldr	r1, [sp, #16]
 800545c:	6048      	str	r0, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800545e:	9802      	ldr	r0, [sp, #8]
 8005460:	9904      	ldr	r1, [sp, #16]
 8005462:	61c8      	str	r0, [r1, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005464:	9803      	ldr	r0, [sp, #12]
 8005466:	6840      	ldr	r0, [r0, #4]
 8005468:	9904      	ldr	r1, [sp, #16]
 800546a:	63c8      	str	r0, [r1, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800546c:	9801      	ldr	r0, [sp, #4]
 800546e:	9904      	ldr	r1, [sp, #16]
 8005470:	6208      	str	r0, [r1, #32]
}
 8005472:	b005      	add	sp, #20
 8005474:	4770      	bx	lr
	...

08005478 <TIM_OC4_SetConfig>:
{
 8005478:	b085      	sub	sp, #20
 800547a:	9004      	str	r0, [sp, #16]
 800547c:	9103      	str	r1, [sp, #12]
  tmpccer = TIMx->CCER;
 800547e:	9804      	ldr	r0, [sp, #16]
 8005480:	6a00      	ldr	r0, [r0, #32]
 8005482:	9001      	str	r0, [sp, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005484:	9904      	ldr	r1, [sp, #16]
 8005486:	6a08      	ldr	r0, [r1, #32]
 8005488:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800548c:	6208      	str	r0, [r1, #32]
  tmpcr2 =  TIMx->CR2;
 800548e:	9804      	ldr	r0, [sp, #16]
 8005490:	6840      	ldr	r0, [r0, #4]
 8005492:	9000      	str	r0, [sp, #0]
  tmpccmrx = TIMx->CCMR2;
 8005494:	9804      	ldr	r0, [sp, #16]
 8005496:	69c0      	ldr	r0, [r0, #28]
 8005498:	9002      	str	r0, [sp, #8]
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800549a:	9802      	ldr	r0, [sp, #8]
 800549c:	f420 40e0 	bic.w	r0, r0, #28672	@ 0x7000
 80054a0:	9002      	str	r0, [sp, #8]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054a2:	9802      	ldr	r0, [sp, #8]
 80054a4:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 80054a8:	9002      	str	r0, [sp, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054aa:	9803      	ldr	r0, [sp, #12]
 80054ac:	6801      	ldr	r1, [r0, #0]
 80054ae:	9802      	ldr	r0, [sp, #8]
 80054b0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80054b4:	9002      	str	r0, [sp, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80054b6:	9801      	ldr	r0, [sp, #4]
 80054b8:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 80054bc:	9001      	str	r0, [sp, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054be:	9803      	ldr	r0, [sp, #12]
 80054c0:	6881      	ldr	r1, [r0, #8]
 80054c2:	9801      	ldr	r0, [sp, #4]
 80054c4:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 80054c8:	9001      	str	r0, [sp, #4]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ca:	9804      	ldr	r0, [sp, #16]
 80054cc:	f642 4100 	movw	r1, #11264	@ 0x2c00
 80054d0:	f2c4 0101 	movt	r1, #16385	@ 0x4001
 80054d4:	4288      	cmp	r0, r1
 80054d6:	d10b      	bne.n	80054f0 <TIM_OC4_SetConfig+0x78>
 80054d8:	e7ff      	b.n	80054da <TIM_OC4_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054da:	9800      	ldr	r0, [sp, #0]
 80054dc:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 80054e0:	9000      	str	r0, [sp, #0]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054e2:	9803      	ldr	r0, [sp, #12]
 80054e4:	6941      	ldr	r1, [r0, #20]
 80054e6:	9800      	ldr	r0, [sp, #0]
 80054e8:	ea40 1081 	orr.w	r0, r0, r1, lsl #6
 80054ec:	9000      	str	r0, [sp, #0]
  }
 80054ee:	e7ff      	b.n	80054f0 <TIM_OC4_SetConfig+0x78>
  TIMx->CR2 = tmpcr2;
 80054f0:	9800      	ldr	r0, [sp, #0]
 80054f2:	9904      	ldr	r1, [sp, #16]
 80054f4:	6048      	str	r0, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80054f6:	9802      	ldr	r0, [sp, #8]
 80054f8:	9904      	ldr	r1, [sp, #16]
 80054fa:	61c8      	str	r0, [r1, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80054fc:	9803      	ldr	r0, [sp, #12]
 80054fe:	6840      	ldr	r0, [r0, #4]
 8005500:	9904      	ldr	r1, [sp, #16]
 8005502:	6408      	str	r0, [r1, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8005504:	9801      	ldr	r0, [sp, #4]
 8005506:	9904      	ldr	r1, [sp, #16]
 8005508:	6208      	str	r0, [r1, #32]
}
 800550a:	b005      	add	sp, #20
 800550c:	4770      	bx	lr
	...

08005510 <TIM_TI1_ConfigInputStage>:
{
 8005510:	b085      	sub	sp, #20
 8005512:	9004      	str	r0, [sp, #16]
 8005514:	9103      	str	r1, [sp, #12]
 8005516:	9202      	str	r2, [sp, #8]
  tmpccer = TIMx->CCER;
 8005518:	9804      	ldr	r0, [sp, #16]
 800551a:	6a00      	ldr	r0, [r0, #32]
 800551c:	9000      	str	r0, [sp, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551e:	9904      	ldr	r1, [sp, #16]
 8005520:	6a08      	ldr	r0, [r1, #32]
 8005522:	f020 0001 	bic.w	r0, r0, #1
 8005526:	6208      	str	r0, [r1, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005528:	9804      	ldr	r0, [sp, #16]
 800552a:	6980      	ldr	r0, [r0, #24]
 800552c:	9001      	str	r0, [sp, #4]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800552e:	9801      	ldr	r0, [sp, #4]
 8005530:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
 8005534:	9001      	str	r0, [sp, #4]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005536:	9902      	ldr	r1, [sp, #8]
 8005538:	9801      	ldr	r0, [sp, #4]
 800553a:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800553e:	9001      	str	r0, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005540:	9800      	ldr	r0, [sp, #0]
 8005542:	f020 000a 	bic.w	r0, r0, #10
 8005546:	9000      	str	r0, [sp, #0]
  tmpccer |= TIM_ICPolarity;
 8005548:	9903      	ldr	r1, [sp, #12]
 800554a:	9800      	ldr	r0, [sp, #0]
 800554c:	4308      	orrs	r0, r1
 800554e:	9000      	str	r0, [sp, #0]
  TIMx->CCMR1 = tmpccmr1;
 8005550:	9801      	ldr	r0, [sp, #4]
 8005552:	9904      	ldr	r1, [sp, #16]
 8005554:	6188      	str	r0, [r1, #24]
  TIMx->CCER = tmpccer;
 8005556:	9800      	ldr	r0, [sp, #0]
 8005558:	9904      	ldr	r1, [sp, #16]
 800555a:	6208      	str	r0, [r1, #32]
}
 800555c:	b005      	add	sp, #20
 800555e:	4770      	bx	lr

08005560 <TIM_TI2_ConfigInputStage>:
{
 8005560:	b085      	sub	sp, #20
 8005562:	9004      	str	r0, [sp, #16]
 8005564:	9103      	str	r1, [sp, #12]
 8005566:	9202      	str	r2, [sp, #8]
  tmpccer = TIMx->CCER;
 8005568:	9804      	ldr	r0, [sp, #16]
 800556a:	6a00      	ldr	r0, [r0, #32]
 800556c:	9000      	str	r0, [sp, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800556e:	9904      	ldr	r1, [sp, #16]
 8005570:	6a08      	ldr	r0, [r1, #32]
 8005572:	f020 0010 	bic.w	r0, r0, #16
 8005576:	6208      	str	r0, [r1, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005578:	9804      	ldr	r0, [sp, #16]
 800557a:	6980      	ldr	r0, [r0, #24]
 800557c:	9001      	str	r0, [sp, #4]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800557e:	9801      	ldr	r0, [sp, #4]
 8005580:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
 8005584:	9001      	str	r0, [sp, #4]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005586:	9902      	ldr	r1, [sp, #8]
 8005588:	9801      	ldr	r0, [sp, #4]
 800558a:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 800558e:	9001      	str	r0, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005590:	9800      	ldr	r0, [sp, #0]
 8005592:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
 8005596:	9000      	str	r0, [sp, #0]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005598:	9903      	ldr	r1, [sp, #12]
 800559a:	9800      	ldr	r0, [sp, #0]
 800559c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80055a0:	9000      	str	r0, [sp, #0]
  TIMx->CCMR1 = tmpccmr1 ;
 80055a2:	9801      	ldr	r0, [sp, #4]
 80055a4:	9904      	ldr	r1, [sp, #16]
 80055a6:	6188      	str	r0, [r1, #24]
  TIMx->CCER = tmpccer;
 80055a8:	9800      	ldr	r0, [sp, #0]
 80055aa:	9904      	ldr	r1, [sp, #16]
 80055ac:	6208      	str	r0, [r1, #32]
}
 80055ae:	b005      	add	sp, #20
 80055b0:	4770      	bx	lr
	...

080055b4 <UsageFault_Handler>:
  while (1)
 80055b4:	e7ff      	b.n	80055b6 <UsageFault_Handler+0x2>
 80055b6:	e7fe      	b.n	80055b6 <UsageFault_Handler+0x2>

080055b8 <W25Q64_Read>:
#include "q64.h"

HAL_StatusTypeDef W25Q64_Read(SPI_HandleTypeDef * hspi,uint32_t start_addr,uint8_t*data,uint16_t size)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	9007      	str	r0, [sp, #28]
 80055be:	9106      	str	r1, [sp, #24]
 80055c0:	9205      	str	r2, [sp, #20]
 80055c2:	f8ad 3012 	strh.w	r3, [sp, #18]
 80055c6:	2003      	movs	r0, #3
	uint8_t cmd[4] = {0x3,start_addr >> 16,start_addr >> 8, start_addr};
 80055c8:	f88d 000e 	strb.w	r0, [sp, #14]
 80055cc:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80055d0:	f88d 000f 	strb.w	r0, [sp, #15]
 80055d4:	9806      	ldr	r0, [sp, #24]
 80055d6:	0a00      	lsrs	r0, r0, #8
 80055d8:	f88d 0010 	strb.w	r0, [sp, #16]
 80055dc:	9806      	ldr	r0, [sp, #24]
 80055de:	f88d 0011 	strb.w	r0, [sp, #17]
 80055e2:	f640 0000 	movw	r0, #2048	@ 0x800
 80055e6:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80055ea:	9002      	str	r0, [sp, #8]
 80055ec:	2110      	movs	r1, #16
 80055ee:	9101      	str	r1, [sp, #4]
 80055f0:	2200      	movs	r2, #0
	HAL_StatusTypeDef ret;
	HAL_GPIO_WritePin(Q64_NSS_GPIO_Port,Q64_NSS_Pin,GPIO_PIN_RESET);
 80055f2:	f7fc f973 	bl	80018dc <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(hspi,cmd,4,100);
 80055f6:	9807      	ldr	r0, [sp, #28]
 80055f8:	f10d 010e 	add.w	r1, sp, #14
 80055fc:	2204      	movs	r2, #4
 80055fe:	2364      	movs	r3, #100	@ 0x64
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	f7fd fbe7 	bl	8002dd4 <HAL_SPI_Transmit>
 8005606:	9b00      	ldr	r3, [sp, #0]
	ret = HAL_SPI_Receive(hspi,data,size,100);
 8005608:	9807      	ldr	r0, [sp, #28]
 800560a:	9905      	ldr	r1, [sp, #20]
 800560c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8005610:	f7fd fabe 	bl	8002b90 <HAL_SPI_Receive>
 8005614:	9901      	ldr	r1, [sp, #4]
 8005616:	4602      	mov	r2, r0
 8005618:	9802      	ldr	r0, [sp, #8]
 800561a:	f88d 200d 	strb.w	r2, [sp, #13]
 800561e:	2201      	movs	r2, #1
	
	HAL_GPIO_WritePin(Q64_NSS_GPIO_Port,Q64_NSS_Pin,GPIO_PIN_SET);
 8005620:	f7fc f95c 	bl	80018dc <HAL_GPIO_WritePin>
	
	return ret;
 8005624:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8005628:	b008      	add	sp, #32
 800562a:	bd80      	pop	{r7, pc}

0800562c <__NVIC_EnableIRQ>:
{
 800562c:	b081      	sub	sp, #4
 800562e:	f88d 0003 	strb.w	r0, [sp, #3]
  if ((int32_t)(IRQn) >= 0)
 8005632:	f99d 0003 	ldrsb.w	r0, [sp, #3]
 8005636:	2800      	cmp	r0, #0
 8005638:	d40e      	bmi.n	8005658 <__NVIC_EnableIRQ+0x2c>
 800563a:	e7ff      	b.n	800563c <__NVIC_EnableIRQ+0x10>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800563c:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8005640:	f001 021f 	and.w	r2, r1, #31
 8005644:	2001      	movs	r0, #1
 8005646:	4090      	lsls	r0, r2
 8005648:	094a      	lsrs	r2, r1, #5
 800564a:	f24e 1100 	movw	r1, #57600	@ 0xe100
 800564e:	f2ce 0100 	movt	r1, #57344	@ 0xe000
 8005652:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  }
 8005656:	e7ff      	b.n	8005658 <__NVIC_EnableIRQ+0x2c>
}
 8005658:	b001      	add	sp, #4
 800565a:	4770      	bx	lr

0800565c <__NVIC_GetPriorityGrouping>:
{
 800565c:	f64e 500c 	movw	r0, #60684	@ 0xed0c
 8005660:	f2ce 0000 	movt	r0, #57344	@ 0xe000
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005664:	6800      	ldr	r0, [r0, #0]
 8005666:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800566a:	4770      	bx	lr

0800566c <__NVIC_SetPriority>:
{
 800566c:	b082      	sub	sp, #8
 800566e:	f88d 0007 	strb.w	r0, [sp, #7]
 8005672:	9100      	str	r1, [sp, #0]
  if ((int32_t)(IRQn) >= 0)
 8005674:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8005678:	2800      	cmp	r0, #0
 800567a:	d40a      	bmi.n	8005692 <__NVIC_SetPriority+0x26>
 800567c:	e7ff      	b.n	800567e <__NVIC_SetPriority+0x12>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800567e:	9800      	ldr	r0, [sp, #0]
 8005680:	0100      	lsls	r0, r0, #4
 8005682:	f99d 1007 	ldrsb.w	r1, [sp, #7]
 8005686:	f24e 4200 	movw	r2, #58368	@ 0xe400
 800568a:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 800568e:	5488      	strb	r0, [r1, r2]
  }
 8005690:	e00b      	b.n	80056aa <__NVIC_SetPriority+0x3e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005692:	9800      	ldr	r0, [sp, #0]
 8005694:	0100      	lsls	r0, r0, #4
 8005696:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800569a:	f001 010f 	and.w	r1, r1, #15
 800569e:	f64e 5214 	movw	r2, #60692	@ 0xed14
 80056a2:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 80056a6:	5488      	strb	r0, [r1, r2]
 80056a8:	e7ff      	b.n	80056aa <__NVIC_SetPriority+0x3e>
}
 80056aa:	b002      	add	sp, #8
 80056ac:	4770      	bx	lr
	...

080056b0 <__NVIC_SetPriorityGrouping>:
{
 80056b0:	b083      	sub	sp, #12
 80056b2:	9002      	str	r0, [sp, #8]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056b4:	9802      	ldr	r0, [sp, #8]
 80056b6:	f000 0007 	and.w	r0, r0, #7
 80056ba:	9000      	str	r0, [sp, #0]
 80056bc:	f64e 510c 	movw	r1, #60684	@ 0xed0c
 80056c0:	f2ce 0100 	movt	r1, #57344	@ 0xe000
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056c4:	6808      	ldr	r0, [r1, #0]
 80056c6:	9001      	str	r0, [sp, #4]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056c8:	9801      	ldr	r0, [sp, #4]
 80056ca:	f64f 02ff 	movw	r2, #63743	@ 0xf8ff
 80056ce:	4010      	ands	r0, r2
 80056d0:	9001      	str	r0, [sp, #4]
  reg_value  =  (reg_value                                   |
 80056d2:	9801      	ldr	r0, [sp, #4]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80056d4:	9a00      	ldr	r2, [sp, #0]
  reg_value  =  (reg_value                                   |
 80056d6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80056da:	2200      	movs	r2, #0
 80056dc:	f2c0 52fa 	movt	r2, #1530	@ 0x5fa
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056e0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80056e2:	9001      	str	r0, [sp, #4]
  SCB->AIRCR =  reg_value;
 80056e4:	9801      	ldr	r0, [sp, #4]
 80056e6:	6008      	str	r0, [r1, #0]
}
 80056e8:	b003      	add	sp, #12
 80056ea:	4770      	bx	lr

080056ec <main>:
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	@ 0x28
 80056f0:	2000      	movs	r0, #0
 80056f2:	9003      	str	r0, [sp, #12]
 80056f4:	9009      	str	r0, [sp, #36]	@ 0x24
  HAL_Init();
 80056f6:	f7fc fbb7 	bl	8001e68 <HAL_Init>
  SystemClock_Config();
 80056fa:	f7ff fc79 	bl	8004ff0 <SystemClock_Config>
  MX_GPIO_Init();
 80056fe:	f7fe ffbd 	bl	800467c <MX_GPIO_Init>
  MX_I2C2_Init();
 8005702:	f7ff f811 	bl	8004728 <MX_I2C2_Init>
  MX_SPI2_Init();
 8005706:	f7ff f85b 	bl	80047c0 <MX_SPI2_Init>
  MX_TIM4_Init();
 800570a:	f7ff f8c3 	bl	8004894 <MX_TIM4_Init>
  MX_SPI1_Init();
 800570e:	f7ff f82f 	bl	8004770 <MX_SPI1_Init>
  MX_TIM2_Init();
 8005712:	f7ff f87d 	bl	8004810 <MX_TIM2_Init>
	OLED_Init();
 8005716:	f7ff f9b3 	bl	8004a80 <OLED_Init>
	LP5860_x4_Init(&hspi2);
 800571a:	f240 605c 	movw	r0, #1628	@ 0x65c
 800571e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8005722:	f7fe fe6d 	bl	8004400 <LP5860_x4_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8005726:	f240 60b4 	movw	r0, #1716	@ 0x6b4
 800572a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800572e:	f7fd ff51 	bl	80035d4 <HAL_TIM_Base_Start_IT>
 8005732:	9903      	ldr	r1, [sp, #12]
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8005734:	f240 60fc 	movw	r0, #1788	@ 0x6fc
 8005738:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800573c:	9002      	str	r0, [sp, #8]
 800573e:	f7fe faeb 	bl	8003d18 <HAL_TIM_PWM_Start>
 8005742:	9902      	ldr	r1, [sp, #8]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 30);
 8005744:	9803      	ldr	r0, [sp, #12]
 8005746:	680a      	ldr	r2, [r1, #0]
 8005748:	211e      	movs	r1, #30
 800574a:	6351      	str	r1, [r2, #52]	@ 0x34
	uint32_t frame_count = 0;
 800574c:	9008      	str	r0, [sp, #32]
	char str[16] = {0};
 800574e:	9007      	str	r0, [sp, #28]
 8005750:	9006      	str	r0, [sp, #24]
 8005752:	9005      	str	r0, [sp, #20]
 8005754:	9004      	str	r0, [sp, #16]
  while (1)
 8005756:	e7ff      	b.n	8005758 <main+0x6c>
		if(MAIN_GET_FLAG(MAIN_FLAG_TIM2_30HZ)){
 8005758:	f240 704c 	movw	r0, #1868	@ 0x74c
 800575c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8005760:	7800      	ldrb	r0, [r0, #0]
 8005762:	07c0      	lsls	r0, r0, #31
 8005764:	b3b8      	cbz	r0, 80057d6 <main+0xea>
 8005766:	e7ff      	b.n	8005768 <main+0x7c>
			frame_count = (frame_count + 1)%TEST_VIDEO_FRAME_COUNT;
 8005768:	9808      	ldr	r0, [sp, #32]
 800576a:	1c42      	adds	r2, r0, #1
 800576c:	0850      	lsrs	r0, r2, #1
 800576e:	f64e 616d 	movw	r1, #61037	@ 0xee6d
 8005772:	f2cd 114b 	movt	r1, #53579	@ 0xd14b
 8005776:	fba0 1001 	umull	r1, r0, r0, r1
 800577a:	0ac0      	lsrs	r0, r0, #11
 800577c:	f241 3192 	movw	r1, #5010	@ 0x1392
 8005780:	fb00 2011 	mls	r0, r0, r1, r2
 8005784:	9008      	str	r0, [sp, #32]
			read_frame_data(frame_count);
 8005786:	9808      	ldr	r0, [sp, #32]
 8005788:	f000 f84e 	bl	8005828 <read_frame_data>
			play_test_video(frame_count);
 800578c:	9808      	ldr	r0, [sp, #32]
 800578e:	f000 f823 	bl	80057d8 <play_test_video>
			MAIN_CLEAR_FLAG(MAIN_FLAG_TIM2_30HZ)
 8005792:	e7ff      	b.n	8005794 <main+0xa8>
 8005794:	f240 714c 	movw	r1, #1868	@ 0x74c
 8005798:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800579c:	7808      	ldrb	r0, [r1, #0]
 800579e:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 80057a2:	7008      	strb	r0, [r1, #0]
 80057a4:	e7ff      	b.n	80057a6 <main+0xba>
			OLED_PRINT(0,0,str,16,"%d!",frame_count)
 80057a6:	e7ff      	b.n	80057a8 <main+0xbc>
 80057a8:	2000      	movs	r0, #0
 80057aa:	9000      	str	r0, [sp, #0]
 80057ac:	9007      	str	r0, [sp, #28]
 80057ae:	9006      	str	r0, [sp, #24]
 80057b0:	9005      	str	r0, [sp, #20]
 80057b2:	9004      	str	r0, [sp, #16]
 80057b4:	9a08      	ldr	r2, [sp, #32]
 80057b6:	f246 11b2 	movw	r1, #25010	@ 0x61b2
 80057ba:	f6c0 0100 	movt	r1, #2048	@ 0x800
 80057be:	a804      	add	r0, sp, #16
 80057c0:	9001      	str	r0, [sp, #4]
 80057c2:	f7fa fd8d 	bl	80002e0 <sprintf>
 80057c6:	9900      	ldr	r1, [sp, #0]
 80057c8:	9a01      	ldr	r2, [sp, #4]
 80057ca:	2310      	movs	r3, #16
 80057cc:	4608      	mov	r0, r1
 80057ce:	f7ff fa0d 	bl	8004bec <OLED_Raw_Draw_String>
 80057d2:	e7ff      	b.n	80057d4 <main+0xe8>
		}
 80057d4:	e7ff      	b.n	80057d6 <main+0xea>
  while (1)
 80057d6:	e7bf      	b.n	8005758 <main+0x6c>

080057d8 <play_test_video>:
{
	return frame[0];
}

void play_test_video(uint32_t count)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	9003      	str	r0, [sp, #12]
 80057de:	2000      	movs	r0, #0
	for(uint8_t i = 0;i < 4;i++)
 80057e0:	f88d 000b 	strb.w	r0, [sp, #11]
 80057e4:	e7ff      	b.n	80057e6 <play_test_video+0xe>
 80057e6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80057ea:	2803      	cmp	r0, #3
 80057ec:	dc1a      	bgt.n	8005824 <play_test_video+0x4c>
 80057ee:	e7ff      	b.n	80057f0 <play_test_video+0x18>
	{
		Lp5860_Writes(&hspi2,i,LP5860_x4_REG_PWM_BRI(0),&frame[i*198],198);
 80057f0:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80057f4:	f240 2298 	movw	r2, #664	@ 0x298
 80057f8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80057fc:	20c6      	movs	r0, #198	@ 0xc6
 80057fe:	fb01 2300 	mla	r3, r1, r0, r2
 8005802:	466a      	mov	r2, sp
 8005804:	6010      	str	r0, [r2, #0]
 8005806:	f240 605c 	movw	r0, #1628	@ 0x65c
 800580a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800580e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005812:	f7fe fe8f 	bl	8004534 <Lp5860_Writes>
	}
 8005816:	e7ff      	b.n	8005818 <play_test_video+0x40>
	for(uint8_t i = 0;i < 4;i++)
 8005818:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800581c:	3001      	adds	r0, #1
 800581e:	f88d 000b 	strb.w	r0, [sp, #11]
 8005822:	e7e0      	b.n	80057e6 <play_test_video+0xe>
}
 8005824:	b004      	add	sp, #16
 8005826:	bd80      	pop	{r7, pc}

08005828 <read_frame_data>:
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	9001      	str	r0, [sp, #4]
	W25Q64_Read(&hspi1,count*792,frame,792);
 800582e:	9801      	ldr	r0, [sp, #4]
 8005830:	f44f 7346 	mov.w	r3, #792	@ 0x318
 8005834:	fb00 f103 	mul.w	r1, r0, r3
 8005838:	f240 6004 	movw	r0, #1540	@ 0x604
 800583c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8005840:	f240 2298 	movw	r2, #664	@ 0x298
 8005844:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8005848:	f7ff feb6 	bl	80055b8 <W25Q64_Read>
}
 800584c:	b002      	add	sp, #8
 800584e:	bd80      	pop	{r7, pc}

08005850 <_btod_d2e>:
 8005850:	ea5f 0c40 	movs.w	ip, r0, lsl #1
 8005854:	bf08      	it	eq
 8005856:	f091 0f00 	teqeq	r1, #0
 800585a:	ea4f 238c 	mov.w	r3, ip, lsl #10
 800585e:	ea4f 22c1 	mov.w	r2, r1, lsl #11
 8005862:	ea43 5151 	orr.w	r1, r3, r1, lsr #21
 8005866:	ea4f 501c 	mov.w	r0, ip, lsr #20
 800586a:	bf18      	it	ne
 800586c:	f500 40f0 	addne.w	r0, r0, #30720	@ 0x7800
 8005870:	ea4f 0030 	mov.w	r0, r0, rrx
 8005874:	bf18      	it	ne
 8005876:	f041 4100 	orrne.w	r1, r1, #2147483648	@ 0x80000000
 800587a:	ea5f 5c6c 	movs.w	ip, ip, asr #21
 800587e:	f000 8029 	beq.w	80058d4 <_d2e_norm_op1>
 8005882:	f1bc 3fff 	cmp.w	ip, #4294967295
 8005886:	bf08      	it	eq
 8005888:	f040 4080 	orreq.w	r0, r0, #1073741824	@ 0x40000000
 800588c:	4770      	bx	lr

0800588e <_d2e_denorm_low>:
 800588e:	0c13      	lsrs	r3, r2, #16
 8005890:	bf06      	itte	eq
 8005892:	0412      	lsleq	r2, r2, #16
 8005894:	f04f 0c10 	moveq.w	ip, #16
 8005898:	f04f 0c00 	movne.w	ip, #0
 800589c:	0e13      	lsrs	r3, r2, #24
 800589e:	bf04      	itt	eq
 80058a0:	0212      	lsleq	r2, r2, #8
 80058a2:	f10c 0c08 	addeq.w	ip, ip, #8
 80058a6:	0f13      	lsrs	r3, r2, #28
 80058a8:	bf04      	itt	eq
 80058aa:	0112      	lsleq	r2, r2, #4
 80058ac:	f10c 0c04 	addeq.w	ip, ip, #4
 80058b0:	0f93      	lsrs	r3, r2, #30
 80058b2:	bf04      	itt	eq
 80058b4:	0092      	lsleq	r2, r2, #2
 80058b6:	f10c 0c02 	addeq.w	ip, ip, #2
 80058ba:	0fd3      	lsrs	r3, r2, #31
 80058bc:	bf04      	itt	eq
 80058be:	0052      	lsleq	r2, r2, #1
 80058c0:	f10c 0c01 	addeq.w	ip, ip, #1
 80058c4:	4611      	mov	r1, r2
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f1a0 001f 	sub.w	r0, r0, #31
 80058ce:	eba0 000c 	sub.w	r0, r0, ip
 80058d2:	4770      	bx	lr

080058d4 <_d2e_norm_op1>:
 80058d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80058d8:	bf08      	it	eq
 80058da:	4770      	bxeq	lr
 80058dc:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 80058e0:	f43f afd5 	beq.w	800588e <_d2e_denorm_low>
 80058e4:	0c0b      	lsrs	r3, r1, #16
 80058e6:	bf06      	itte	eq
 80058e8:	0409      	lsleq	r1, r1, #16
 80058ea:	f04f 0c10 	moveq.w	ip, #16
 80058ee:	f04f 0c00 	movne.w	ip, #0
 80058f2:	0e0b      	lsrs	r3, r1, #24
 80058f4:	bf04      	itt	eq
 80058f6:	0209      	lsleq	r1, r1, #8
 80058f8:	f10c 0c08 	addeq.w	ip, ip, #8
 80058fc:	0f0b      	lsrs	r3, r1, #28
 80058fe:	bf04      	itt	eq
 8005900:	0109      	lsleq	r1, r1, #4
 8005902:	f10c 0c04 	addeq.w	ip, ip, #4
 8005906:	0f8b      	lsrs	r3, r1, #30
 8005908:	bf04      	itt	eq
 800590a:	0089      	lsleq	r1, r1, #2
 800590c:	f10c 0c02 	addeq.w	ip, ip, #2
 8005910:	0fcb      	lsrs	r3, r1, #31
 8005912:	bf04      	itt	eq
 8005914:	0049      	lsleq	r1, r1, #1
 8005916:	f10c 0c01 	addeq.w	ip, ip, #1
 800591a:	f1cc 0320 	rsb	r3, ip, #32
 800591e:	fa22 f303 	lsr.w	r3, r2, r3
 8005922:	ea41 0103 	orr.w	r1, r1, r3
 8005926:	fa02 f20c 	lsl.w	r2, r2, ip
 800592a:	eba0 000c 	sub.w	r0, r0, ip
 800592e:	f100 0001 	add.w	r0, r0, #1
 8005932:	4770      	bx	lr

08005934 <__btod_div_common>:
 8005934:	f023 477f 	bic.w	r7, r3, #4278190080	@ 0xff000000
 8005938:	f020 4c7f 	bic.w	ip, r0, #4278190080	@ 0xff000000
 800593c:	ea80 0003 	eor.w	r0, r0, r3
 8005940:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8005944:	ebac 0307 	sub.w	r3, ip, r7
 8005948:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 800594c:	f103 03ff 	add.w	r3, r3, #255	@ 0xff
 8005950:	e92d 4980 	stmdb	sp!, {r7, r8, fp, lr}
 8005954:	b409      	push	{r0, r3}
 8005956:	ea4f 4314 	mov.w	r3, r4, lsr #16
 800595a:	ea24 4803 	bic.w	r8, r4, r3, lsl #16
 800595e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 8005962:	ea25 4e0b 	bic.w	lr, r5, fp, lsl #16
 8005966:	f20f 2604 	addw	r6, pc, #516	@ 0x204
 800596a:	eb06 2713 	add.w	r7, r6, r3, lsr #8
 800596e:	783e      	ldrb	r6, [r7, #0]
 8005970:	fb03 6706 	mla	r7, r3, r6, r6
 8005974:	f5c7 0700 	rsb	r7, r7, #8388608	@ 0x800000
 8005978:	fb07 f606 	mul.w	r6, r7, r6
 800597c:	ea4f 46d6 	mov.w	r6, r6, lsr #19
 8005980:	f106 0602 	add.w	r6, r6, #2
 8005984:	ea4f 3754 	mov.w	r7, r4, lsr #13
 8005988:	fb07 6c06 	mla	ip, r7, r6, r6
 800598c:	f1cc 5c00 	rsb	ip, ip, #536870912	@ 0x20000000
 8005990:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005994:	ea2c 4c07 	bic.w	ip, ip, r7, lsl #16
 8005998:	fb0c f506 	mul.w	r5, ip, r6
 800599c:	fb07 f406 	mul.w	r4, r7, r6
 80059a0:	eb04 4615 	add.w	r6, r4, r5, lsr #16
 80059a4:	ea4f 1696 	mov.w	r6, r6, lsr #6
 80059a8:	0849      	lsrs	r1, r1, #1
 80059aa:	ea5f 0232 	movs.w	r2, r2, rrx
 80059ae:	bf34      	ite	cc
 80059b0:	2000      	movcc	r0, #0
 80059b2:	f04f 4000 	movcs.w	r0, #2147483648	@ 0x80000000
 80059b6:	ea4f 37d1 	mov.w	r7, r1, lsr #15
 80059ba:	fb06 fc07 	mul.w	ip, r6, r7
 80059be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80059c2:	fb0c f70b 	mul.w	r7, ip, fp
 80059c6:	1bd2      	subs	r2, r2, r7
 80059c8:	fb03 f70c 	mul.w	r7, r3, ip
 80059cc:	eb61 0107 	sbc.w	r1, r1, r7
 80059d0:	fb0c f70e 	mul.w	r7, ip, lr
 80059d4:	ebb0 4007 	subs.w	r0, r0, r7, lsl #16
 80059d8:	eb72 4217 	sbcs.w	r2, r2, r7, lsr #16
 80059dc:	fb0c f708 	mul.w	r7, ip, r8
 80059e0:	bf34      	ite	cc
 80059e2:	eba2 4207 	subcc.w	r2, r2, r7, lsl #16
 80059e6:	ebb2 4207 	subscs.w	r2, r2, r7, lsl #16
 80059ea:	eb61 4117 	sbc.w	r1, r1, r7, lsr #16
 80059ee:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80059f2:	ea4f 0791 	mov.w	r7, r1, lsr #2
 80059f6:	fb06 fc07 	mul.w	ip, r6, r7
 80059fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80059fe:	fb0c f70b 	mul.w	r7, ip, fp
 8005a02:	ebb0 40c7 	subs.w	r0, r0, r7, lsl #19
 8005a06:	eb72 3257 	sbcs.w	r2, r2, r7, lsr #13
 8005a0a:	fb03 f70c 	mul.w	r7, r3, ip
 8005a0e:	bf34      	ite	cc
 8005a10:	eba2 42c7 	subcc.w	r2, r2, r7, lsl #19
 8005a14:	ebb2 42c7 	subscs.w	r2, r2, r7, lsl #19
 8005a18:	eb61 3157 	sbc.w	r1, r1, r7, lsr #13
 8005a1c:	fb0c f70e 	mul.w	r7, ip, lr
 8005a20:	ebb0 00c7 	subs.w	r0, r0, r7, lsl #3
 8005a24:	eb72 7257 	sbcs.w	r2, r2, r7, lsr #29
 8005a28:	fb0c f708 	mul.w	r7, ip, r8
 8005a2c:	bf34      	ite	cc
 8005a2e:	eba2 02c7 	subcc.w	r2, r2, r7, lsl #3
 8005a32:	ebb2 02c7 	subscs.w	r2, r2, r7, lsl #3
 8005a36:	eb61 7157 	sbc.w	r1, r1, r7, lsr #29
 8005a3a:	ea4f 6181 	mov.w	r1, r1, lsl #26
 8005a3e:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8005a42:	ea4f 6282 	mov.w	r2, r2, lsl #26
 8005a46:	ea42 1290 	orr.w	r2, r2, r0, lsr #6
 8005a4a:	ea4f 6080 	mov.w	r0, r0, lsl #26
 8005a4e:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8005a52:	9f03      	ldr	r7, [sp, #12]
 8005a54:	ea4f 37d1 	mov.w	r7, r1, lsr #15
 8005a58:	fb06 fc07 	mul.w	ip, r6, r7
 8005a5c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005a60:	fb0c f70b 	mul.w	r7, ip, fp
 8005a64:	1bd2      	subs	r2, r2, r7
 8005a66:	fb03 f70c 	mul.w	r7, r3, ip
 8005a6a:	eb61 0107 	sbc.w	r1, r1, r7
 8005a6e:	fb0c f70e 	mul.w	r7, ip, lr
 8005a72:	ebb0 4007 	subs.w	r0, r0, r7, lsl #16
 8005a76:	eb72 4217 	sbcs.w	r2, r2, r7, lsr #16
 8005a7a:	fb0c f708 	mul.w	r7, ip, r8
 8005a7e:	bf34      	ite	cc
 8005a80:	eba2 4207 	subcc.w	r2, r2, r7, lsl #16
 8005a84:	ebb2 4207 	subscs.w	r2, r2, r7, lsl #16
 8005a88:	eb61 4117 	sbc.w	r1, r1, r7, lsr #16
 8005a8c:	ea4f 558c 	mov.w	r5, ip, lsl #22
 8005a90:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005a94:	ea4f 0791 	mov.w	r7, r1, lsr #2
 8005a98:	fb06 fc07 	mul.w	ip, r6, r7
 8005a9c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005aa0:	fb0c f70b 	mul.w	r7, ip, fp
 8005aa4:	ebb0 40c7 	subs.w	r0, r0, r7, lsl #19
 8005aa8:	eb72 3257 	sbcs.w	r2, r2, r7, lsr #13
 8005aac:	fb03 f70c 	mul.w	r7, r3, ip
 8005ab0:	bf34      	ite	cc
 8005ab2:	eba2 42c7 	subcc.w	r2, r2, r7, lsl #19
 8005ab6:	ebb2 42c7 	subscs.w	r2, r2, r7, lsl #19
 8005aba:	eb61 3157 	sbc.w	r1, r1, r7, lsr #13
 8005abe:	fb0c f70e 	mul.w	r7, ip, lr
 8005ac2:	ebb0 00c7 	subs.w	r0, r0, r7, lsl #3
 8005ac6:	eb72 7257 	sbcs.w	r2, r2, r7, lsr #29
 8005aca:	fb0c f708 	mul.w	r7, ip, r8
 8005ace:	bf34      	ite	cc
 8005ad0:	eba2 02c7 	subcc.w	r2, r2, r7, lsl #3
 8005ad4:	ebb2 02c7 	subscs.w	r2, r2, r7, lsl #3
 8005ad8:	eb61 7157 	sbc.w	r1, r1, r7, lsr #29
 8005adc:	ea4f 6181 	mov.w	r1, r1, lsl #26
 8005ae0:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8005ae4:	ea4f 6282 	mov.w	r2, r2, lsl #26
 8005ae8:	ea42 1290 	orr.w	r2, r2, r0, lsr #6
 8005aec:	ea4f 6080 	mov.w	r0, r0, lsl #26
 8005af0:	eb15 254c 	adds.w	r5, r5, ip, lsl #9
 8005af4:	f144 0400 	adc.w	r4, r4, #0
 8005af8:	ea4f 37d1 	mov.w	r7, r1, lsr #15
 8005afc:	fb06 fc07 	mul.w	ip, r6, r7
 8005b00:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b04:	fb0c f70b 	mul.w	r7, ip, fp
 8005b08:	1bd2      	subs	r2, r2, r7
 8005b0a:	fb03 f70c 	mul.w	r7, r3, ip
 8005b0e:	eb61 0107 	sbc.w	r1, r1, r7
 8005b12:	fb0c f70e 	mul.w	r7, ip, lr
 8005b16:	ebb0 4007 	subs.w	r0, r0, r7, lsl #16
 8005b1a:	eb72 4217 	sbcs.w	r2, r2, r7, lsr #16
 8005b1e:	fb0c f708 	mul.w	r7, ip, r8
 8005b22:	bf34      	ite	cc
 8005b24:	eba2 4207 	subcc.w	r2, r2, r7, lsl #16
 8005b28:	ebb2 4207 	subscs.w	r2, r2, r7, lsl #16
 8005b2c:	eb61 4117 	sbc.w	r1, r1, r7, lsr #16
 8005b30:	ea4f 3181 	mov.w	r1, r1, lsl #14
 8005b34:	ea41 4192 	orr.w	r1, r1, r2, lsr #18
 8005b38:	ea4f 3282 	mov.w	r2, r2, lsl #14
 8005b3c:	ea42 4290 	orr.w	r2, r2, r0, lsr #18
 8005b40:	ea4f 3080 	mov.w	r0, r0, lsl #14
 8005b44:	ea4f 760c 	mov.w	r6, ip, lsl #28
 8005b48:	eb15 151c 	adds.w	r5, r5, ip, lsr #4
 8005b4c:	f144 0400 	adc.w	r4, r4, #0
 8005b50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005b54:	ea4e 480b 	orr.w	r8, lr, fp, lsl #16
 8005b58:	f04f 0e00 	mov.w	lr, #0
 8005b5c:	ebb2 0c08 	subs.w	ip, r2, r8
 8005b60:	eb71 0703 	sbcs.w	r7, r1, r3
 8005b64:	bf24      	itt	cs
 8005b66:	4662      	movcs	r2, ip
 8005b68:	4639      	movcs	r1, r7
 8005b6a:	eb4e 0e0e 	adc.w	lr, lr, lr
 8005b6e:	f04f 0b00 	mov.w	fp, #0
 8005b72:	1800      	adds	r0, r0, r0
 8005b74:	4152      	adcs	r2, r2
 8005b76:	4149      	adcs	r1, r1
 8005b78:	eb4b 0b0b 	adc.w	fp, fp, fp
 8005b7c:	ebb2 0c08 	subs.w	ip, r2, r8
 8005b80:	eb71 0703 	sbcs.w	r7, r1, r3
 8005b84:	f17b 0b00 	sbcs.w	fp, fp, #0
 8005b88:	bf24      	itt	cs
 8005b8a:	4662      	movcs	r2, ip
 8005b8c:	4639      	movcs	r1, r7
 8005b8e:	eb4e 0e0e 	adc.w	lr, lr, lr
 8005b92:	f04f 0b00 	mov.w	fp, #0
 8005b96:	1800      	adds	r0, r0, r0
 8005b98:	4152      	adcs	r2, r2
 8005b9a:	4149      	adcs	r1, r1
 8005b9c:	eb4b 0b0b 	adc.w	fp, fp, fp
 8005ba0:	ebb2 0c08 	subs.w	ip, r2, r8
 8005ba4:	eb71 0703 	sbcs.w	r7, r1, r3
 8005ba8:	f17b 0b00 	sbcs.w	fp, fp, #0
 8005bac:	bf24      	itt	cs
 8005bae:	4662      	movcs	r2, ip
 8005bb0:	4639      	movcs	r1, r7
 8005bb2:	eb4e 0e0e 	adc.w	lr, lr, lr
 8005bb6:	ea51 0702 	orrs.w	r7, r1, r2
 8005bba:	bf18      	it	ne
 8005bbc:	f046 0601 	orrne.w	r6, r6, #1
 8005bc0:	eb16 760e 	adds.w	r6, r6, lr, lsl #28
 8005bc4:	f155 0200 	adcs.w	r2, r5, #0
 8005bc8:	f154 0100 	adcs.w	r1, r4, #0
 8005bcc:	d503      	bpl.n	8005bd6 <__btod_div_common+0x2a2>
 8005bce:	e8bd 0189 	ldmia.w	sp!, {r0, r3, r7, r8}
 8005bd2:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
 8005bd6:	e8bd 0189 	ldmia.w	sp!, {r0, r3, r7, r8}
 8005bda:	e8bd 4800 	ldmia.w	sp!, {fp, lr}
 8005bde:	19b6      	adds	r6, r6, r6
 8005be0:	4152      	adcs	r2, r2
 8005be2:	eb41 0101 	adc.w	r1, r1, r1
 8005be6:	f1a3 0301 	sub.w	r3, r3, #1
 8005bea:	4770      	bx	lr
 8005bec:	7e7f8080 	.word	0x7e7f8080
 8005bf0:	7a7b7c7d 	.word	0x7a7b7c7d
 8005bf4:	76777879 	.word	0x76777879
 8005bf8:	73747576 	.word	0x73747576
 8005bfc:	70717172 	.word	0x70717172
 8005c00:	6d6e6e6f 	.word	0x6d6e6e6f
 8005c04:	6a6b6c6c 	.word	0x6a6b6c6c
 8005c08:	6868696a 	.word	0x6868696a
 8005c0c:	65666667 	.word	0x65666667
 8005c10:	63636464 	.word	0x63636464
 8005c14:	60616162 	.word	0x60616162
 8005c18:	5e5f5f60 	.word	0x5e5f5f60
 8005c1c:	5c5d5d5e 	.word	0x5c5d5d5e
 8005c20:	5a5b5b5c 	.word	0x5a5b5b5c
 8005c24:	5859595a 	.word	0x5859595a
 8005c28:	56575758 	.word	0x56575758
 8005c2c:	55555556 	.word	0x55555556
 8005c30:	53535454 	.word	0x53535454
 8005c34:	51525252 	.word	0x51525252
 8005c38:	50505051 	.word	0x50505051
 8005c3c:	4e4f4f4f 	.word	0x4e4f4f4f
 8005c40:	4d4d4d4e 	.word	0x4d4d4d4e
 8005c44:	4b4c4c4c 	.word	0x4b4c4c4c
 8005c48:	4a4a4b4b 	.word	0x4a4a4b4b
 8005c4c:	4949494a 	.word	0x4949494a
 8005c50:	47484848 	.word	0x47484848
 8005c54:	46474747 	.word	0x46474747
 8005c58:	45454646 	.word	0x45454646
 8005c5c:	44444445 	.word	0x44444445
 8005c60:	43434344 	.word	0x43434344
 8005c64:	42424243 	.word	0x42424243
 8005c68:	41414142 	.word	0x41414142

08005c6c <_e2e>:
 8005c6c:	469c      	mov	ip, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d430      	bmi.n	8005cd4 <_e2e+0x68>
 8005c72:	0077      	lsls	r7, r6, #1
 8005c74:	d02b      	beq.n	8005cce <_e2e+0x62>
 8005c76:	ea4f 0737 	mov.w	r7, r7, rrx
 8005c7a:	b51c      	push	{r2, r3, r4, lr}
 8005c7c:	b403      	push	{r0, r1}
 8005c7e:	f04f 0010 	mov.w	r0, #16
 8005c82:	f04f 0110 	mov.w	r1, #16
 8005c86:	f1ba 0f00 	cmp.w	sl, #0
 8005c8a:	d006      	beq.n	8005c9a <_e2e+0x2e>
 8005c8c:	f1bc 0f00 	cmp.w	ip, #0
 8005c90:	bfdc      	itt	le
 8005c92:	f040 0008 	orrle.w	r0, r0, #8
 8005c96:	f040 0108 	orrle.w	r1, r0, #8
 8005c9a:	f04f 0000 	mov.w	r0, #0
 8005c9e:	bc0f      	pop	{r0, r1, r2, r3}
 8005ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca4:	f10b 0b01 	add.w	fp, fp, #1
 8005ca8:	f1bb 0f01 	cmp.w	fp, #1
 8005cac:	bf08      	it	eq
 8005cae:	ea5f 0717 	movseq.w	r7, r7, lsr #32
 8005cb2:	bf22      	ittt	cs
 8005cb4:	f112 0201 	addscs.w	r2, r2, #1
 8005cb8:	f111 0101 	addscs.w	r1, r1, #1
 8005cbc:	f04f 4100 	movcs.w	r1, #2147483648	@ 0x80000000
 8005cc0:	f143 0300 	adc.w	r3, r3, #0
 8005cc4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8005cc8:	ea43 0000 	orr.w	r0, r3, r0
 8005ccc:	4770      	bx	lr
 8005cce:	d3f9      	bcc.n	8005cc4 <_e2e+0x58>
 8005cd0:	0857      	lsrs	r7, r2, #1
 8005cd2:	e7d0      	b.n	8005c76 <_e2e+0xa>
 8005cd4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005cd8:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8005cdc:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8005ce0:	dd1f      	ble.n	8005d22 <_e2e+0xb6>
 8005ce2:	f113 0f20 	cmn.w	r3, #32
 8005ce6:	bfdf      	itttt	le
 8005ce8:	4316      	orrle	r6, r2
 8005cea:	460a      	movle	r2, r1
 8005cec:	2100      	movle	r1, #0
 8005cee:	3320      	addle	r3, #32
 8005cf0:	425b      	negs	r3, r3
 8005cf2:	d0be      	beq.n	8005c72 <_e2e+0x6>
 8005cf4:	f1c3 0720 	rsb	r7, r3, #32
 8005cf8:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005cfc:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8005d00:	fa02 f707 	lsl.w	r7, r2, r7
 8005d04:	ea46 0607 	orr.w	r6, r6, r7
 8005d08:	fa22 f203 	lsr.w	r2, r2, r3
 8005d0c:	f1c3 0720 	rsb	r7, r3, #32
 8005d10:	fa01 f707 	lsl.w	r7, r1, r7
 8005d14:	ea42 0207 	orr.w	r2, r2, r7
 8005d18:	fa21 f103 	lsr.w	r1, r1, r3
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e7a7      	b.n	8005c72 <_e2e+0x6>
 8005d22:	ea46 0602 	orr.w	r6, r6, r2
 8005d26:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005d2a:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8005d2e:	ea46 0601 	orr.w	r6, r6, r1
 8005d32:	bfbc      	itt	lt
 8005d34:	ea46 4606 	orrlt.w	r6, r6, r6, lsl #16
 8005d38:	0c36      	lsrlt	r6, r6, #16
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0100 	mov.w	r1, #0
 8005d46:	e794      	b.n	8005c72 <_e2e+0x6>

08005d48 <_btod_ediv>:
 8005d48:	e92d 4c80 	stmdb	sp!, {r7, sl, fp, lr}
 8005d4c:	b470      	push	{r4, r5, r6}
 8005d4e:	469a      	mov	sl, r3
 8005d50:	4693      	mov	fp, r2
 8005d52:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8005d56:	c807      	ldmia	r0, {r0, r1, r2}
 8005d58:	ea31 0c40 	bics.w	ip, r1, r0, lsl #1
 8005d5c:	bf48      	it	mi
 8005d5e:	ea34 0c43 	bicsmi.w	ip, r4, r3, lsl #1
 8005d62:	d503      	bpl.n	8005d6c <_btod_ediv+0x24>
 8005d64:	f7ff fde6 	bl	8005934 <__btod_div_common>
 8005d68:	f7ff ff80 	bl	8005c6c <_e2e>
 8005d6c:	bcf0      	pop	{r4, r5, r6, r7}
 8005d6e:	e8bd 8c00 	ldmia.w	sp!, {sl, fp, pc}

08005d72 <_btod_emul>:
 8005d72:	e92d 4c80 	stmdb	sp!, {r7, sl, fp, lr}
 8005d76:	b470      	push	{r4, r5, r6}
 8005d78:	469a      	mov	sl, r3
 8005d7a:	4693      	mov	fp, r2
 8005d7c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8005d80:	c807      	ldmia	r0, {r0, r1, r2}
 8005d82:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8005d86:	bf08      	it	eq
 8005d88:	f013 4f80 	tsteq.w	r3, #1073741824	@ 0x40000000
 8005d8c:	d103      	bne.n	8005d96 <_btod_emul+0x24>
 8005d8e:	f000 f805 	bl	8005d9c <__btod_mult_common>
 8005d92:	f7ff ff6b 	bl	8005c6c <_e2e>
 8005d96:	bcf0      	pop	{r4, r5, r6, r7}
 8005d98:	e8bd 8c00 	ldmia.w	sp!, {sl, fp, pc}

08005d9c <__btod_mult_common>:
 8005d9c:	f020 477f 	bic.w	r7, r0, #4278190080	@ 0xff000000
 8005da0:	f023 4c7f 	bic.w	ip, r3, #4278190080	@ 0xff000000
 8005da4:	ea80 0003 	eor.w	r0, r0, r3
 8005da8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8005dac:	eb07 030c 	add.w	r3, r7, ip
 8005db0:	f5a3 537c 	sub.w	r3, r3, #16128	@ 0x3f00
 8005db4:	f1a3 03fe 	sub.w	r3, r3, #254	@ 0xfe
 8005db8:	f092 0f00 	teq	r2, #0
 8005dbc:	f000 80b3 	beq.w	8005f26 <__btod_mult_common+0x18a>
 8005dc0:	f095 0f00 	teq	r5, #0
 8005dc4:	f000 8077 	beq.w	8005eb6 <__btod_mult_common+0x11a>
 8005dc8:	e92d 4901 	stmdb	sp!, {r0, r8, fp, lr}
 8005dcc:	ea4f 4011 	mov.w	r0, r1, lsr #16
 8005dd0:	ea21 4800 	bic.w	r8, r1, r0, lsl #16
 8005dd4:	ea4f 4614 	mov.w	r6, r4, lsr #16
 8005dd8:	ea24 4706 	bic.w	r7, r4, r6, lsl #16
 8005ddc:	fb00 fc06 	mul.w	ip, r0, r6
 8005de0:	fb08 f606 	mul.w	r6, r8, r6
 8005de4:	fb07 f808 	mul.w	r8, r7, r8
 8005de8:	eb18 4806 	adds.w	r8, r8, r6, lsl #16
 8005dec:	eb4c 4c16 	adc.w	ip, ip, r6, lsr #16
 8005df0:	fb00 f707 	mul.w	r7, r0, r7
 8005df4:	eb18 4807 	adds.w	r8, r8, r7, lsl #16
 8005df8:	eb4c 4017 	adc.w	r0, ip, r7, lsr #16
 8005dfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005e00:	ea22 4e0b 	bic.w	lr, r2, fp, lsl #16
 8005e04:	ea4f 4615 	mov.w	r6, r5, lsr #16
 8005e08:	ea25 4706 	bic.w	r7, r5, r6, lsl #16
 8005e0c:	fb0b fc06 	mul.w	ip, fp, r6
 8005e10:	fb0e f606 	mul.w	r6, lr, r6
 8005e14:	fb07 fe0e 	mul.w	lr, r7, lr
 8005e18:	eb1e 4e06 	adds.w	lr, lr, r6, lsl #16
 8005e1c:	eb4c 4c16 	adc.w	ip, ip, r6, lsr #16
 8005e20:	fb0b f707 	mul.w	r7, fp, r7
 8005e24:	eb1e 4e07 	adds.w	lr, lr, r7, lsl #16
 8005e28:	eb4c 4b17 	adc.w	fp, ip, r7, lsr #16
 8005e2c:	eb18 080b 	adds.w	r8, r8, fp
 8005e30:	f140 0000 	adc.w	r0, r0, #0
 8005e34:	eb18 0b0e 	adds.w	fp, r8, lr
 8005e38:	eb58 0800 	adcs.w	r8, r8, r0
 8005e3c:	f140 0000 	adc.w	r0, r0, #0
 8005e40:	1a8f      	subs	r7, r1, r2
 8005e42:	f04f 0100 	mov.w	r1, #0
 8005e46:	f04f 0600 	mov.w	r6, #0
 8005e4a:	bf3c      	itt	cc
 8005e4c:	43c9      	mvncc	r1, r1
 8005e4e:	1b66      	subcc	r6, r4, r5
 8005e50:	bf14      	ite	ne
 8005e52:	ebb5 0c04 	subsne.w	ip, r5, r4
 8005e56:	2100      	moveq	r1, #0
 8005e58:	bf3c      	itt	cc
 8005e5a:	43c9      	mvncc	r1, r1
 8005e5c:	1bf6      	subcc	r6, r6, r7
 8005e5e:	ea4f 4417 	mov.w	r4, r7, lsr #16
 8005e62:	ea27 4504 	bic.w	r5, r7, r4, lsl #16
 8005e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005e6a:	ea2c 4c07 	bic.w	ip, ip, r7, lsl #16
 8005e6e:	fb04 6207 	mla	r2, r4, r7, r6
 8005e72:	fb05 f707 	mul.w	r7, r5, r7
 8005e76:	fb0c f605 	mul.w	r6, ip, r5
 8005e7a:	eb16 4607 	adds.w	r6, r6, r7, lsl #16
 8005e7e:	eb42 4217 	adc.w	r2, r2, r7, lsr #16
 8005e82:	fb04 fc0c 	mul.w	ip, r4, ip
 8005e86:	eb16 460c 	adds.w	r6, r6, ip, lsl #16
 8005e8a:	eb42 421c 	adc.w	r2, r2, ip, lsr #16
 8005e8e:	eb1b 0606 	adds.w	r6, fp, r6
 8005e92:	eb58 0202 	adcs.w	r2, r8, r2
 8005e96:	4141      	adcs	r1, r0
 8005e98:	ea4e 0e8e 	orr.w	lr, lr, lr, lsl #2
 8005e9c:	ea46 069e 	orr.w	r6, r6, lr, lsr #2
 8005ea0:	d501      	bpl.n	8005ea6 <__btod_mult_common+0x10a>
 8005ea2:	e8bd 8901 	ldmia.w	sp!, {r0, r8, fp, pc}
 8005ea6:	19b6      	adds	r6, r6, r6
 8005ea8:	4152      	adcs	r2, r2
 8005eaa:	eb41 0101 	adc.w	r1, r1, r1
 8005eae:	f1a3 0301 	sub.w	r3, r3, #1
 8005eb2:	e8bd 8901 	ldmia.w	sp!, {r0, r8, fp, pc}
 8005eb6:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8005eba:	ea24 4605 	bic.w	r6, r4, r5, lsl #16
 8005ebe:	ea4f 4711 	mov.w	r7, r1, lsr #16
 8005ec2:	ea21 4c07 	bic.w	ip, r1, r7, lsl #16
 8005ec6:	fb05 f407 	mul.w	r4, r5, r7
 8005eca:	fb06 f707 	mul.w	r7, r6, r7
 8005ece:	fb0c f106 	mul.w	r1, ip, r6
 8005ed2:	eb11 4107 	adds.w	r1, r1, r7, lsl #16
 8005ed6:	eb44 4417 	adc.w	r4, r4, r7, lsr #16
 8005eda:	fb05 fc0c 	mul.w	ip, r5, ip
 8005ede:	eb11 410c 	adds.w	r1, r1, ip, lsl #16
 8005ee2:	eb44 441c 	adc.w	r4, r4, ip, lsr #16
 8005ee6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005eea:	ea22 4c07 	bic.w	ip, r2, r7, lsl #16
 8005eee:	fb05 f207 	mul.w	r2, r5, r7
 8005ef2:	fb06 f707 	mul.w	r7, r6, r7
 8005ef6:	fb0c f606 	mul.w	r6, ip, r6
 8005efa:	eb16 4607 	adds.w	r6, r6, r7, lsl #16
 8005efe:	eb42 4217 	adc.w	r2, r2, r7, lsr #16
 8005f02:	fb05 fc0c 	mul.w	ip, r5, ip
 8005f06:	eb16 460c 	adds.w	r6, r6, ip, lsl #16
 8005f0a:	eb42 451c 	adc.w	r5, r2, ip, lsr #16
 8005f0e:	186a      	adds	r2, r5, r1
 8005f10:	f154 0100 	adcs.w	r1, r4, #0
 8005f14:	bf48      	it	mi
 8005f16:	4770      	bxmi	lr
 8005f18:	19b6      	adds	r6, r6, r6
 8005f1a:	4152      	adcs	r2, r2
 8005f1c:	eb41 0101 	adc.w	r1, r1, r1
 8005f20:	f1a3 0301 	sub.w	r3, r3, #1
 8005f24:	4770      	bx	lr
 8005f26:	f095 0f00 	teq	r5, #0
 8005f2a:	d037      	beq.n	8005f9c <__btod_mult_common+0x200>
 8005f2c:	ea4f 4211 	mov.w	r2, r1, lsr #16
 8005f30:	ea21 4602 	bic.w	r6, r1, r2, lsl #16
 8005f34:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8005f38:	ea24 4c07 	bic.w	ip, r4, r7, lsl #16
 8005f3c:	fb02 f107 	mul.w	r1, r2, r7
 8005f40:	fb06 f707 	mul.w	r7, r6, r7
 8005f44:	fb0c f406 	mul.w	r4, ip, r6
 8005f48:	eb14 4407 	adds.w	r4, r4, r7, lsl #16
 8005f4c:	eb41 4117 	adc.w	r1, r1, r7, lsr #16
 8005f50:	fb02 fc0c 	mul.w	ip, r2, ip
 8005f54:	eb14 440c 	adds.w	r4, r4, ip, lsl #16
 8005f58:	eb41 411c 	adc.w	r1, r1, ip, lsr #16
 8005f5c:	ea4f 4715 	mov.w	r7, r5, lsr #16
 8005f60:	ea25 4c07 	bic.w	ip, r5, r7, lsl #16
 8005f64:	fb02 f507 	mul.w	r5, r2, r7
 8005f68:	fb06 f707 	mul.w	r7, r6, r7
 8005f6c:	fb0c f606 	mul.w	r6, ip, r6
 8005f70:	eb16 4607 	adds.w	r6, r6, r7, lsl #16
 8005f74:	eb45 4517 	adc.w	r5, r5, r7, lsr #16
 8005f78:	fb02 fc0c 	mul.w	ip, r2, ip
 8005f7c:	eb16 460c 	adds.w	r6, r6, ip, lsl #16
 8005f80:	eb45 421c 	adc.w	r2, r5, ip, lsr #16
 8005f84:	1912      	adds	r2, r2, r4
 8005f86:	f151 0100 	adcs.w	r1, r1, #0
 8005f8a:	bf48      	it	mi
 8005f8c:	4770      	bxmi	lr
 8005f8e:	19b6      	adds	r6, r6, r6
 8005f90:	4152      	adcs	r2, r2
 8005f92:	eb41 0101 	adc.w	r1, r1, r1
 8005f96:	f1a3 0301 	sub.w	r3, r3, #1
 8005f9a:	4770      	bx	lr
 8005f9c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8005fa0:	ea24 4605 	bic.w	r6, r4, r5, lsl #16
 8005fa4:	ea4f 4711 	mov.w	r7, r1, lsr #16
 8005fa8:	ea21 4c07 	bic.w	ip, r1, r7, lsl #16
 8005fac:	fb05 f107 	mul.w	r1, r5, r7
 8005fb0:	fb06 f707 	mul.w	r7, r6, r7
 8005fb4:	fb0c f206 	mul.w	r2, ip, r6
 8005fb8:	eb12 4207 	adds.w	r2, r2, r7, lsl #16
 8005fbc:	eb41 4117 	adc.w	r1, r1, r7, lsr #16
 8005fc0:	fb05 fc0c 	mul.w	ip, r5, ip
 8005fc4:	eb12 420c 	adds.w	r2, r2, ip, lsl #16
 8005fc8:	eb51 411c 	adcs.w	r1, r1, ip, lsr #16
 8005fcc:	f04f 0600 	mov.w	r6, #0
 8005fd0:	bf48      	it	mi
 8005fd2:	4770      	bxmi	lr
 8005fd4:	1892      	adds	r2, r2, r2
 8005fd6:	eb41 0101 	adc.w	r1, r1, r1
 8005fda:	f1a3 0301 	sub.w	r3, r3, #1
 8005fde:	4770      	bx	lr

08005fe0 <__ARM_fpclassify>:
 8005fe0:	0049      	lsls	r1, r1, #1
 8005fe2:	ea50 20c1 	orrs.w	r0, r0, r1, lsl #11
 8005fe6:	bf18      	it	ne
 8005fe8:	2004      	movne	r0, #4
 8005fea:	0d4a      	lsrs	r2, r1, #21
 8005fec:	bf18      	it	ne
 8005fee:	f040 0001 	orrne.w	r0, r0, #1
 8005ff2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005ff6:	ebb2 5f51 	cmp.w	r2, r1, lsr #21
 8005ffa:	bf08      	it	eq
 8005ffc:	f040 0002 	orreq.w	r0, r0, #2
 8006000:	2801      	cmp	r0, #1
 8006002:	bf08      	it	eq
 8006004:	2005      	moveq	r0, #5
 8006006:	4770      	bx	lr

08006008 <_is_digit>:
 8006008:	3830      	subs	r0, #48	@ 0x30
 800600a:	280a      	cmp	r0, #10
 800600c:	d201      	bcs.n	8006012 <_is_digit+0xa>
 800600e:	2001      	movs	r0, #1
 8006010:	4770      	bx	lr
 8006012:	2000      	movs	r0, #0
 8006014:	4770      	bx	lr
	...

08006018 <_get_lc_numeric>:
 8006018:	b510      	push	{r4, lr}
 800601a:	2900      	cmp	r1, #0
 800601c:	d00a      	beq.n	8006034 <_get_lc_numeric+0x1c>
 800601e:	7808      	ldrb	r0, [r1, #0]
 8006020:	2800      	cmp	r0, #0
 8006022:	d007      	beq.n	8006034 <_get_lc_numeric+0x1c>
 8006024:	4805      	ldr	r0, [pc, #20]	@ (800603c <_get_lc_numeric+0x24>)
 8006026:	4478      	add	r0, pc
 8006028:	f7fb fa52 	bl	80014d0 <strcmp>
 800602c:	2800      	cmp	r0, #0
 800602e:	d001      	beq.n	8006034 <_get_lc_numeric+0x1c>
 8006030:	2000      	movs	r0, #0
 8006032:	bd10      	pop	{r4, pc}
 8006034:	4802      	ldr	r0, [pc, #8]	@ (8006040 <_get_lc_numeric+0x28>)
 8006036:	4478      	add	r0, pc
 8006038:	bd10      	pop	{r4, pc}
 800603a:	0000      	.short	0x0000
 800603c:	000001b2 	.word	0x000001b2
 8006040:	000001aa 	.word	0x000001aa

08006044 <_get_lc_ctype>:
 8006044:	b510      	push	{r4, lr}
 8006046:	2900      	cmp	r1, #0
 8006048:	d00a      	beq.n	8006060 <_get_lc_ctype+0x1c>
 800604a:	7808      	ldrb	r0, [r1, #0]
 800604c:	2800      	cmp	r0, #0
 800604e:	d007      	beq.n	8006060 <_get_lc_ctype+0x1c>
 8006050:	4805      	ldr	r0, [pc, #20]	@ (8006068 <_get_lc_ctype+0x24>)
 8006052:	4478      	add	r0, pc
 8006054:	f7fb fa3c 	bl	80014d0 <strcmp>
 8006058:	2800      	cmp	r0, #0
 800605a:	d001      	beq.n	8006060 <_get_lc_ctype+0x1c>
 800605c:	2000      	movs	r0, #0
 800605e:	bd10      	pop	{r4, pc}
 8006060:	4802      	ldr	r0, [pc, #8]	@ (800606c <_get_lc_ctype+0x28>)
 8006062:	4478      	add	r0, pc
 8006064:	bd10      	pop	{r4, pc}
 8006066:	0000      	.short	0x0000
 8006068:	000001a2 	.word	0x000001a2
 800606c:	0000019a 	.word	0x0000019a

08006070 <_printf_fp_dec>:
 8006070:	f7fa be38 	b.w	8000ce4 <_printf_fp_dec_real>

08006074 <_printf_fp_hex>:
 8006074:	f7fa bf6c 	b.w	8000f50 <_printf_fp_hex_real>

08006078 <initial_mbstate>:
	...

08006080 <uc_hextab>:
 8006080:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8006090:	3040 0058                                   @0X.

08006094 <lc_hextab>:
 8006094:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
 80060a4:	3040 0078                                   @0x.

080060a8 <maptable>:
 80060a8:	0004 0800 0000 0000 0000 0200 0100 0000     ................
 80060b8:	                                             .

080060b9 <lc_hextab>:
 80060b9:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
 80060c9:	7078                                         xp.

080060cc <uc_hextab>:
 80060cc:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 80060dc:	5058 0000                                   XP..

080060e0 <tenpwrs_x>:
 80060e0:	4002 0000 0000 a000 0000 0000 4005 0000     .@...........@..
 80060f0:	0000 c800 0000 0000 400c 0000 0000 9c40     .........@....@.
 8006100:	0000 0000 4019 0000 2000 bebc 0000 0000     .....@... ......
 8006110:	4034 0000 c9bf 8e1b 0000 0400               4@..........

0800611c <tenpwrs_i>:
 800611c:	40b5 0000 4b50 d0cf 0766 cfe2 0001 0000     .@..PK..f.......
 800612c:	416c 0000 823e aa51 eedf 34a7 0001 0000     lA..>.Q....4....
 800613c:	42d9 0000 b5dc e2a0 303a 971f ffff ffff     .B......:0......
 800614c:	45b4 0000 25fd c8a0 a3e9 4fc1 ffff ffff     .E...%.....O....
 800615c:	3fff 0000 0000 8000 0000 0000 3fff 0000     .?...........?..
 800616c:	0000 8000 0000 0000                         ........

08006174 <.L__const.OLED_Init.cmd>:
 8006174:	1000 b000 8f81 a8a1 c81f 00d3 80d5 1fd9     ................
 8006184:	00da 40db                                   ...@

08006188 <AHBPrescTable>:
	...
 8006190:	0201 0403 0706 0908                         ........

08006198 <APBPrescTable>:
 8006198:	0000 0000 0201 0403                         ........

080061a0 <HAL_RCC_GetSysClockFreq.aPLLMULFactorTable>:
 80061a0:	0302 0504 0706 0908 0b0a 0d0c 0f0e 1010     ................

080061b0 <HAL_RCC_GetSysClockFreq.aPredivFactorTable>:
 80061b0:	0201                                        ..

080061b2 <.L.str>:
 80061b2:	6425 0021 0000                              %d!...

080061b8 <Region$$Table$$Base>:
 80061b8:	08006308 	.word	0x08006308
 80061bc:	20000000 	.word	0x20000000
 80061c0:	00000238 	.word	0x00000238
 80061c4:	08000150 	.word	0x08000150
 80061c8:	080064d0 	.word	0x080064d0
 80061cc:	20000238 	.word	0x20000238
 80061d0:	00000b18 	.word	0x00000b18
 80061d4:	080001b0 	.word	0x080001b0

080061d8 <Region$$Table$$Limit>:
 80061d8:	0000001c 	.word	0x0000001c

080061dc <__lcnum_c_name>:
 80061dc:	00000043 fffffff8                       C.......

080061e4 <__lcnum_c_start>:
 80061e4:	0000000c 0000000e 0000000f              ............

080061f0 <__lcnum_c_point>:
 80061f0:	                                         ..

080061f2 <__lcnum_c_thousands>:
	...

080061f3 <__lcnum_c_grouping>:
	...

080061f4 <__lcnum_c_end>:
 80061f4:	00000110                                ....

080061f8 <__lcctype_c_name>:
 80061f8:	00000043 fffffff8                       C.......

08006200 <__lcctype_c_start>:
	...

08006201 <__ctype>:
 8006201:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
 8006211:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
 8006221:	02020205 02020202 02020202 02020202     ................
 8006231:	20202020 20202020 02022020 02020202               ......
 8006241:	90909002 10909090 10101010 10101010     ................
 8006251:	10101010 10101010 02101010 02020202     ................
 8006261:	88888802 08888888 08080808 08080808     ................
 8006271:	08080808 08080808 02080808 40020202     ...............@
	...
